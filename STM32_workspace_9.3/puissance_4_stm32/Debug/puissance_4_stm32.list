
puissance_4_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003818  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000004c0  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000530  20000530  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fc57  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002488  00000000  00000000  0002fcf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005f54  00000000  00000000  0003217f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  000380d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  000389d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004b10  00000000  00000000  00039518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004293  00000000  00000000  0003e028  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000422bb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001c10  00000000  00000000  00042338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080039b0 	.word	0x080039b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080039b0 	.word	0x080039b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_InitTick+0x3c>)
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_InitTick+0x40>)
{
 80005b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	7818      	ldrb	r0, [r3, #0]
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f0 	udiv	r3, r3, r0
 80005c2:	6810      	ldr	r0, [r2, #0]
 80005c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005c8:	f000 f89c 	bl	8000704 <HAL_SYSTICK_Config>
 80005cc:	4604      	mov	r4, r0
 80005ce:	b958      	cbnz	r0, 80005e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d0:	2d0f      	cmp	r5, #15
 80005d2:	d809      	bhi.n	80005e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	4602      	mov	r2, r0
 80005d6:	4629      	mov	r1, r5
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005dc:	f000 f85e 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_InitTick+0x44>)
 80005e2:	4620      	mov	r0, r4
 80005e4:	601d      	str	r5, [r3, #0]
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005e8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_Init>:
{
 80005f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_Init+0x30>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000602:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000612:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f82f 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ffc8 	bl	80005b0 <HAL_InitTick>
  HAL_MspInit();
 8000620:	f002 fbf8 	bl	8002e14 <HAL_MspInit>
}
 8000624:	2000      	movs	r0, #0
 8000626:	bd08      	pop	{r3, pc}
 8000628:	40023c00 	.word	0x40023c00

0800062c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x10>)
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_IncTick+0x14>)
 8000630:	6811      	ldr	r1, [r2, #0]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	440b      	add	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <HAL_GetTick+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff fff6 	bl	8000644 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000658:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	bf1c      	itt	ne
 800065c:	4b05      	ldrne	r3, [pc, #20]	; (8000674 <HAL_Delay+0x24>)
 800065e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000660:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000662:	bf18      	it	ne
 8000664:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000666:	f7ff ffed 	bl	8000644 <HAL_GetTick>
 800066a:	1b40      	subs	r0, r0, r5
 800066c:	4284      	cmp	r4, r0
 800066e:	d8fa      	bhi.n	8000666 <HAL_Delay+0x16>
  {
  }
}
 8000670:	bd38      	pop	{r3, r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
 80006b8:	fa05 f303 	lsl.w	r3, r5, r3
 80006bc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	4019      	ands	r1, r3
 80006c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	fa05 f404 	lsl.w	r4, r5, r4
 80006ce:	3c01      	subs	r4, #1
 80006d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea42 0201 	orr.w	r2, r2, r1
 80006d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfad      	iteet	ge
 80006de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	andlt.w	r0, r0, #15
 80006e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfb5      	itete	lt
 80006ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	3801      	subs	r0, #1
 8000706:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800070a:	d20a      	bcs.n	8000722 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000710:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	21f0      	movs	r1, #240	; 0xf0
 8000714:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000734:	b129      	cbz	r1, 8000742 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800073a:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800073c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000740:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000742:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0U;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000744:	6822      	ldr	r2, [r4, #0]
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8000746:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 8000748:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800074a:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 800074c:	68a3      	ldr	r3, [r4, #8]
 800074e:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000752:	4830      	ldr	r0, [pc, #192]	; (8000814 <ETH_MACDMAConfig+0xe4>)
 8000754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000758:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800075c:	bf0c      	ite	eq
 800075e:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000762:	2100      	movne	r1, #0
 8000764:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000766:	430b      	orrs	r3, r1
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000768:	6013      	str	r3, [r2, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800076a:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 800076c:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800076e:	f7ff ff6f 	bl	8000650 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000772:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000774:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 8000776:	601d      	str	r5, [r3, #0]
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000778:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800077a:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 800077c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800077e:	f7ff ff67 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	605d      	str	r5, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000786:	2500      	movs	r5, #0
 8000788:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800078a:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800078c:	699a      	ldr	r2, [r3, #24]
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800078e:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000792:	0412      	lsls	r2, r2, #16
 8000794:	0c12      	lsrs	r2, r2, #16
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800079a:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800079c:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 800079e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a0:	f7ff ff56 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007a4:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a6:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80007a8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007aa:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007ac:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ae:	f7ff ff4f 	bl	8000650 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007b2:	6822      	ldr	r2, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007b6:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007b8:	f241 0518 	movw	r5, #4120	; 0x1018
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007bc:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007be:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007c0:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007c2:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007c6:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007ca:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007cc:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ce:	f7ff ff3f 	bl	8000650 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007d2:	6823      	ldr	r3, [r4, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80007d6:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007dc:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007de:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007e0:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e2:	f7ff ff35 	bl	8000650 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80007e6:	6822      	ldr	r2, [r4, #0]
 80007e8:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80007ec:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80007ee:	69a3      	ldr	r3, [r4, #24]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d107      	bne.n	8000804 <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80007f4:	f241 011c 	movw	r1, #4124	; 0x101c
 80007f8:	5853      	ldr	r3, [r2, r1]
 80007fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000802:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000804:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000808:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800080a:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800080c:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <ETH_MACDMAConfig+0xf4>)
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	ff20810f 	.word	0xff20810f
 8000818:	f8de3f23 	.word	0xf8de3f23
 800081c:	02c12080 	.word	0x02c12080
 8000820:	40028040 	.word	0x40028040
 8000824:	40028044 	.word	0x40028044

08000828 <HAL_ETH_ReadPHYRegister>:
{
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800082a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800082e:	2b82      	cmp	r3, #130	; 0x82
{
 8000830:	4605      	mov	r5, r0
 8000832:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000834:	d030      	beq.n	8000898 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000836:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000838:	2382      	movs	r3, #130	; 0x82
 800083a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800083e:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000840:	0189      	lsls	r1, r1, #6
 8000842:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000846:	f003 011c 	and.w	r1, r3, #28
 800084a:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800084c:	8a04      	ldrh	r4, [r0, #16]
 800084e:	02e4      	lsls	r4, r4, #11
 8000850:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000852:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000854:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000858:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800085a:	f7ff fef3 	bl	8000644 <HAL_GetTick>
 800085e:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000860:	f014 0001 	ands.w	r0, r4, #1
 8000864:	d107      	bne.n	8000876 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000866:	682b      	ldr	r3, [r5, #0]
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	b29b      	uxth	r3, r3
 800086c:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 800086e:	2301      	movs	r3, #1
 8000870:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000876:	f7ff fee5 	bl	8000644 <HAL_GetTick>
 800087a:	1bc0      	subs	r0, r0, r7
 800087c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000880:	d307      	bcc.n	8000892 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000882:	2301      	movs	r3, #1
 8000884:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000888:	2300      	movs	r3, #0
 800088a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 800088e:	2003      	movs	r0, #3
 8000890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	691c      	ldr	r4, [r3, #16]
 8000896:	e7e3      	b.n	8000860 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000898:	2002      	movs	r0, #2
}
 800089a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800089c <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800089c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80008a0:	2b42      	cmp	r3, #66	; 0x42
{
 80008a2:	b570      	push	{r4, r5, r6, lr}
 80008a4:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008a6:	d02e      	beq.n	8000906 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008a8:	2342      	movs	r3, #66	; 0x42
 80008aa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80008ae:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008b0:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 80008b2:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008b4:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 80008b8:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80008bc:	f000 001c 	and.w	r0, r0, #28
 80008c0:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80008c2:	8a2c      	ldrh	r4, [r5, #16]
 80008c4:	02e4      	lsls	r4, r4, #11
 80008c6:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80008c8:	4304      	orrs	r4, r0
 80008ca:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80008cc:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 80008ce:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80008d0:	f7ff feb8 	bl	8000644 <HAL_GetTick>
 80008d4:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80008d6:	f014 0001 	ands.w	r0, r4, #1
 80008da:	d103      	bne.n	80008e4 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 80008dc:	2301      	movs	r3, #1
 80008de:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80008e4:	f7ff feae 	bl	8000644 <HAL_GetTick>
 80008e8:	1b80      	subs	r0, r0, r6
 80008ea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008ee:	d307      	bcc.n	8000900 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008f6:	2300      	movs	r3, #0
 80008f8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80008fc:	2003      	movs	r0, #3
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	691c      	ldr	r4, [r3, #16]
 8000904:	e7e7      	b.n	80008d6 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000906:	2002      	movs	r0, #2
}
 8000908:	bd70      	pop	{r4, r5, r6, pc}
	...

0800090c <HAL_ETH_Init>:
{
 800090c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800090e:	2300      	movs	r3, #0
 8000910:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000912:	4604      	mov	r4, r0
 8000914:	2800      	cmp	r0, #0
 8000916:	f000 80de 	beq.w	8000ad6 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 800091a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800091e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000922:	b91b      	cbnz	r3, 800092c <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000924:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000928:	f002 fa90 	bl	8002e4c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b6a      	ldr	r3, [pc, #424]	; (8000adc <HAL_ETH_Init+0x1d0>)
 8000932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000938:	645a      	str	r2, [r3, #68]	; 0x44
 800093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000944:	4b66      	ldr	r3, [pc, #408]	; (8000ae0 <HAL_ETH_Init+0x1d4>)
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800094c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	6a21      	ldr	r1, [r4, #32]
 8000952:	430a      	orrs	r2, r1
 8000954:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000964:	f7ff fe6e 	bl	8000644 <HAL_GetTick>
 8000968:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	07d0      	lsls	r0, r2, #31
 8000974:	d41d      	bmi.n	80009b2 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000976:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000978:	f000 fcb2 	bl	80012e0 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800097c:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <HAL_ETH_Init+0x1d8>)
 800097e:	4a5a      	ldr	r2, [pc, #360]	; (8000ae8 <HAL_ETH_Init+0x1dc>)
 8000980:	4403      	add	r3, r0
 8000982:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000984:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000988:	d822      	bhi.n	80009d0 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800098a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800098e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000994:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4620      	mov	r0, r4
 800099a:	f7ff ff7f 	bl	800089c <HAL_ETH_WritePHYRegister>
 800099e:	4605      	mov	r5, r0
 80009a0:	b368      	cbz	r0, 80009fe <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 80009a2:	2101      	movs	r1, #1
 80009a4:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 80009a6:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80009a8:	f7ff fec2 	bl	8000730 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80009ac:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80009b0:	e00b      	b.n	80009ca <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80009b2:	f7ff fe47 	bl	8000644 <HAL_GetTick>
 80009b6:	1b40      	subs	r0, r0, r5
 80009b8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80009bc:	d9d5      	bls.n	800096a <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009be:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80009c0:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009c2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80009c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80009ca:	4628      	mov	r0, r5
 80009cc:	b003      	add	sp, #12
 80009ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80009d0:	4b46      	ldr	r3, [pc, #280]	; (8000aec <HAL_ETH_Init+0x1e0>)
 80009d2:	4a47      	ldr	r2, [pc, #284]	; (8000af0 <HAL_ETH_Init+0x1e4>)
 80009d4:	4403      	add	r3, r0
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d802      	bhi.n	80009e0 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009da:	f045 050c 	orr.w	r5, r5, #12
 80009de:	e7d6      	b.n	800098e <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <HAL_ETH_Init+0x1e8>)
 80009e2:	4a45      	ldr	r2, [pc, #276]	; (8000af8 <HAL_ETH_Init+0x1ec>)
 80009e4:	4403      	add	r3, r0
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d9d1      	bls.n	800098e <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <HAL_ETH_Init+0x1f0>)
 80009ec:	4a44      	ldr	r2, [pc, #272]	; (8000b00 <HAL_ETH_Init+0x1f4>)
 80009ee:	4403      	add	r3, r0
 80009f0:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009f2:	bf94      	ite	ls
 80009f4:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009f8:	f045 0510 	orrhi.w	r5, r5, #16
 80009fc:	e7c7      	b.n	800098e <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	f7ff fe26 	bl	8000650 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a04:	6863      	ldr	r3, [r4, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d053      	beq.n	8000ab2 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000a0a:	f7ff fe1b 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a0e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a12:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a14:	466a      	mov	r2, sp
 8000a16:	2101      	movs	r1, #1
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff ff05 	bl	8000828 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a1e:	f7ff fe11 	bl	8000644 <HAL_GetTick>
 8000a22:	1b80      	subs	r0, r0, r6
 8000a24:	42b8      	cmp	r0, r7
 8000a26:	d90b      	bls.n	8000a40 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f7ff fe80 	bl	8000730 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000a30:	2301      	movs	r3, #1
 8000a32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a36:	2300      	movs	r3, #0
 8000a38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a3c:	2503      	movs	r5, #3
 8000a3e:	e7c4      	b.n	80009ca <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a40:	9b00      	ldr	r3, [sp, #0]
 8000a42:	0759      	lsls	r1, r3, #29
 8000a44:	d5e6      	bpl.n	8000a14 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f7ff ff25 	bl	800089c <HAL_ETH_WritePHYRegister>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d1a5      	bne.n	80009a2 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000a56:	f7ff fdf5 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a5a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a5e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a60:	466a      	mov	r2, sp
 8000a62:	2101      	movs	r1, #1
 8000a64:	4620      	mov	r0, r4
 8000a66:	f7ff fedf 	bl	8000828 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a6a:	f7ff fdeb 	bl	8000644 <HAL_GetTick>
 8000a6e:	1b80      	subs	r0, r0, r6
 8000a70:	42b8      	cmp	r0, r7
 8000a72:	d8d9      	bhi.n	8000a28 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a74:	9b00      	ldr	r3, [sp, #0]
 8000a76:	069a      	lsls	r2, r3, #26
 8000a78:	d5f2      	bpl.n	8000a60 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a7a:	466a      	mov	r2, sp
 8000a7c:	211f      	movs	r1, #31
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f7ff fed2 	bl	8000828 <HAL_ETH_ReadPHYRegister>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d18c      	bne.n	80009a2 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000a88:	9b00      	ldr	r3, [sp, #0]
 8000a8a:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000a8e:	bf18      	it	ne
 8000a90:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000a94:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000a96:	bf4c      	ite	mi
 8000a98:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a9a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a9e:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000aa0:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fe43 	bl	8000730 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000ab0:	e78b      	b.n	80009ca <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000ab2:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000ab4:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000ab6:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000ab8:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000abc:	b292      	uxth	r2, r2
 8000abe:	4629      	mov	r1, r5
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff feeb 	bl	800089c <HAL_ETH_WritePHYRegister>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	f47f af6b 	bne.w	80009a2 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000acc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000ad0:	f7ff fdbe 	bl	8000650 <HAL_Delay>
 8000ad4:	e7e5      	b.n	8000aa2 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000ad6:	2501      	movs	r5, #1
 8000ad8:	e777      	b.n	80009ca <HAL_ETH_Init+0xbe>
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	feced300 	.word	0xfeced300
 8000ae8:	00e4e1bf 	.word	0x00e4e1bf
 8000aec:	fde9f140 	.word	0xfde9f140
 8000af0:	017d783f 	.word	0x017d783f
 8000af4:	fc6c7900 	.word	0xfc6c7900
 8000af8:	026259ff 	.word	0x026259ff
 8000afc:	fa0a1f00 	.word	0xfa0a1f00
 8000b00:	02faf07f 	.word	0x02faf07f

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b08:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000cd4 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b10:	4a6e      	ldr	r2, [pc, #440]	; (8000ccc <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b12:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000cd8 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b18:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000b1a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000b1e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b20:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	f040 80b8 	bne.w	8000c98 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b28:	684c      	ldr	r4, [r1, #4]
 8000b2a:	f024 0c10 	bic.w	ip, r4, #16
 8000b2e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8000b32:	2e01      	cmp	r6, #1
 8000b34:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b38:	d812      	bhi.n	8000b60 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000b3a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b3c:	2603      	movs	r6, #3
 8000b3e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b42:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b46:	68ce      	ldr	r6, [r1, #12]
 8000b48:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b4c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000b4e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b50:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b52:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b56:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b5a:	409e      	lsls	r6, r3
 8000b5c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000b5e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b60:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000b62:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b64:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b68:	43f6      	mvns	r6, r6
 8000b6a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b6e:	688f      	ldr	r7, [r1, #8]
 8000b70:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b74:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b78:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000b7c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7e:	d116      	bne.n	8000bae <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000b80:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b84:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b88:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b8c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b90:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b94:	f04f 0c0f 	mov.w	ip, #15
 8000b98:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b9c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba0:	690f      	ldr	r7, [r1, #16]
 8000ba2:	fa07 f70b 	lsl.w	r7, r7, fp
 8000ba6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000baa:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000bae:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bb0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb2:	f004 0703 	and.w	r7, r4, #3
 8000bb6:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000bba:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000bbe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc0:	00e6      	lsls	r6, r4, #3
 8000bc2:	d569      	bpl.n	8000c98 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc4:	f04f 0b00 	mov.w	fp, #0
 8000bc8:	f8cd b00c 	str.w	fp, [sp, #12]
 8000bcc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd0:	4e3f      	ldr	r6, [pc, #252]	; (8000cd0 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000bd6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000bda:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000bde:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000be2:	9703      	str	r7, [sp, #12]
 8000be4:	9f03      	ldr	r7, [sp, #12]
 8000be6:	f023 0703 	bic.w	r7, r3, #3
 8000bea:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bee:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bf2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bfa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bfe:	f04f 0e0f 	mov.w	lr, #15
 8000c02:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c06:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c08:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c0c:	d04b      	beq.n	8000ca6 <HAL_GPIO_Init+0x1a2>
 8000c0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c12:	42b0      	cmp	r0, r6
 8000c14:	d049      	beq.n	8000caa <HAL_GPIO_Init+0x1a6>
 8000c16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c1a:	42b0      	cmp	r0, r6
 8000c1c:	d047      	beq.n	8000cae <HAL_GPIO_Init+0x1aa>
 8000c1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c22:	42b0      	cmp	r0, r6
 8000c24:	d045      	beq.n	8000cb2 <HAL_GPIO_Init+0x1ae>
 8000c26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c2a:	42b0      	cmp	r0, r6
 8000c2c:	d043      	beq.n	8000cb6 <HAL_GPIO_Init+0x1b2>
 8000c2e:	4548      	cmp	r0, r9
 8000c30:	d043      	beq.n	8000cba <HAL_GPIO_Init+0x1b6>
 8000c32:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000c36:	42b0      	cmp	r0, r6
 8000c38:	d041      	beq.n	8000cbe <HAL_GPIO_Init+0x1ba>
 8000c3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c3e:	42b0      	cmp	r0, r6
 8000c40:	d03f      	beq.n	8000cc2 <HAL_GPIO_Init+0x1be>
 8000c42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c46:	42b0      	cmp	r0, r6
 8000c48:	d03d      	beq.n	8000cc6 <HAL_GPIO_Init+0x1c2>
 8000c4a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c4e:	42b0      	cmp	r0, r6
 8000c50:	bf14      	ite	ne
 8000c52:	260a      	movne	r6, #10
 8000c54:	2609      	moveq	r6, #9
 8000c56:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c5a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c5e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000c60:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c62:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c64:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c68:	bf0c      	ite	eq
 8000c6a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c6c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000c6e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000c70:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c72:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c76:	bf0c      	ite	eq
 8000c78:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c7a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000c7c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c84:	bf0c      	ite	eq
 8000c86:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c88:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000c8a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000c8c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c90:	bf54      	ite	pl
 8000c92:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c94:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c96:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c98:	3301      	adds	r3, #1
 8000c9a:	2b10      	cmp	r3, #16
 8000c9c:	f47f af3d 	bne.w	8000b1a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ca0:	b005      	add	sp, #20
 8000ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca6:	465e      	mov	r6, fp
 8000ca8:	e7d5      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000caa:	2601      	movs	r6, #1
 8000cac:	e7d3      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cae:	2602      	movs	r6, #2
 8000cb0:	e7d1      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cb2:	2603      	movs	r6, #3
 8000cb4:	e7cf      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cb6:	2604      	movs	r6, #4
 8000cb8:	e7cd      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cba:	2605      	movs	r6, #5
 8000cbc:	e7cb      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cbe:	2606      	movs	r6, #6
 8000cc0:	e7c9      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cc2:	2607      	movs	r6, #7
 8000cc4:	e7c7      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cc6:	2608      	movs	r6, #8
 8000cc8:	e7c5      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000cca:	bf00      	nop
 8000ccc:	40013c00 	.word	0x40013c00
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40021400 	.word	0x40021400

08000cdc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cdc:	6903      	ldr	r3, [r0, #16]
 8000cde:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000ce0:	bf14      	ite	ne
 8000ce2:	2001      	movne	r0, #1
 8000ce4:	2000      	moveq	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce8:	b10a      	cbz	r2, 8000cee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cea:	6181      	str	r1, [r0, #24]
 8000cec:	4770      	bx	lr
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	e7fb      	b.n	8000cea <HAL_GPIO_WritePin+0x2>

08000cf2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cf4:	4604      	mov	r4, r0
{
 8000cf6:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000cf8:	b360      	cbz	r0, 8000d54 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cfa:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000cfe:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d04:	b91b      	cbnz	r3, 8000d0e <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d06:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d0a:	f002 f963 	bl	8002fd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d14:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d16:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d18:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000d1c:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000d20:	bf08      	it	eq
 8000d22:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000d24:	f000 fc7e 	bl	8001624 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2a:	466e      	mov	r6, sp
 8000d2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d36:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d3a:	4625      	mov	r5, r4
 8000d3c:	1d27      	adds	r7, r4, #4
 8000d3e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000d42:	f855 0b10 	ldr.w	r0, [r5], #16
 8000d46:	f000 fc2d 	bl	80015a4 <USB_CoreInit>
 8000d4a:	4606      	mov	r6, r0
 8000d4c:	b120      	cbz	r0, 8000d58 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000d54:	2501      	movs	r5, #1
 8000d56:	e050      	b.n	8000dfa <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d58:	4601      	mov	r1, r0
 8000d5a:	6820      	ldr	r0, [r4, #0]
 8000d5c:	f000 fc68 	bl	8001630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d60:	4630      	mov	r0, r6
 8000d62:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d66:	261c      	movs	r6, #28
 8000d68:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d70:	4596      	cmp	lr, r2
 8000d72:	f100 0001 	add.w	r0, r0, #1
 8000d76:	d81c      	bhi.n	8000db2 <HAL_PCD_Init+0xc0>
 8000d78:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d7a:	261c      	movs	r6, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d80:	4586      	cmp	lr, r0
 8000d82:	f103 0301 	add.w	r3, r3, #1
 8000d86:	d822      	bhi.n	8000dce <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	466e      	mov	r6, sp
 8000d8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d96:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d9a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000d9e:	6820      	ldr	r0, [r4, #0]
 8000da0:	f000 fc88 	bl	80016b4 <USB_DevInit>
 8000da4:	2301      	movs	r3, #1
 8000da6:	4605      	mov	r5, r0
 8000da8:	b300      	cbz	r0, 8000dec <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000daa:	2202      	movs	r2, #2
 8000dac:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000db0:	e7d0      	b.n	8000d54 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000db2:	fb06 4302 	mla	r3, r6, r2, r4
 8000db6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000dbe:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dc2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000dc6:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dc8:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dca:	6519      	str	r1, [r3, #80]	; 0x50
 8000dcc:	e7cf      	b.n	8000d6e <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000dce:	fb06 4200 	mla	r2, r6, r0, r4
 8000dd2:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000dd6:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000dda:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dde:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000de2:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000de6:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000dea:	e7c8      	b.n	8000d7e <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000dec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000df0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	f000 fd17 	bl	8001828 <USB_DevDisconnect>

  return HAL_OK;
}
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	b00b      	add	sp, #44	; 0x2c
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e04:	4604      	mov	r4, r0
 8000e06:	b908      	cbnz	r0, 8000e0c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000e08:	2001      	movs	r0, #1
 8000e0a:	e03f      	b.n	8000e8c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0c:	6803      	ldr	r3, [r0, #0]
 8000e0e:	07dd      	lsls	r5, r3, #31
 8000e10:	d410      	bmi.n	8000e34 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	0798      	lsls	r0, r3, #30
 8000e16:	d45a      	bmi.n	8000ece <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	071a      	lsls	r2, r3, #28
 8000e1c:	f100 809c 	bmi.w	8000f58 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	075b      	lsls	r3, r3, #29
 8000e24:	f100 80ba 	bmi.w	8000f9c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e28:	69a0      	ldr	r0, [r4, #24]
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	f040 811b 	bne.w	8001066 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000e30:	2000      	movs	r0, #0
 8000e32:	e02b      	b.n	8000e8c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e34:	4ba4      	ldr	r3, [pc, #656]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	f002 020c 	and.w	r2, r2, #12
 8000e3c:	2a04      	cmp	r2, #4
 8000e3e:	d007      	beq.n	8000e50 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e46:	2a08      	cmp	r2, #8
 8000e48:	d10a      	bne.n	8000e60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	0259      	lsls	r1, r3, #9
 8000e4e:	d507      	bpl.n	8000e60 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	4b9d      	ldr	r3, [pc, #628]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	039a      	lsls	r2, r3, #14
 8000e56:	d5dc      	bpl.n	8000e12 <HAL_RCC_OscConfig+0x12>
 8000e58:	6863      	ldr	r3, [r4, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1d9      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12>
 8000e5e:	e7d3      	b.n	8000e08 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	4d99      	ldr	r5, [pc, #612]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e68:	d113      	bne.n	8000e92 <HAL_RCC_OscConfig+0x92>
 8000e6a:	682b      	ldr	r3, [r5, #0]
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e72:	f7ff fbe7 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	4d94      	ldr	r5, [pc, #592]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	682b      	ldr	r3, [r5, #0]
 8000e7c:	039b      	lsls	r3, r3, #14
 8000e7e:	d4c8      	bmi.n	8000e12 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fbe0 	bl	8000644 <HAL_GetTick>
 8000e84:	1b80      	subs	r0, r0, r6
 8000e86:	2864      	cmp	r0, #100	; 0x64
 8000e88:	d9f7      	bls.n	8000e7a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000e8a:	2003      	movs	r0, #3
}
 8000e8c:	b002      	add	sp, #8
 8000e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e96:	d104      	bne.n	8000ea2 <HAL_RCC_OscConfig+0xa2>
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9e:	602b      	str	r3, [r5, #0]
 8000ea0:	e7e3      	b.n	8000e6a <HAL_RCC_OscConfig+0x6a>
 8000ea2:	682a      	ldr	r2, [r5, #0]
 8000ea4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ea8:	602a      	str	r2, [r5, #0]
 8000eaa:	682a      	ldr	r2, [r5, #0]
 8000eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eb0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1dd      	bne.n	8000e72 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fbc5 	bl	8000644 <HAL_GetTick>
 8000eba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	039f      	lsls	r7, r3, #14
 8000ec0:	d5a7      	bpl.n	8000e12 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fbbf 	bl	8000644 <HAL_GetTick>
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	2864      	cmp	r0, #100	; 0x64
 8000eca:	d9f7      	bls.n	8000ebc <HAL_RCC_OscConfig+0xbc>
 8000ecc:	e7dd      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ece:	4b7e      	ldr	r3, [pc, #504]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	f012 0f0c 	tst.w	r2, #12
 8000ed6:	d007      	beq.n	8000ee8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ede:	2a08      	cmp	r2, #8
 8000ee0:	d111      	bne.n	8000f06 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	025e      	lsls	r6, r3, #9
 8000ee6:	d40e      	bmi.n	8000f06 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee8:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	0795      	lsls	r5, r2, #30
 8000eee:	d502      	bpl.n	8000ef6 <HAL_RCC_OscConfig+0xf6>
 8000ef0:	68e2      	ldr	r2, [r4, #12]
 8000ef2:	2a01      	cmp	r2, #1
 8000ef4:	d188      	bne.n	8000e08 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	6921      	ldr	r1, [r4, #16]
 8000efa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000efe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000f02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f04:	e788      	b.n	8000e18 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f06:	68e2      	ldr	r2, [r4, #12]
 8000f08:	4b70      	ldr	r3, [pc, #448]	; (80010cc <HAL_RCC_OscConfig+0x2cc>)
 8000f0a:	b1b2      	cbz	r2, 8000f3a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb98 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f14:	4d6c      	ldr	r5, [pc, #432]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000f16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	0798      	lsls	r0, r3, #30
 8000f1c:	d507      	bpl.n	8000f2e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	6922      	ldr	r2, [r4, #16]
 8000f22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f2a:	602b      	str	r3, [r5, #0]
 8000f2c:	e774      	b.n	8000e18 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fb89 	bl	8000644 <HAL_GetTick>
 8000f32:	1b80      	subs	r0, r0, r6
 8000f34:	2802      	cmp	r0, #2
 8000f36:	d9ef      	bls.n	8000f18 <HAL_RCC_OscConfig+0x118>
 8000f38:	e7a7      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000f3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb82 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f40:	4d61      	ldr	r5, [pc, #388]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000f42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	0799      	lsls	r1, r3, #30
 8000f48:	f57f af66 	bpl.w	8000e18 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fb7a 	bl	8000644 <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9f6      	bls.n	8000f44 <HAL_RCC_OscConfig+0x144>
 8000f56:	e798      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f58:	6962      	ldr	r2, [r4, #20]
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <HAL_RCC_OscConfig+0x2d0>)
 8000f5c:	b17a      	cbz	r2, 8000f7e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f62:	f7ff fb6f 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	4d58      	ldr	r5, [pc, #352]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000f68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f6c:	079f      	lsls	r7, r3, #30
 8000f6e:	f53f af57 	bmi.w	8000e20 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff fb67 	bl	8000644 <HAL_GetTick>
 8000f76:	1b80      	subs	r0, r0, r6
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d9f6      	bls.n	8000f6a <HAL_RCC_OscConfig+0x16a>
 8000f7c:	e785      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000f7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f80:	f7ff fb60 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f84:	4d50      	ldr	r5, [pc, #320]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000f86:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f8a:	0798      	lsls	r0, r3, #30
 8000f8c:	f57f af48 	bpl.w	8000e20 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f90:	f7ff fb58 	bl	8000644 <HAL_GetTick>
 8000f94:	1b80      	subs	r0, r0, r6
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9f6      	bls.n	8000f88 <HAL_RCC_OscConfig+0x188>
 8000f9a:	e776      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000fa4:	d128      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	4d45      	ldr	r5, [pc, #276]	; (80010d4 <HAL_RCC_OscConfig+0x2d4>)
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	05d9      	lsls	r1, r3, #23
 8000fc2:	d51b      	bpl.n	8000ffc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc4:	68a3      	ldr	r3, [r4, #8]
 8000fc6:	4d40      	ldr	r5, [pc, #256]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d127      	bne.n	800101c <HAL_RCC_OscConfig+0x21c>
 8000fcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fb36 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd8:	4d3b      	ldr	r5, [pc, #236]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000fda:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fdc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fe2:	079b      	lsls	r3, r3, #30
 8000fe4:	d539      	bpl.n	800105a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	f43f af1e 	beq.w	8000e28 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fec:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8000fee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	e717      	b.n	8000e28 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000ff8:	2600      	movs	r6, #0
 8000ffa:	e7df      	b.n	8000fbc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001004:	f7ff fb1e 	bl	8000644 <HAL_GetTick>
 8001008:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	05da      	lsls	r2, r3, #23
 800100e:	d4d9      	bmi.n	8000fc4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001010:	f7ff fb18 	bl	8000644 <HAL_GetTick>
 8001014:	1bc0      	subs	r0, r0, r7
 8001016:	2802      	cmp	r0, #2
 8001018:	d9f7      	bls.n	800100a <HAL_RCC_OscConfig+0x20a>
 800101a:	e736      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101c:	2b05      	cmp	r3, #5
 800101e:	d104      	bne.n	800102a <HAL_RCC_OscConfig+0x22a>
 8001020:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	672b      	str	r3, [r5, #112]	; 0x70
 8001028:	e7d0      	b.n	8000fcc <HAL_RCC_OscConfig+0x1cc>
 800102a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	672a      	str	r2, [r5, #112]	; 0x70
 8001032:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001034:	f022 0204 	bic.w	r2, r2, #4
 8001038:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1ca      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800103e:	f7ff fb01 	bl	8000644 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001046:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001048:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800104a:	0798      	lsls	r0, r3, #30
 800104c:	d5cb      	bpl.n	8000fe6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff faf9 	bl	8000644 <HAL_GetTick>
 8001052:	1bc0      	subs	r0, r0, r7
 8001054:	4540      	cmp	r0, r8
 8001056:	d9f7      	bls.n	8001048 <HAL_RCC_OscConfig+0x248>
 8001058:	e717      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff faf3 	bl	8000644 <HAL_GetTick>
 800105e:	1bc0      	subs	r0, r0, r7
 8001060:	4540      	cmp	r0, r8
 8001062:	d9bd      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1e0>
 8001064:	e711      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001066:	4d18      	ldr	r5, [pc, #96]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
 8001068:	68ab      	ldr	r3, [r5, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b08      	cmp	r3, #8
 8001070:	d047      	beq.n	8001102 <HAL_RCC_OscConfig+0x302>
 8001072:	4e19      	ldr	r6, [pc, #100]	; (80010d8 <HAL_RCC_OscConfig+0x2d8>)
 8001074:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001076:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001078:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107a:	d135      	bne.n	80010e8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800107c:	f7ff fae2 	bl	8000644 <HAL_GetTick>
 8001080:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	0199      	lsls	r1, r3, #6
 8001086:	d429      	bmi.n	80010dc <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001088:	6a22      	ldr	r2, [r4, #32]
 800108a:	69e3      	ldr	r3, [r4, #28]
 800108c:	4313      	orrs	r3, r2
 800108e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001090:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001094:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001096:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800109a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800109e:	0852      	lsrs	r2, r2, #1
 80010a0:	3a01      	subs	r2, #1
 80010a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010a6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80010a8:	2301      	movs	r3, #1
 80010aa:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80010ac:	f7ff faca 	bl	8000644 <HAL_GetTick>
 80010b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	019a      	lsls	r2, r3, #6
 80010b6:	f53f aebb 	bmi.w	8000e30 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fac3 	bl	8000644 <HAL_GetTick>
 80010be:	1b40      	subs	r0, r0, r5
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d9f6      	bls.n	80010b2 <HAL_RCC_OscConfig+0x2b2>
 80010c4:	e6e1      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	42470000 	.word	0x42470000
 80010d0:	42470e80 	.word	0x42470e80
 80010d4:	40007000 	.word	0x40007000
 80010d8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010dc:	f7ff fab2 	bl	8000644 <HAL_GetTick>
 80010e0:	1bc0      	subs	r0, r0, r7
 80010e2:	2802      	cmp	r0, #2
 80010e4:	d9cd      	bls.n	8001082 <HAL_RCC_OscConfig+0x282>
 80010e6:	e6d0      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80010e8:	f7ff faac 	bl	8000644 <HAL_GetTick>
 80010ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	f57f ae9d 	bpl.w	8000e30 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f6:	f7ff faa5 	bl	8000644 <HAL_GetTick>
 80010fa:	1b00      	subs	r0, r0, r4
 80010fc:	2802      	cmp	r0, #2
 80010fe:	d9f6      	bls.n	80010ee <HAL_RCC_OscConfig+0x2ee>
 8001100:	e6c3      	b.n	8000e8a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001102:	2801      	cmp	r0, #1
 8001104:	f43f aec2 	beq.w	8000e8c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8001108:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110a:	69e3      	ldr	r3, [r4, #28]
 800110c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001110:	429a      	cmp	r2, r3
 8001112:	f47f ae79 	bne.w	8000e08 <HAL_RCC_OscConfig+0x8>
 8001116:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001118:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111c:	4293      	cmp	r3, r2
 800111e:	f47f ae73 	bne.w	8000e08 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001122:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001128:	4003      	ands	r3, r0
 800112a:	4293      	cmp	r3, r2
 800112c:	f47f ae6c 	bne.w	8000e08 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001130:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001132:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001136:	4293      	cmp	r3, r2
 8001138:	f47f ae66 	bne.w	8000e08 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800113c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800113e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001142:	1ac0      	subs	r0, r0, r3
 8001144:	bf18      	it	ne
 8001146:	2001      	movne	r0, #1
 8001148:	e6a0      	b.n	8000e8c <HAL_RCC_OscConfig+0x8c>
 800114a:	bf00      	nop

0800114c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800114c:	4913      	ldr	r1, [pc, #76]	; (800119c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800114e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001150:	688b      	ldr	r3, [r1, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b04      	cmp	r3, #4
 8001158:	d003      	beq.n	8001162 <HAL_RCC_GetSysClockFreq+0x16>
 800115a:	2b08      	cmp	r3, #8
 800115c:	d003      	beq.n	8001166 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800115e:	4810      	ldr	r0, [pc, #64]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001160:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001164:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001166:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001168:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800116a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800116c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001170:	bf14      	ite	ne
 8001172:	480c      	ldrne	r0, [pc, #48]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001174:	480a      	ldreq	r0, [pc, #40]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001176:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800117a:	bf18      	it	ne
 800117c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800117e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001182:	fba1 0100 	umull	r0, r1, r1, r0
 8001186:	f7ff f88b 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_RCC_GetSysClockFreq+0x50>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001192:	3301      	adds	r3, #1
 8001194:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001196:	fbb0 f0f3 	udiv	r0, r0, r3
 800119a:	bd08      	pop	{r3, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	00f42400 	.word	0x00f42400
 80011a4:	007a1200 	.word	0x007a1200

080011a8 <HAL_RCC_ClockConfig>:
{
 80011a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ac:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80011ae:	4604      	mov	r4, r0
 80011b0:	b910      	cbnz	r0, 80011b8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80011b2:	2001      	movs	r0, #1
 80011b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <HAL_RCC_ClockConfig+0x124>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f002 020f 	and.w	r2, r2, #15
 80011c0:	428a      	cmp	r2, r1
 80011c2:	d329      	bcc.n	8001218 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c4:	6821      	ldr	r1, [r4, #0]
 80011c6:	078f      	lsls	r7, r1, #30
 80011c8:	d42e      	bmi.n	8001228 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	07c8      	lsls	r0, r1, #31
 80011cc:	d441      	bmi.n	8001252 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <HAL_RCC_ClockConfig+0x124>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f002 020f 	and.w	r2, r2, #15
 80011d6:	4295      	cmp	r5, r2
 80011d8:	d367      	bcc.n	80012aa <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011da:	6822      	ldr	r2, [r4, #0]
 80011dc:	0751      	lsls	r1, r2, #29
 80011de:	d46d      	bmi.n	80012bc <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e0:	0713      	lsls	r3, r2, #28
 80011e2:	d507      	bpl.n	80011f4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e4:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <HAL_RCC_ClockConfig+0x128>)
 80011e6:	6921      	ldr	r1, [r4, #16]
 80011e8:	6893      	ldr	r3, [r2, #8]
 80011ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011f2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f4:	f7ff ffaa 	bl	800114c <HAL_RCC_GetSysClockFreq>
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <HAL_RCC_ClockConfig+0x128>)
 80011fa:	4a36      	ldr	r2, [pc, #216]	; (80012d4 <HAL_RCC_ClockConfig+0x12c>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	40d8      	lsrs	r0, r3
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_RCC_ClockConfig+0x130>)
 8001208:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_RCC_ClockConfig+0x134>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f7ff f9cf 	bl	80005b0 <HAL_InitTick>
  return HAL_OK;
 8001212:	2000      	movs	r0, #0
 8001214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001218:	b2ca      	uxtb	r2, r1
 800121a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	4299      	cmp	r1, r3
 8001224:	d1c5      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xa>
 8001226:	e7cd      	b.n	80011c4 <HAL_RCC_ClockConfig+0x1c>
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800122e:	bf1e      	ittt	ne
 8001230:	689a      	ldrne	r2, [r3, #8]
 8001232:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001236:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001238:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123a:	bf42      	ittt	mi
 800123c:	689a      	ldrmi	r2, [r3, #8]
 800123e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001242:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68a0      	ldr	r0, [r4, #8]
 8001248:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800124c:	4302      	orrs	r2, r0
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	e7bb      	b.n	80011ca <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001252:	6862      	ldr	r2, [r4, #4]
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_RCC_ClockConfig+0x128>)
 8001256:	2a01      	cmp	r2, #1
 8001258:	d11d      	bne.n	8001296 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	d0a7      	beq.n	80011b2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4e1b      	ldr	r6, [pc, #108]	; (80012d0 <HAL_RCC_ClockConfig+0x128>)
 8001264:	68b3      	ldr	r3, [r6, #8]
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	4313      	orrs	r3, r2
 800126c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800126e:	f7ff f9e9 	bl	8000644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001272:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001276:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001278:	68b3      	ldr	r3, [r6, #8]
 800127a:	6862      	ldr	r2, [r4, #4]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001284:	d0a3      	beq.n	80011ce <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001286:	f7ff f9dd 	bl	8000644 <HAL_GetTick>
 800128a:	1bc0      	subs	r0, r0, r7
 800128c:	4540      	cmp	r0, r8
 800128e:	d9f3      	bls.n	8001278 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001290:	2003      	movs	r0, #3
}
 8001292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001296:	1e91      	subs	r1, r2, #2
 8001298:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800129c:	d802      	bhi.n	80012a4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012a2:	e7dd      	b.n	8001260 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	f013 0f02 	tst.w	r3, #2
 80012a8:	e7da      	b.n	8001260 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012aa:	b2ea      	uxtb	r2, r5
 80012ac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	429d      	cmp	r5, r3
 80012b6:	f47f af7c 	bne.w	80011b2 <HAL_RCC_ClockConfig+0xa>
 80012ba:	e78e      	b.n	80011da <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012bc:	4904      	ldr	r1, [pc, #16]	; (80012d0 <HAL_RCC_ClockConfig+0x128>)
 80012be:	68e0      	ldr	r0, [r4, #12]
 80012c0:	688b      	ldr	r3, [r1, #8]
 80012c2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012c6:	4303      	orrs	r3, r0
 80012c8:	608b      	str	r3, [r1, #8]
 80012ca:	e789      	b.n	80011e0 <HAL_RCC_ClockConfig+0x38>
 80012cc:	40023c00 	.word	0x40023c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	08003a0c 	.word	0x08003a0c
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008

080012ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_RCC_GetPCLK1Freq+0x14>)
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012fa:	6810      	ldr	r0, [r2, #0]
}
 80012fc:	40d8      	lsrs	r0, r3
 80012fe:	4770      	bx	lr
 8001300:	40023800 	.word	0x40023800
 8001304:	08003a1c 	.word	0x08003a1c
 8001308:	20000008 	.word	0x20000008

0800130c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_RCC_GetPCLK2Freq+0x14>)
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800131a:	6810      	ldr	r0, [r2, #0]
}
 800131c:	40d8      	lsrs	r0, r3
 800131e:	4770      	bx	lr
 8001320:	40023800 	.word	0x40023800
 8001324:	08003a1c 	.word	0x08003a1c
 8001328:	20000008 	.word	0x20000008

0800132c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800132c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800132e:	6803      	ldr	r3, [r0, #0]
 8001330:	68c1      	ldr	r1, [r0, #12]
 8001332:	691a      	ldr	r2, [r3, #16]
{
 8001334:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001336:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800133a:	430a      	orrs	r2, r1
 800133c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800133e:	6925      	ldr	r5, [r4, #16]
 8001340:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001342:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001344:	69c0      	ldr	r0, [r0, #28]
 8001346:	432a      	orrs	r2, r5
 8001348:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800134a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800134e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001350:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001354:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001356:	430a      	orrs	r2, r1
 8001358:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800135a:	695a      	ldr	r2, [r3, #20]
 800135c:	69a1      	ldr	r1, [r4, #24]
 800135e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001362:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001364:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800136c:	d129      	bne.n	80013c2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800136e:	4293      	cmp	r3, r2
 8001370:	d003      	beq.n	800137a <UART_SetConfig+0x4e>
 8001372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001376:	4293      	cmp	r3, r2
 8001378:	d120      	bne.n	80013bc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800137a:	f7ff ffc7 	bl	800130c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800137e:	6862      	ldr	r2, [r4, #4]
 8001380:	6825      	ldr	r5, [r4, #0]
 8001382:	1892      	adds	r2, r2, r2
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	f04f 0119 	mov.w	r1, #25
 800138c:	415b      	adcs	r3, r3
 800138e:	fba0 0101 	umull	r0, r1, r0, r1
 8001392:	f7fe ff85 	bl	80002a0 <__aeabi_uldivmod>
 8001396:	2164      	movs	r1, #100	; 0x64
 8001398:	fbb0 f4f1 	udiv	r4, r0, r1
 800139c:	fb01 0314 	mls	r3, r1, r4, r0
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	3332      	adds	r3, #50	; 0x32
 80013a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a8:	f003 0207 	and.w	r2, r3, #7
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80013b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80013b6:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013b8:	60ab      	str	r3, [r5, #8]
 80013ba:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80013bc:	f7ff ff96 	bl	80012ec <HAL_RCC_GetPCLK1Freq>
 80013c0:	e7dd      	b.n	800137e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d002      	beq.n	80013cc <UART_SetConfig+0xa0>
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <UART_SetConfig+0xd8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d116      	bne.n	80013fa <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80013cc:	f7ff ff9e 	bl	800130c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013d0:	6863      	ldr	r3, [r4, #4]
 80013d2:	6825      	ldr	r5, [r4, #0]
 80013d4:	2119      	movs	r1, #25
 80013d6:	009a      	lsls	r2, r3, #2
 80013d8:	fba0 0101 	umull	r0, r1, r0, r1
 80013dc:	0f9b      	lsrs	r3, r3, #30
 80013de:	f7fe ff5f 	bl	80002a0 <__aeabi_uldivmod>
 80013e2:	2264      	movs	r2, #100	; 0x64
 80013e4:	fbb0 f1f2 	udiv	r1, r0, r2
 80013e8:	fb02 0311 	mls	r3, r2, r1, r0
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	3332      	adds	r3, #50	; 0x32
 80013f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80013f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80013f8:	e7de      	b.n	80013b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80013fa:	f7ff ff77 	bl	80012ec <HAL_RCC_GetPCLK1Freq>
 80013fe:	e7e7      	b.n	80013d0 <UART_SetConfig+0xa4>
 8001400:	40011000 	.word	0x40011000
 8001404:	40011400 	.word	0x40011400

08001408 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140a:	4604      	mov	r4, r0
 800140c:	460e      	mov	r6, r1
 800140e:	4617      	mov	r7, r2
 8001410:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001412:	6821      	ldr	r1, [r4, #0]
 8001414:	680b      	ldr	r3, [r1, #0]
 8001416:	ea36 0303 	bics.w	r3, r6, r3
 800141a:	d101      	bne.n	8001420 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800141c:	2000      	movs	r0, #0
}
 800141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001420:	1c6b      	adds	r3, r5, #1
 8001422:	d0f7      	beq.n	8001414 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001424:	b995      	cbnz	r5, 800144c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800142e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001438:	2320      	movs	r3, #32
 800143a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800143e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001442:	2300      	movs	r3, #0
 8001444:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001448:	2003      	movs	r0, #3
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800144c:	f7ff f8fa 	bl	8000644 <HAL_GetTick>
 8001450:	1bc0      	subs	r0, r0, r7
 8001452:	4285      	cmp	r5, r0
 8001454:	d2dd      	bcs.n	8001412 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001456:	e7e6      	b.n	8001426 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001458 <HAL_UART_Init>:
{
 8001458:	b510      	push	{r4, lr}
  if (huart == NULL)
 800145a:	4604      	mov	r4, r0
 800145c:	b340      	cbz	r0, 80014b0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800145e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001466:	b91b      	cbnz	r3, 8001470 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001468:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800146c:	f001 fd7c 	bl	8002f68 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001470:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001472:	2324      	movs	r3, #36	; 0x24
 8001474:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001478:	68d3      	ldr	r3, [r2, #12]
 800147a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800147e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff ff53 	bl	800132c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800148e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001496:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800149e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80014a2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80014a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80014ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
}
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <HAL_UART_Transmit>:
{
 80014b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014b8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80014ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014be:	2b20      	cmp	r3, #32
{
 80014c0:	4604      	mov	r4, r0
 80014c2:	460d      	mov	r5, r1
 80014c4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80014c6:	d151      	bne.n	800156c <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80014c8:	2900      	cmp	r1, #0
 80014ca:	d04c      	beq.n	8001566 <HAL_UART_Transmit+0xb2>
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d04a      	beq.n	8001566 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80014d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d049      	beq.n	800156c <HAL_UART_Transmit+0xb8>
 80014d8:	2301      	movs	r3, #1
 80014da:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014de:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014e2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014e4:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80014ec:	f7ff f8aa 	bl	8000644 <HAL_GetTick>
    huart->TxXferSize = Size;
 80014f0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80014f4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80014f6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80014fa:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80014fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001500:	b29b      	uxth	r3, r3
 8001502:	b95b      	cbnz	r3, 800151c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4632      	mov	r2, r6
 8001508:	2140      	movs	r1, #64	; 0x40
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff ff7c 	bl	8001408 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001510:	b9a0      	cbnz	r0, 800153c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001512:	2320      	movs	r3, #32
 8001514:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800151c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800151e:	3b01      	subs	r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001524:	68a3      	ldr	r3, [r4, #8]
 8001526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800152a:	4632      	mov	r2, r6
 800152c:	463b      	mov	r3, r7
 800152e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001532:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001534:	d10e      	bne.n	8001554 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001536:	f7ff ff67 	bl	8001408 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800153a:	b110      	cbz	r0, 8001542 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800153c:	2003      	movs	r0, #3
 800153e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001542:	882b      	ldrh	r3, [r5, #0]
 8001544:	6822      	ldr	r2, [r4, #0]
 8001546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800154c:	6923      	ldr	r3, [r4, #16]
 800154e:	b943      	cbnz	r3, 8001562 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001550:	3502      	adds	r5, #2
 8001552:	e7d4      	b.n	80014fe <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001554:	f7ff ff58 	bl	8001408 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001558:	2800      	cmp	r0, #0
 800155a:	d1ef      	bne.n	800153c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	782a      	ldrb	r2, [r5, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	3501      	adds	r5, #1
 8001564:	e7cb      	b.n	80014fe <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001566:	2001      	movs	r0, #1
 8001568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800156c:	2002      	movs	r0, #2
}
 800156e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001574 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001576:	3b01      	subs	r3, #1
 8001578:	d101      	bne.n	800157e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800157a:	2003      	movs	r0, #3
 800157c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800157e:	6902      	ldr	r2, [r0, #16]
 8001580:	2a00      	cmp	r2, #0
 8001582:	daf8      	bge.n	8001576 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001584:	6903      	ldr	r3, [r0, #16]
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <USB_CoreReset+0x2c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800158e:	3a01      	subs	r2, #1
 8001590:	d0f3      	beq.n	800157a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001592:	6903      	ldr	r3, [r0, #16]
 8001594:	f013 0301 	ands.w	r3, r3, #1
 8001598:	d1f9      	bne.n	800158e <USB_CoreReset+0x1a>

  return HAL_OK;
 800159a:	4618      	mov	r0, r3
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	00030d41 	.word	0x00030d41

080015a4 <USB_CoreInit>:
{
 80015a4:	b084      	sub	sp, #16
 80015a6:	b538      	push	{r3, r4, r5, lr}
 80015a8:	ad05      	add	r5, sp, #20
 80015aa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015b0:	2b01      	cmp	r3, #1
{
 80015b2:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015b4:	d125      	bne.n	8001602 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80015b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015bc:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80015be:	68c3      	ldr	r3, [r0, #12]
 80015c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80015c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80015ca:	68c3      	ldr	r3, [r0, #12]
 80015cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015d0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80015d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015d4:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80015d6:	bf02      	ittt	eq
 80015d8:	68c3      	ldreq	r3, [r0, #12]
 80015da:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80015de:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80015e0:	f7ff ffc8 	bl	8001574 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80015e4:	9b08      	ldr	r3, [sp, #32]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80015ea:	68a3      	ldr	r3, [r4, #8]
 80015ec:	f043 0306 	orr.w	r3, r3, #6
 80015f0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80015f2:	68a3      	ldr	r3, [r4, #8]
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	60a3      	str	r3, [r4, #8]
}
 80015fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015fe:	b004      	add	sp, #16
 8001600:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001602:	68c3      	ldr	r3, [r0, #12]
 8001604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001608:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800160a:	f7ff ffb3 	bl	8001574 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800160e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001610:	b923      	cbnz	r3, 800161c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001618:	63a3      	str	r3, [r4, #56]	; 0x38
 800161a:	e7e3      	b.n	80015e4 <USB_CoreInit+0x40>
 800161c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	e7f9      	b.n	8001618 <USB_CoreInit+0x74>

08001624 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001624:	6883      	ldr	r3, [r0, #8]
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6083      	str	r3, [r0, #8]
}
 800162c:	2000      	movs	r0, #0
 800162e:	4770      	bx	lr

08001630 <USB_SetCurrentMode>:
{
 8001630:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001632:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001634:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001636:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800163a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800163c:	d108      	bne.n	8001650 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800163e:	68c3      	ldr	r3, [r0, #12]
 8001640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001644:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001646:	2032      	movs	r0, #50	; 0x32
 8001648:	f7ff f802 	bl	8000650 <HAL_Delay>
  return HAL_OK;
 800164c:	2000      	movs	r0, #0
 800164e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001650:	b919      	cbnz	r1, 800165a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001652:	68c3      	ldr	r3, [r0, #12]
 8001654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001658:	e7f4      	b.n	8001644 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
}
 800165c:	bd08      	pop	{r3, pc}
	...

08001660 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001660:	0189      	lsls	r1, r1, #6
 8001662:	f041 0120 	orr.w	r1, r1, #32
 8001666:	4a06      	ldr	r2, [pc, #24]	; (8001680 <USB_FlushTxFifo+0x20>)
 8001668:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800166a:	3a01      	subs	r2, #1
 800166c:	d005      	beq.n	800167a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800166e:	6903      	ldr	r3, [r0, #16]
 8001670:	f013 0320 	ands.w	r3, r3, #32
 8001674:	d1f9      	bne.n	800166a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001676:	4618      	mov	r0, r3
 8001678:	4770      	bx	lr
      return HAL_TIMEOUT;
 800167a:	2003      	movs	r0, #3
}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	00030d41 	.word	0x00030d41

08001684 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001684:	2310      	movs	r3, #16
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <USB_FlushRxFifo+0x1c>)
 8001688:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800168a:	3a01      	subs	r2, #1
 800168c:	d005      	beq.n	800169a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800168e:	6903      	ldr	r3, [r0, #16]
 8001690:	f013 0310 	ands.w	r3, r3, #16
 8001694:	d1f9      	bne.n	800168a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001696:	4618      	mov	r0, r3
 8001698:	4770      	bx	lr
      return HAL_TIMEOUT;
 800169a:	2003      	movs	r0, #3
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	00030d41 	.word	0x00030d41

080016a4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80016a4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80016a8:	4319      	orrs	r1, r3
 80016aa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80016ae:	2000      	movs	r0, #0
 80016b0:	4770      	bx	lr
	...

080016b4 <USB_DevInit>:
{
 80016b4:	b084      	sub	sp, #16
 80016b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016ba:	4604      	mov	r4, r0
 80016bc:	a809      	add	r0, sp, #36	; 0x24
 80016be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80016c6:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 80016c8:	4619      	mov	r1, r3
 80016ca:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80016ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80016d2:	3301      	adds	r3, #1
 80016d4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80016d6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80016d8:	d1f7      	bne.n	80016ca <USB_DevInit+0x16>
 80016da:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80016de:	2d00      	cmp	r5, #0
 80016e0:	d16c      	bne.n	80017bc <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80016e2:	6873      	ldr	r3, [r6, #4]
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6073      	str	r3, [r6, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80016ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80016f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016f4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80016f8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80016fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001700:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001708:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800170c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001712:	2b01      	cmp	r3, #1
 8001714:	d15c      	bne.n	80017d0 <USB_DevInit+0x11c>
    if (cfg.speed == USBD_HS_SPEED)
 8001716:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001718:	2900      	cmp	r1, #0
 800171a:	d157      	bne.n	80017cc <USB_DevInit+0x118>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff ffc1 	bl	80016a4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001722:	2110      	movs	r1, #16
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff ff9b 	bl	8001660 <USB_FlushTxFifo>
 800172a:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff ffa9 	bl	8001684 <USB_FlushRxFifo>
 8001732:	2800      	cmp	r0, #0
 8001734:	d14e      	bne.n	80017d4 <USB_DevInit+0x120>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001736:	1c08      	adds	r0, r1, #0
 8001738:	bf18      	it	ne
 800173a:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	6133      	str	r3, [r6, #16]
 8001740:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001744:	6173      	str	r3, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001746:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8001748:	61f3      	str	r3, [r6, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800174a:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800174e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001752:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001756:	42bb      	cmp	r3, r7
 8001758:	d13e      	bne.n	80017d8 <USB_DevInit+0x124>
 800175a:	2100      	movs	r1, #0
 800175c:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001760:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001762:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001766:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800176a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800176e:	428b      	cmp	r3, r1
 8001770:	d145      	bne.n	80017fe <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001772:	6933      	ldr	r3, [r6, #16]
 8001774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001778:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800177e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001782:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001786:	b91b      	cbnz	r3, 8001790 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001788:	69a3      	ldr	r3, [r4, #24]
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001790:	69a2      	ldr	r2, [r4, #24]
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <USB_DevInit+0x170>)
 8001794:	4313      	orrs	r3, r2
 8001796:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8001798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800179a:	b11b      	cbz	r3, 80017a4 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800179c:	69a3      	ldr	r3, [r4, #24]
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80017a4:	2d01      	cmp	r5, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80017a6:	bf01      	itttt	eq
 80017a8:	69a3      	ldreq	r3, [r4, #24]
 80017aa:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80017ae:	f043 0304 	orreq.w	r3, r3, #4
 80017b2:	61a3      	streq	r3, [r4, #24]
}
 80017b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017b8:	b004      	add	sp, #16
 80017ba:	4770      	bx	lr
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80017bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017c2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80017c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017ca:	e799      	b.n	8001700 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80017cc:	4619      	mov	r1, r3
 80017ce:	e7a5      	b.n	800171c <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80017d0:	2103      	movs	r1, #3
 80017d2:	e7a3      	b.n	800171c <USB_DevInit+0x68>
 80017d4:	2001      	movs	r0, #1
 80017d6:	e7b1      	b.n	800173c <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80017d8:	f8d2 9000 	ldr.w	r9, [r2]
 80017dc:	f1b9 0f00 	cmp.w	r9, #0
 80017e0:	da0b      	bge.n	80017fa <USB_DevInit+0x146>
      if (i == 0U)
 80017e2:	b93b      	cbnz	r3, 80017f4 <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80017e4:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80017e8:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80017ea:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80017ec:	f8c2 8008 	str.w	r8, [r2, #8]
 80017f0:	3220      	adds	r2, #32
 80017f2:	e7b0      	b.n	8001756 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80017f4:	f8c2 e000 	str.w	lr, [r2]
 80017f8:	e7f6      	b.n	80017e8 <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 80017fa:	6011      	str	r1, [r2, #0]
 80017fc:	e7f4      	b.n	80017e8 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80017fe:	f8d2 9000 	ldr.w	r9, [r2]
 8001802:	f1b9 0f00 	cmp.w	r9, #0
 8001806:	da0b      	bge.n	8001820 <USB_DevInit+0x16c>
      if (i == 0U)
 8001808:	b939      	cbnz	r1, 800181a <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800180a:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800180e:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001810:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001812:	f8c2 8008 	str.w	r8, [r2, #8]
 8001816:	3220      	adds	r2, #32
 8001818:	e7a9      	b.n	800176e <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800181a:	f8c2 e000 	str.w	lr, [r2]
 800181e:	e7f6      	b.n	800180e <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001820:	6017      	str	r7, [r2, #0]
 8001822:	e7f4      	b.n	800180e <USB_DevInit+0x15a>
 8001824:	803c3800 	.word	0x803c3800

08001828 <USB_DevDisconnect>:
{
 8001828:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800182a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001836:	2003      	movs	r0, #3
 8001838:	f7fe ff0a 	bl	8000650 <HAL_Delay>
}
 800183c:	2000      	movs	r0, #0
 800183e:	bd08      	pop	{r3, pc}

08001840 <setLedColor>:
*/
LedControlReturnCode setLedColor(const unsigned int row,
                                 const unsigned int col, 
                                 const unsigned int red, 
                                 const unsigned int green, 
                                 const unsigned int blue) {
 8001840:	b510      	push	{r4, lr}
  if (row > LINE_COUNT || row == 0)
 8001842:	3801      	subs	r0, #1
                                 const unsigned int blue) {
 8001844:	b088      	sub	sp, #32
  if (row > LINE_COUNT || row == 0)
 8001846:	2806      	cmp	r0, #6
                                 const unsigned int blue) {
 8001848:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (row > LINE_COUNT || row == 0)
 800184a:	d81d      	bhi.n	8001888 <setLedColor+0x48>
    return LCRC_ERROR_ROW;

  if (col > COL_COUNT || col == 0)
 800184c:	3901      	subs	r1, #1
 800184e:	2906      	cmp	r1, #6
 8001850:	d81c      	bhi.n	800188c <setLedColor+0x4c>
    return LCRC_ERROR_COL;

  if (red > 255 || green > 255 || blue > 255)
 8001852:	2aff      	cmp	r2, #255	; 0xff
 8001854:	d81c      	bhi.n	8001890 <setLedColor+0x50>
 8001856:	2bff      	cmp	r3, #255	; 0xff
 8001858:	d81a      	bhi.n	8001890 <setLedColor+0x50>
 800185a:	2cff      	cmp	r4, #255	; 0xff
 800185c:	d818      	bhi.n	8001890 <setLedColor+0x50>
    return LCRC_ERROR_RGB_VALUE;

  const unsigned int finalRow = row - 1;
  const unsigned int finalCol = col - 1;
  char message[11];
  sprintf(message, "R%d%d%02x%02x%02x\n", finalRow, finalCol, red, green, blue);
 800185e:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8001862:	460b      	mov	r3, r1
 8001864:	4602      	mov	r2, r0
 8001866:	490b      	ldr	r1, [pc, #44]	; (8001894 <setLedColor+0x54>)
 8001868:	a805      	add	r0, sp, #20
 800186a:	f001 fc83 	bl	8003174 <siprintf>
  HAL_UART_Transmit(&huart3,(uint8_t *) message, strlen(message), 0xFFFF);
 800186e:	a805      	add	r0, sp, #20
 8001870:	f7fe fcbe 	bl	80001f0 <strlen>
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	b282      	uxth	r2, r0
 800187a:	a905      	add	r1, sp, #20
 800187c:	4806      	ldr	r0, [pc, #24]	; (8001898 <setLedColor+0x58>)
 800187e:	f7ff fe19 	bl	80014b4 <HAL_UART_Transmit>
  if (LC_CLOSE(fd) != 0)
    return LCRC_ERROR_SERIAL_CLOSE;
 */


  return LCRC_OK;
 8001882:	2000      	movs	r0, #0
}
 8001884:	b008      	add	sp, #32
 8001886:	bd10      	pop	{r4, pc}
    return LCRC_ERROR_ROW;
 8001888:	2005      	movs	r0, #5
 800188a:	e7fb      	b.n	8001884 <setLedColor+0x44>
    return LCRC_ERROR_COL;
 800188c:	2004      	movs	r0, #4
 800188e:	e7f9      	b.n	8001884 <setLedColor+0x44>
    return LCRC_ERROR_RGB_VALUE;
 8001890:	2006      	movs	r0, #6
 8001892:	e7f7      	b.n	8001884 <setLedColor+0x44>
 8001894:	080039c8 	.word	0x080039c8
 8001898:	2000009c 	.word	0x2000009c

0800189c <SetLedLine>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetLedLine(RGB **TabLine, int TabSize) {
 800189c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018a0:	4680      	mov	r8, r0
 80018a2:	460f      	mov	r7, r1
	for (int line = 0; line < TabSize; line++) {
 80018a4:	2500      	movs	r5, #0
		for (int col = 0; col < TabSize; col++) {
			setLedColor(line +1, col +1, TabLine[line][col].RValue, TabLine[line][col].GValue, TabLine[line][col].BValue);
 80018a6:	f04f 090c 	mov.w	r9, #12
	for (int line = 0; line < TabSize; line++) {
 80018aa:	42bd      	cmp	r5, r7
 80018ac:	da15      	bge.n	80018da <SetLedLine+0x3e>
 80018ae:	2400      	movs	r4, #0
 80018b0:	1c6e      	adds	r6, r5, #1
 80018b2:	e00e      	b.n	80018d2 <SetLedLine+0x36>
			setLedColor(line +1, col +1, TabLine[line][col].RValue, TabLine[line][col].GValue, TabLine[line][col].BValue);
 80018b4:	3401      	adds	r4, #1
 80018b6:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 80018ba:	fb09 f204 	mul.w	r2, r9, r4
 80018be:	3a0c      	subs	r2, #12
 80018c0:	188b      	adds	r3, r1, r2
 80018c2:	6898      	ldr	r0, [r3, #8]
 80018c4:	9000      	str	r0, [sp, #0]
 80018c6:	588a      	ldr	r2, [r1, r2]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4621      	mov	r1, r4
 80018cc:	4630      	mov	r0, r6
 80018ce:	f7ff ffb7 	bl	8001840 <setLedColor>
		for (int col = 0; col < TabSize; col++) {
 80018d2:	42bc      	cmp	r4, r7
 80018d4:	d1ee      	bne.n	80018b4 <SetLedLine+0x18>
	for (int line = 0; line < TabSize; line++) {
 80018d6:	4635      	mov	r5, r6
 80018d8:	e7e7      	b.n	80018aa <SetLedLine+0xe>
		}
	}
}
 80018da:	b003      	add	sp, #12
 80018dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080018e0 <SetLedOneColor>:

void SetLedOneColor(int Line, RGB Color, int SizeLine) {
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	4606      	mov	r6, r0
 80018e6:	a806      	add	r0, sp, #24
 80018e8:	e900 000e 	stmdb	r0, {r1, r2, r3}
 80018ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	for (int col = 0; col < SizeLine; col++) {
 80018ee:	2400      	movs	r4, #0
 80018f0:	42ac      	cmp	r4, r5
 80018f2:	db01      	blt.n	80018f8 <SetLedOneColor+0x18>
		setLedColor(Line , col +1, Color.RValue, Color.GValue, (Color.BValue));
	}
}
 80018f4:	b006      	add	sp, #24
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
		setLedColor(Line , col +1, Color.RValue, Color.GValue, (Color.BValue));
 80018f8:	9b05      	ldr	r3, [sp, #20]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	3401      	adds	r4, #1
 80018fe:	9b04      	ldr	r3, [sp, #16]
 8001900:	9a03      	ldr	r2, [sp, #12]
 8001902:	4621      	mov	r1, r4
 8001904:	4630      	mov	r0, r6
 8001906:	f7ff ff9b 	bl	8001840 <setLedColor>
 800190a:	e7f1      	b.n	80018f0 <SetLedOneColor+0x10>

0800190c <ResetAllBlack>:

void ResetAllBlack() {
 800190c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int Sizeline = 7;
	SetLedOneColor(1, Black, Sizeline);
 800190e:	4c17      	ldr	r4, [pc, #92]	; (800196c <ResetAllBlack+0x60>)
 8001910:	2507      	movs	r5, #7
 8001912:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001916:	9500      	str	r5, [sp, #0]
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff ffe1 	bl	80018e0 <SetLedOneColor>
	SetLedOneColor(2, Black, Sizeline);
 800191e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001922:	9500      	str	r5, [sp, #0]
 8001924:	2002      	movs	r0, #2
 8001926:	f7ff ffdb 	bl	80018e0 <SetLedOneColor>
	SetLedOneColor(3, Black, Sizeline);
 800192a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800192e:	9500      	str	r5, [sp, #0]
 8001930:	2003      	movs	r0, #3
 8001932:	f7ff ffd5 	bl	80018e0 <SetLedOneColor>
	SetLedOneColor(4, Black, Sizeline);
 8001936:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800193a:	9500      	str	r5, [sp, #0]
 800193c:	2004      	movs	r0, #4
 800193e:	f7ff ffcf 	bl	80018e0 <SetLedOneColor>
	SetLedOneColor(5, Black, Sizeline);
 8001942:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001946:	9500      	str	r5, [sp, #0]
 8001948:	2005      	movs	r0, #5
 800194a:	f7ff ffc9 	bl	80018e0 <SetLedOneColor>
	SetLedOneColor(6, Black, Sizeline);
 800194e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001952:	9500      	str	r5, [sp, #0]
 8001954:	2006      	movs	r0, #6
 8001956:	f7ff ffc3 	bl	80018e0 <SetLedOneColor>
	SetLedOneColor(7, Black, Sizeline);
 800195a:	9500      	str	r5, [sp, #0]
 800195c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001960:	4628      	mov	r0, r5
 8001962:	f7ff ffbd 	bl	80018e0 <SetLedOneColor>
}
 8001966:	b003      	add	sp, #12
 8001968:	bd30      	pop	{r4, r5, pc}
 800196a:	bf00      	nop
 800196c:	080039dc 	.word	0x080039dc

08001970 <compteur>:

void compteur(int TabSize) {
 8001970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
			SetLedLine(matrice, TabSize);
		}
		if (compteur == 0) {
			RGB bckgrd = Black;
			RGB number = White;
 8001974:	4d57      	ldr	r5, [pc, #348]	; (8001ad4 <compteur+0x164>)
void compteur(int TabSize) {
 8001976:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800197a:	4606      	mov	r6, r0
	for (int compteur = 13; compteur >= 0; compteur--) {
 800197c:	240d      	movs	r4, #13
		if (compteur == 13) {
 800197e:	2c0d      	cmp	r4, #13
 8001980:	f040 80aa 	bne.w	8001ad8 <compteur+0x168>
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001984:	af0b      	add	r7, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001986:	a820      	add	r0, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001988:	a935      	add	r1, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, number,bckgrd };
 800198a:	aa4a      	add	r2, sp, #296	; 0x128
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 800198c:	2300      	movs	r3, #0
 800198e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	f8c7 c018 	str.w	ip, [r7, #24]
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	623b      	str	r3, [r7, #32]
 80019a6:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ae:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b8:	643b      	str	r3, [r7, #64]	; 0x40
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c0:	653b      	str	r3, [r7, #80]	; 0x50
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80019c2:	6003      	str	r3, [r0, #0]
 80019c4:	6043      	str	r3, [r0, #4]
 80019c6:	6083      	str	r3, [r0, #8]
 80019c8:	f8c0 c00c 	str.w	ip, [r0, #12]
 80019cc:	6103      	str	r3, [r0, #16]
 80019ce:	6143      	str	r3, [r0, #20]
 80019d0:	6183      	str	r3, [r0, #24]
 80019d2:	61c3      	str	r3, [r0, #28]
 80019d4:	6203      	str	r3, [r0, #32]
 80019d6:	6243      	str	r3, [r0, #36]	; 0x24
 80019d8:	6283      	str	r3, [r0, #40]	; 0x28
 80019da:	62c3      	str	r3, [r0, #44]	; 0x2c
 80019dc:	6303      	str	r3, [r0, #48]	; 0x30
 80019de:	6343      	str	r3, [r0, #52]	; 0x34
 80019e0:	6383      	str	r3, [r0, #56]	; 0x38
 80019e2:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
 80019e6:	6403      	str	r3, [r0, #64]	; 0x40
 80019e8:	6443      	str	r3, [r0, #68]	; 0x44
 80019ea:	6483      	str	r3, [r0, #72]	; 0x48
 80019ec:	64c3      	str	r3, [r0, #76]	; 0x4c
 80019ee:	6503      	str	r3, [r0, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80019f0:	600b      	str	r3, [r1, #0]
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	608b      	str	r3, [r1, #8]
 80019f6:	f8c1 c00c 	str.w	ip, [r1, #12]
 80019fa:	610b      	str	r3, [r1, #16]
 80019fc:	614b      	str	r3, [r1, #20]
 80019fe:	618b      	str	r3, [r1, #24]
 8001a00:	61cb      	str	r3, [r1, #28]
 8001a02:	620b      	str	r3, [r1, #32]
 8001a04:	624b      	str	r3, [r1, #36]	; 0x24
 8001a06:	628b      	str	r3, [r1, #40]	; 0x28
 8001a08:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a0a:	630b      	str	r3, [r1, #48]	; 0x30
 8001a0c:	634b      	str	r3, [r1, #52]	; 0x34
 8001a0e:	638b      	str	r3, [r1, #56]	; 0x38
 8001a10:	f8c1 c03c 	str.w	ip, [r1, #60]	; 0x3c
 8001a14:	640b      	str	r3, [r1, #64]	; 0x40
 8001a16:	644b      	str	r3, [r1, #68]	; 0x44
 8001a18:	648b      	str	r3, [r1, #72]	; 0x48
 8001a1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001a1c:	650b      	str	r3, [r1, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, number,bckgrd };
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	6053      	str	r3, [r2, #4]
 8001a22:	6093      	str	r3, [r2, #8]
 8001a24:	60d3      	str	r3, [r2, #12]
 8001a26:	6113      	str	r3, [r2, #16]
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	f8c2 c018 	str.w	ip, [r2, #24]
 8001a2e:	61d3      	str	r3, [r2, #28]
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
 8001a36:	6293      	str	r3, [r2, #40]	; 0x28
 8001a38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a3a:	f8c2 c030 	str.w	ip, [r2, #48]	; 0x30
 8001a3e:	6353      	str	r3, [r2, #52]	; 0x34
 8001a40:	6393      	str	r3, [r2, #56]	; 0x38
 8001a42:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
 8001a46:	6413      	str	r3, [r2, #64]	; 0x40
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	6493      	str	r3, [r2, #72]	; 0x48
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	6513      	str	r3, [r2, #80]	; 0x50
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001a50:	935f      	str	r3, [sp, #380]	; 0x17c
 8001a52:	9360      	str	r3, [sp, #384]	; 0x180
 8001a54:	9361      	str	r3, [sp, #388]	; 0x184
 8001a56:	9362      	str	r3, [sp, #392]	; 0x188
 8001a58:	9363      	str	r3, [sp, #396]	; 0x18c
 8001a5a:	9364      	str	r3, [sp, #400]	; 0x190
 8001a5c:	9365      	str	r3, [sp, #404]	; 0x194
 8001a5e:	9366      	str	r3, [sp, #408]	; 0x198
 8001a60:	9367      	str	r3, [sp, #412]	; 0x19c
 8001a62:	9368      	str	r3, [sp, #416]	; 0x1a0
 8001a64:	9369      	str	r3, [sp, #420]	; 0x1a4
 8001a66:	936a      	str	r3, [sp, #424]	; 0x1a8
 8001a68:	936b      	str	r3, [sp, #428]	; 0x1ac
 8001a6a:	936c      	str	r3, [sp, #432]	; 0x1b0
 8001a6c:	936d      	str	r3, [sp, #436]	; 0x1b4
 8001a6e:	f8cd c1b8 	str.w	ip, [sp, #440]	; 0x1b8
 8001a72:	936f      	str	r3, [sp, #444]	; 0x1bc
 8001a74:	9370      	str	r3, [sp, #448]	; 0x1c0
 8001a76:	9371      	str	r3, [sp, #452]	; 0x1c4
 8001a78:	9372      	str	r3, [sp, #456]	; 0x1c8
 8001a7a:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001a7c:	9374      	str	r3, [sp, #464]	; 0x1d0
 8001a7e:	9375      	str	r3, [sp, #468]	; 0x1d4
 8001a80:	9376      	str	r3, [sp, #472]	; 0x1d8
 8001a82:	9377      	str	r3, [sp, #476]	; 0x1dc
 8001a84:	9378      	str	r3, [sp, #480]	; 0x1e0
 8001a86:	9379      	str	r3, [sp, #484]	; 0x1e4
 8001a88:	937a      	str	r3, [sp, #488]	; 0x1e8
 8001a8a:	937b      	str	r3, [sp, #492]	; 0x1ec
 8001a8c:	937c      	str	r3, [sp, #496]	; 0x1f0
 8001a8e:	937d      	str	r3, [sp, #500]	; 0x1f4
 8001a90:	937e      	str	r3, [sp, #504]	; 0x1f8
 8001a92:	937f      	str	r3, [sp, #508]	; 0x1fc
 8001a94:	9380      	str	r3, [sp, #512]	; 0x200
 8001a96:	9381      	str	r3, [sp, #516]	; 0x204
 8001a98:	9382      	str	r3, [sp, #520]	; 0x208
 8001a9a:	f8cd c20c 	str.w	ip, [sp, #524]	; 0x20c
 8001a9e:	9384      	str	r3, [sp, #528]	; 0x210
 8001aa0:	9385      	str	r3, [sp, #532]	; 0x214
 8001aa2:	9386      	str	r3, [sp, #536]	; 0x218
 8001aa4:	9387      	str	r3, [sp, #540]	; 0x21c
 8001aa6:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001aa8:	9389      	str	r3, [sp, #548]	; 0x224
 8001aaa:	938a      	str	r3, [sp, #552]	; 0x228
 8001aac:	938b      	str	r3, [sp, #556]	; 0x22c
 8001aae:	938c      	str	r3, [sp, #560]	; 0x230
 8001ab0:	938d      	str	r3, [sp, #564]	; 0x234
 8001ab2:	938e      	str	r3, [sp, #568]	; 0x238
 8001ab4:	f8cd c23c 	str.w	ip, [sp, #572]	; 0x23c
 8001ab8:	9390      	str	r3, [sp, #576]	; 0x240
 8001aba:	9391      	str	r3, [sp, #580]	; 0x244
 8001abc:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
 8001ac0:	9393      	str	r3, [sp, #588]	; 0x24c
 8001ac2:	9394      	str	r3, [sp, #592]	; 0x250
 8001ac4:	f8cd c254 	str.w	ip, [sp, #596]	; 0x254
			RGB tabline_7[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001ac8:	9396      	str	r3, [sp, #600]	; 0x258
 8001aca:	9397      	str	r3, [sp, #604]	; 0x25c
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8001acc:	9398      	str	r3, [sp, #608]	; 0x260
 8001ace:	9399      	str	r3, [sp, #612]	; 0x264
 8001ad0:	f000 bcdd 	b.w	800248e <compteur+0xb1e>
 8001ad4:	080039f4 	.word	0x080039f4
		if (compteur == 12) {
 8001ad8:	2c0c      	cmp	r4, #12
 8001ada:	f040 80b9 	bne.w	8001c50 <compteur+0x2e0>
			RGB number = White;
 8001ade:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8001ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001aea:	930c      	str	r3, [sp, #48]	; 0x30
 8001aec:	930d      	str	r3, [sp, #52]	; 0x34
 8001aee:	930e      	str	r3, [sp, #56]	; 0x38
 8001af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8001af2:	9310      	str	r3, [sp, #64]	; 0x40
 8001af4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001af8:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8001afc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001b00:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8001b04:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b08:	f10d 09e0 	add.w	r9, sp, #224	; 0xe0
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b0c:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
			RGB number = White;
 8001b10:	f10d 0e04 	add.w	lr, sp, #4
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001b14:	f50d 7ba0 	add.w	fp, sp, #320	; 0x140
			RGB number = White;
 8001b18:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8001b1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8001b20:	931c      	str	r3, [sp, #112]	; 0x70
 8001b22:	931d      	str	r3, [sp, #116]	; 0x74
 8001b24:	931e      	str	r3, [sp, #120]	; 0x78
 8001b26:	931f      	str	r3, [sp, #124]	; 0x7c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b28:	9320      	str	r3, [sp, #128]	; 0x80
 8001b2a:	9321      	str	r3, [sp, #132]	; 0x84
 8001b2c:	9322      	str	r3, [sp, #136]	; 0x88
 8001b2e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001b32:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b36:	9335      	str	r3, [sp, #212]	; 0xd4
 8001b38:	9336      	str	r3, [sp, #216]	; 0xd8
 8001b3a:	9337      	str	r3, [sp, #220]	; 0xdc
 8001b3c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8001b40:	f50d 7988 	add.w	r9, sp, #272	; 0x110
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b44:	9326      	str	r3, [sp, #152]	; 0x98
 8001b46:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b48:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b4c:	932a      	str	r3, [sp, #168]	; 0xa8
 8001b4e:	932b      	str	r3, [sp, #172]	; 0xac
 8001b50:	932c      	str	r3, [sp, #176]	; 0xb0
 8001b52:	932d      	str	r3, [sp, #180]	; 0xb4
 8001b54:	932e      	str	r3, [sp, #184]	; 0xb8
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b56:	933b      	str	r3, [sp, #236]	; 0xec
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b58:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b5c:	933c      	str	r3, [sp, #240]	; 0xf0
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b5e:	9332      	str	r3, [sp, #200]	; 0xc8
 8001b60:	9333      	str	r3, [sp, #204]	; 0xcc
 8001b62:	9334      	str	r3, [sp, #208]	; 0xd0
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b64:	933d      	str	r3, [sp, #244]	; 0xf4
 8001b66:	933e      	str	r3, [sp, #248]	; 0xf8
 8001b68:	933f      	str	r3, [sp, #252]	; 0xfc
 8001b6a:	9340      	str	r3, [sp, #256]	; 0x100
 8001b6c:	9341      	str	r3, [sp, #260]	; 0x104
 8001b6e:	9342      	str	r3, [sp, #264]	; 0x108
 8001b70:	9343      	str	r3, [sp, #268]	; 0x10c
 8001b72:	e889 0007 	stmia.w	r9, {r0, r1, r2}
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001b76:	934a      	str	r3, [sp, #296]	; 0x128
 8001b78:	934b      	str	r3, [sp, #300]	; 0x12c
 8001b7a:	934c      	str	r3, [sp, #304]	; 0x130
 8001b7c:	934d      	str	r3, [sp, #308]	; 0x134
 8001b7e:	934e      	str	r3, [sp, #312]	; 0x138
 8001b80:	934f      	str	r3, [sp, #316]	; 0x13c
 8001b82:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001b86:	f50d 7ba6 	add.w	fp, sp, #332	; 0x14c
 8001b8a:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001b8e:	f50d 7bac 	add.w	fp, sp, #344	; 0x158
 8001b92:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001b96:	f50d 7bc4 	add.w	fp, sp, #392	; 0x188
 8001b9a:	935f      	str	r3, [sp, #380]	; 0x17c
 8001b9c:	9360      	str	r3, [sp, #384]	; 0x180
 8001b9e:	9361      	str	r3, [sp, #388]	; 0x184
 8001ba0:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001ba4:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001ba8:	9347      	str	r3, [sp, #284]	; 0x11c
 8001baa:	9348      	str	r3, [sp, #288]	; 0x120
 8001bac:	9349      	str	r3, [sp, #292]	; 0x124
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001bae:	9359      	str	r3, [sp, #356]	; 0x164
 8001bb0:	935a      	str	r3, [sp, #360]	; 0x168
 8001bb2:	935b      	str	r3, [sp, #364]	; 0x16c
 8001bb4:	935c      	str	r3, [sp, #368]	; 0x170
 8001bb6:	935d      	str	r3, [sp, #372]	; 0x174
 8001bb8:	935e      	str	r3, [sp, #376]	; 0x178
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001bba:	9365      	str	r3, [sp, #404]	; 0x194
 8001bbc:	9366      	str	r3, [sp, #408]	; 0x198
 8001bbe:	9367      	str	r3, [sp, #412]	; 0x19c
 8001bc0:	9368      	str	r3, [sp, #416]	; 0x1a0
 8001bc2:	9369      	str	r3, [sp, #420]	; 0x1a4
 8001bc4:	936a      	str	r3, [sp, #424]	; 0x1a8
 8001bc6:	936b      	str	r3, [sp, #428]	; 0x1ac
 8001bc8:	936c      	str	r3, [sp, #432]	; 0x1b0
 8001bca:	936d      	str	r3, [sp, #436]	; 0x1b4
 8001bcc:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001bd0:	f50d 7bee 	add.w	fp, sp, #476	; 0x1dc
 8001bd4:	9374      	str	r3, [sp, #464]	; 0x1d0
 8001bd6:	9375      	str	r3, [sp, #468]	; 0x1d4
 8001bd8:	9376      	str	r3, [sp, #472]	; 0x1d8
 8001bda:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001bde:	f50d 7b03 	add.w	fp, sp, #524	; 0x20c
 8001be2:	937a      	str	r3, [sp, #488]	; 0x1e8
 8001be4:	937b      	str	r3, [sp, #492]	; 0x1ec
 8001be6:	937c      	str	r3, [sp, #496]	; 0x1f0
 8001be8:	937d      	str	r3, [sp, #500]	; 0x1f4
 8001bea:	937e      	str	r3, [sp, #504]	; 0x1f8
 8001bec:	937f      	str	r3, [sp, #508]	; 0x1fc
 8001bee:	9380      	str	r3, [sp, #512]	; 0x200
 8001bf0:	9381      	str	r3, [sp, #516]	; 0x204
 8001bf2:	9382      	str	r3, [sp, #520]	; 0x208
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001bf4:	9371      	str	r3, [sp, #452]	; 0x1c4
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001bf6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001bfa:	9372      	str	r3, [sp, #456]	; 0x1c8
 8001bfc:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001bfe:	9386      	str	r3, [sp, #536]	; 0x218
 8001c00:	9387      	str	r3, [sp, #540]	; 0x21c
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001c02:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001c06:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001c08:	f10d 0880 	add.w	r8, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001c0c:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001c10:	af4a      	add	r7, sp, #296	; 0x128
			RGB tabline_7[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001c12:	9389      	str	r3, [sp, #548]	; 0x224
 8001c14:	938a      	str	r3, [sp, #552]	; 0x228
 8001c16:	938b      	str	r3, [sp, #556]	; 0x22c
 8001c18:	938c      	str	r3, [sp, #560]	; 0x230
 8001c1a:	938d      	str	r3, [sp, #564]	; 0x234
 8001c1c:	938e      	str	r3, [sp, #568]	; 0x238
			RGB tabline_7[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8001c1e:	f50d 7b0f 	add.w	fp, sp, #572	; 0x23c
 8001c22:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001c26:	f50d 7b12 	add.w	fp, sp, #584	; 0x248
 8001c2a:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001c2e:	f50d 7b15 	add.w	fp, sp, #596	; 0x254
 8001c32:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001c36:	9398      	str	r3, [sp, #608]	; 0x260
 8001c38:	9399      	str	r3, [sp, #612]	; 0x264
 8001c3a:	939a      	str	r3, [sp, #616]	; 0x268
 8001c3c:	939b      	str	r3, [sp, #620]	; 0x26c
 8001c3e:	939c      	str	r3, [sp, #624]	; 0x270
 8001c40:	939d      	str	r3, [sp, #628]	; 0x274
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8001c42:	f8cd a010 	str.w	sl, [sp, #16]
 8001c46:	f8cd 8014 	str.w	r8, [sp, #20]
 8001c4a:	f8cd c018 	str.w	ip, [sp, #24]
 8001c4e:	e2de      	b.n	800220e <compteur+0x89e>
		if (compteur == 11) {
 8001c50:	2c0b      	cmp	r4, #11
 8001c52:	f040 809e 	bne.w	8001d92 <compteur+0x422>
			RGB tabline_1[7] = { bckgrd, number, number, number, number, number,bckgrd };
 8001c56:	af0b      	add	r7, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001c58:	a820      	add	r0, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001c5a:	a935      	add	r1, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8001c5c:	aa4a      	add	r2, sp, #296	; 0x128
			RGB tabline_1[7] = { bckgrd, number, number, number, number, number,bckgrd };
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	f8c7 c010 	str.w	ip, [r7, #16]
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	f8c7 c01c 	str.w	ip, [r7, #28]
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
 8001c84:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8c:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c96:	653b      	str	r3, [r7, #80]	; 0x50
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001c98:	6003      	str	r3, [r0, #0]
 8001c9a:	6043      	str	r3, [r0, #4]
 8001c9c:	6083      	str	r3, [r0, #8]
 8001c9e:	60c3      	str	r3, [r0, #12]
 8001ca0:	6103      	str	r3, [r0, #16]
 8001ca2:	6143      	str	r3, [r0, #20]
 8001ca4:	6183      	str	r3, [r0, #24]
 8001ca6:	61c3      	str	r3, [r0, #28]
 8001ca8:	6203      	str	r3, [r0, #32]
 8001caa:	6243      	str	r3, [r0, #36]	; 0x24
 8001cac:	6283      	str	r3, [r0, #40]	; 0x28
 8001cae:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001cb0:	6303      	str	r3, [r0, #48]	; 0x30
 8001cb2:	6343      	str	r3, [r0, #52]	; 0x34
 8001cb4:	6383      	str	r3, [r0, #56]	; 0x38
 8001cb6:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001cb8:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
 8001cbc:	6443      	str	r3, [r0, #68]	; 0x44
 8001cbe:	6483      	str	r3, [r0, #72]	; 0x48
 8001cc0:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001cc2:	6503      	str	r3, [r0, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001cc4:	600b      	str	r3, [r1, #0]
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	608b      	str	r3, [r1, #8]
 8001cca:	60cb      	str	r3, [r1, #12]
 8001ccc:	610b      	str	r3, [r1, #16]
 8001cce:	614b      	str	r3, [r1, #20]
 8001cd0:	618b      	str	r3, [r1, #24]
 8001cd2:	61cb      	str	r3, [r1, #28]
 8001cd4:	620b      	str	r3, [r1, #32]
 8001cd6:	624b      	str	r3, [r1, #36]	; 0x24
 8001cd8:	628b      	str	r3, [r1, #40]	; 0x28
 8001cda:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001cdc:	630b      	str	r3, [r1, #48]	; 0x30
 8001cde:	634b      	str	r3, [r1, #52]	; 0x34
 8001ce0:	638b      	str	r3, [r1, #56]	; 0x38
 8001ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
 8001ce4:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8001ce8:	644b      	str	r3, [r1, #68]	; 0x44
 8001cea:	648b      	str	r3, [r1, #72]	; 0x48
 8001cec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001cee:	650b      	str	r3, [r1, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	6053      	str	r3, [r2, #4]
 8001cf4:	6093      	str	r3, [r2, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
 8001cf8:	6113      	str	r3, [r2, #16]
 8001cfa:	6153      	str	r3, [r2, #20]
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	6253      	str	r3, [r2, #36]	; 0x24
 8001d04:	6293      	str	r3, [r2, #40]	; 0x28
 8001d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
 8001d0e:	6393      	str	r3, [r2, #56]	; 0x38
 8001d10:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	6493      	str	r3, [r2, #72]	; 0x48
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	6513      	str	r3, [r2, #80]	; 0x50
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, number, bckgrd, bckgrd,bckgrd };
 8001d1c:	935f      	str	r3, [sp, #380]	; 0x17c
 8001d1e:	9360      	str	r3, [sp, #384]	; 0x180
 8001d20:	9361      	str	r3, [sp, #388]	; 0x184
 8001d22:	9362      	str	r3, [sp, #392]	; 0x188
 8001d24:	9363      	str	r3, [sp, #396]	; 0x18c
 8001d26:	9364      	str	r3, [sp, #400]	; 0x190
 8001d28:	9365      	str	r3, [sp, #404]	; 0x194
 8001d2a:	9366      	str	r3, [sp, #408]	; 0x198
 8001d2c:	9367      	str	r3, [sp, #412]	; 0x19c
 8001d2e:	9368      	str	r3, [sp, #416]	; 0x1a0
 8001d30:	f8cd c1a4 	str.w	ip, [sp, #420]	; 0x1a4
 8001d34:	936a      	str	r3, [sp, #424]	; 0x1a8
 8001d36:	936b      	str	r3, [sp, #428]	; 0x1ac
 8001d38:	936c      	str	r3, [sp, #432]	; 0x1b0
 8001d3a:	936d      	str	r3, [sp, #436]	; 0x1b4
 8001d3c:	936e      	str	r3, [sp, #440]	; 0x1b8
 8001d3e:	936f      	str	r3, [sp, #444]	; 0x1bc
 8001d40:	9370      	str	r3, [sp, #448]	; 0x1c0
 8001d42:	9371      	str	r3, [sp, #452]	; 0x1c4
 8001d44:	9372      	str	r3, [sp, #456]	; 0x1c8
 8001d46:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, bckgrd, number, bckgrd, bckgrd, bckgrd,bckgrd };
 8001d48:	9374      	str	r3, [sp, #464]	; 0x1d0
 8001d4a:	9375      	str	r3, [sp, #468]	; 0x1d4
 8001d4c:	9376      	str	r3, [sp, #472]	; 0x1d8
 8001d4e:	9377      	str	r3, [sp, #476]	; 0x1dc
 8001d50:	9378      	str	r3, [sp, #480]	; 0x1e0
 8001d52:	9379      	str	r3, [sp, #484]	; 0x1e4
 8001d54:	937a      	str	r3, [sp, #488]	; 0x1e8
 8001d56:	f8cd c1ec 	str.w	ip, [sp, #492]	; 0x1ec
 8001d5a:	937c      	str	r3, [sp, #496]	; 0x1f0
 8001d5c:	937d      	str	r3, [sp, #500]	; 0x1f4
 8001d5e:	937e      	str	r3, [sp, #504]	; 0x1f8
 8001d60:	937f      	str	r3, [sp, #508]	; 0x1fc
 8001d62:	9380      	str	r3, [sp, #512]	; 0x200
 8001d64:	9381      	str	r3, [sp, #516]	; 0x204
 8001d66:	9382      	str	r3, [sp, #520]	; 0x208
 8001d68:	9383      	str	r3, [sp, #524]	; 0x20c
 8001d6a:	9384      	str	r3, [sp, #528]	; 0x210
 8001d6c:	9385      	str	r3, [sp, #532]	; 0x214
 8001d6e:	9386      	str	r3, [sp, #536]	; 0x218
 8001d70:	9387      	str	r3, [sp, #540]	; 0x21c
 8001d72:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001d74:	9389      	str	r3, [sp, #548]	; 0x224
 8001d76:	938a      	str	r3, [sp, #552]	; 0x228
 8001d78:	938b      	str	r3, [sp, #556]	; 0x22c
 8001d7a:	938c      	str	r3, [sp, #560]	; 0x230
 8001d7c:	f8cd c234 	str.w	ip, [sp, #564]	; 0x234
 8001d80:	938e      	str	r3, [sp, #568]	; 0x238
 8001d82:	938f      	str	r3, [sp, #572]	; 0x23c
 8001d84:	9390      	str	r3, [sp, #576]	; 0x240
 8001d86:	9391      	str	r3, [sp, #580]	; 0x244
 8001d88:	9392      	str	r3, [sp, #584]	; 0x248
 8001d8a:	9393      	str	r3, [sp, #588]	; 0x24c
 8001d8c:	9394      	str	r3, [sp, #592]	; 0x250
 8001d8e:	9395      	str	r3, [sp, #596]	; 0x254
 8001d90:	e69a      	b.n	8001ac8 <compteur+0x158>
		if (compteur == 10) {
 8001d92:	2c0a      	cmp	r4, #10
 8001d94:	f040 80a6 	bne.w	8001ee4 <compteur+0x574>
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001d98:	af0b      	add	r7, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001d9a:	a820      	add	r0, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001d9c:	a935      	add	r1, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8001d9e:	aa4a      	add	r2, sp, #296	; 0x128
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001da0:	2300      	movs	r3, #0
 8001da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	f8c7 c020 	str.w	ip, [r7, #32]
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbe:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc6:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd4:	653b      	str	r3, [r7, #80]	; 0x50
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001dd6:	6003      	str	r3, [r0, #0]
 8001dd8:	6043      	str	r3, [r0, #4]
 8001dda:	6083      	str	r3, [r0, #8]
 8001ddc:	60c3      	str	r3, [r0, #12]
 8001dde:	6103      	str	r3, [r0, #16]
 8001de0:	f8c0 c014 	str.w	ip, [r0, #20]
 8001de4:	6183      	str	r3, [r0, #24]
 8001de6:	61c3      	str	r3, [r0, #28]
 8001de8:	6203      	str	r3, [r0, #32]
 8001dea:	6243      	str	r3, [r0, #36]	; 0x24
 8001dec:	6283      	str	r3, [r0, #40]	; 0x28
 8001dee:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001df0:	6303      	str	r3, [r0, #48]	; 0x30
 8001df2:	6343      	str	r3, [r0, #52]	; 0x34
 8001df4:	6383      	str	r3, [r0, #56]	; 0x38
 8001df6:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001df8:	6403      	str	r3, [r0, #64]	; 0x40
 8001dfa:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
 8001dfe:	6483      	str	r3, [r0, #72]	; 0x48
 8001e00:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001e02:	6503      	str	r3, [r0, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001e04:	600b      	str	r3, [r1, #0]
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	608b      	str	r3, [r1, #8]
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	610b      	str	r3, [r1, #16]
 8001e0e:	f8c1 c014 	str.w	ip, [r1, #20]
 8001e12:	618b      	str	r3, [r1, #24]
 8001e14:	61cb      	str	r3, [r1, #28]
 8001e16:	620b      	str	r3, [r1, #32]
 8001e18:	624b      	str	r3, [r1, #36]	; 0x24
 8001e1a:	628b      	str	r3, [r1, #40]	; 0x28
 8001e1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001e1e:	630b      	str	r3, [r1, #48]	; 0x30
 8001e20:	634b      	str	r3, [r1, #52]	; 0x34
 8001e22:	638b      	str	r3, [r1, #56]	; 0x38
 8001e24:	63cb      	str	r3, [r1, #60]	; 0x3c
 8001e26:	640b      	str	r3, [r1, #64]	; 0x40
 8001e28:	644b      	str	r3, [r1, #68]	; 0x44
 8001e2a:	648b      	str	r3, [r1, #72]	; 0x48
 8001e2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001e2e:	650b      	str	r3, [r1, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	6053      	str	r3, [r2, #4]
 8001e34:	6093      	str	r3, [r2, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
 8001e38:	6113      	str	r3, [r2, #16]
 8001e3a:	f8c2 c014 	str.w	ip, [r2, #20]
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	f8c2 c020 	str.w	ip, [r2, #32]
 8001e46:	6253      	str	r3, [r2, #36]	; 0x24
 8001e48:	6293      	str	r3, [r2, #40]	; 0x28
 8001e4a:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	6353      	str	r3, [r2, #52]	; 0x34
 8001e52:	f8c2 c038 	str.w	ip, [r2, #56]	; 0x38
 8001e56:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5c:	6493      	str	r3, [r2, #72]	; 0x48
 8001e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e60:	6513      	str	r3, [r2, #80]	; 0x50
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001e62:	935f      	str	r3, [sp, #380]	; 0x17c
 8001e64:	9360      	str	r3, [sp, #384]	; 0x180
 8001e66:	9361      	str	r3, [sp, #388]	; 0x184
 8001e68:	9362      	str	r3, [sp, #392]	; 0x188
 8001e6a:	9363      	str	r3, [sp, #396]	; 0x18c
 8001e6c:	f8cd c190 	str.w	ip, [sp, #400]	; 0x190
 8001e70:	9365      	str	r3, [sp, #404]	; 0x194
 8001e72:	9366      	str	r3, [sp, #408]	; 0x198
 8001e74:	9367      	str	r3, [sp, #412]	; 0x19c
 8001e76:	9368      	str	r3, [sp, #416]	; 0x1a0
 8001e78:	9369      	str	r3, [sp, #420]	; 0x1a4
 8001e7a:	936a      	str	r3, [sp, #424]	; 0x1a8
 8001e7c:	936b      	str	r3, [sp, #428]	; 0x1ac
 8001e7e:	936c      	str	r3, [sp, #432]	; 0x1b0
 8001e80:	936d      	str	r3, [sp, #436]	; 0x1b4
 8001e82:	936e      	str	r3, [sp, #440]	; 0x1b8
 8001e84:	936f      	str	r3, [sp, #444]	; 0x1bc
 8001e86:	f8cd c1c0 	str.w	ip, [sp, #448]	; 0x1c0
 8001e8a:	9371      	str	r3, [sp, #452]	; 0x1c4
 8001e8c:	9372      	str	r3, [sp, #456]	; 0x1c8
 8001e8e:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8001e90:	9374      	str	r3, [sp, #464]	; 0x1d0
 8001e92:	9375      	str	r3, [sp, #468]	; 0x1d4
 8001e94:	9376      	str	r3, [sp, #472]	; 0x1d8
 8001e96:	9377      	str	r3, [sp, #476]	; 0x1dc
 8001e98:	9378      	str	r3, [sp, #480]	; 0x1e0
 8001e9a:	f8cd c1e4 	str.w	ip, [sp, #484]	; 0x1e4
 8001e9e:	937a      	str	r3, [sp, #488]	; 0x1e8
 8001ea0:	937b      	str	r3, [sp, #492]	; 0x1ec
 8001ea2:	937c      	str	r3, [sp, #496]	; 0x1f0
 8001ea4:	937d      	str	r3, [sp, #500]	; 0x1f4
 8001ea6:	937e      	str	r3, [sp, #504]	; 0x1f8
 8001ea8:	937f      	str	r3, [sp, #508]	; 0x1fc
 8001eaa:	9380      	str	r3, [sp, #512]	; 0x200
 8001eac:	9381      	str	r3, [sp, #516]	; 0x204
 8001eae:	9382      	str	r3, [sp, #520]	; 0x208
 8001eb0:	9383      	str	r3, [sp, #524]	; 0x20c
 8001eb2:	9384      	str	r3, [sp, #528]	; 0x210
 8001eb4:	f8cd c214 	str.w	ip, [sp, #532]	; 0x214
 8001eb8:	9386      	str	r3, [sp, #536]	; 0x218
 8001eba:	9387      	str	r3, [sp, #540]	; 0x21c
 8001ebc:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001ebe:	9389      	str	r3, [sp, #548]	; 0x224
 8001ec0:	938a      	str	r3, [sp, #552]	; 0x228
 8001ec2:	938b      	str	r3, [sp, #556]	; 0x22c
 8001ec4:	938c      	str	r3, [sp, #560]	; 0x230
 8001ec6:	938d      	str	r3, [sp, #564]	; 0x234
 8001ec8:	938e      	str	r3, [sp, #568]	; 0x238
 8001eca:	938f      	str	r3, [sp, #572]	; 0x23c
 8001ecc:	9390      	str	r3, [sp, #576]	; 0x240
 8001ece:	f8cd c244 	str.w	ip, [sp, #580]	; 0x244
 8001ed2:	9392      	str	r3, [sp, #584]	; 0x248
 8001ed4:	9393      	str	r3, [sp, #588]	; 0x24c
 8001ed6:	f8cd c250 	str.w	ip, [sp, #592]	; 0x250
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8001eda:	9395      	str	r3, [sp, #596]	; 0x254
 8001edc:	9396      	str	r3, [sp, #600]	; 0x258
 8001ede:	f8cd c25c 	str.w	ip, [sp, #604]	; 0x25c
 8001ee2:	e5f3      	b.n	8001acc <compteur+0x15c>
		if (compteur == 9) {
 8001ee4:	2c09      	cmp	r4, #9
 8001ee6:	f040 80c9 	bne.w	800207c <compteur+0x70c>
			RGB number = Yellow;
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <compteur+0x708>)
 8001eec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, number,bckgrd };
 8001ef0:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8001efa:	930d      	str	r3, [sp, #52]	; 0x34
 8001efc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001f00:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8001f04:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001f08:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8001f0c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001f10:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f14:	f10d 0880 	add.w	r8, sp, #128	; 0x80
			RGB tabline_1[7] = { bckgrd, number, number, number, number, number,bckgrd };
 8001f18:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001f1c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8001f20:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB number = Yellow;
 8001f24:	f10d 0e04 	add.w	lr, sp, #4
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f28:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
			RGB number = Yellow;
 8001f2c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, number,bckgrd };
 8001f30:	931d      	str	r3, [sp, #116]	; 0x74
 8001f32:	931e      	str	r3, [sp, #120]	; 0x78
 8001f34:	931f      	str	r3, [sp, #124]	; 0x7c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f36:	f8c8 3000 	str.w	r3, [r8]
 8001f3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8001f3e:	f8c8 3008 	str.w	r3, [r8, #8]
 8001f42:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f46:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
 8001f4a:	f10d 09e0 	add.w	r9, sp, #224	; 0xe0
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8001f4e:	f50d 7b9a 	add.w	fp, sp, #308	; 0x134
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f52:	f8cc 3000 	str.w	r3, [ip]
 8001f56:	f8cc 3004 	str.w	r3, [ip, #4]
 8001f5a:	f8cc 3008 	str.w	r3, [ip, #8]
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f5e:	f8c8 3018 	str.w	r3, [r8, #24]
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f62:	e889 0007 	stmia.w	r9, {r0, r1, r2}
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f66:	f8c8 301c 	str.w	r3, [r8, #28]
 8001f6a:	f8c8 3020 	str.w	r3, [r8, #32]
 8001f6e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8001f72:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8001f76:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8001f7a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8001f7e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8001f82:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8001f86:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8001f8a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8001f8e:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8001f92:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8001f96:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8001f9a:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001f9e:	f8cc 3018 	str.w	r3, [ip, #24]
 8001fa2:	f8cc 301c 	str.w	r3, [ip, #28]
 8001fa6:	f8cc 3020 	str.w	r3, [ip, #32]
 8001faa:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
 8001fae:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
 8001fb2:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
 8001fb6:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 8001fba:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
 8001fbe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8001fc2:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
 8001fc6:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
 8001fca:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8001fce:	934a      	str	r3, [sp, #296]	; 0x128
 8001fd0:	934b      	str	r3, [sp, #300]	; 0x12c
 8001fd2:	934c      	str	r3, [sp, #304]	; 0x130
 8001fd4:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, number,bckgrd };
 8001fd8:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8001fdc:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8001fe0:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
 8001fe4:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8001fe8:	af4a      	add	r7, sp, #296	; 0x128
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8001fea:	f50d 7ba0 	add.w	fp, sp, #320	; 0x140
 8001fee:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001ff2:	f50d 7ba6 	add.w	fp, sp, #332	; 0x14c
 8001ff6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001ffa:	f50d 7bac 	add.w	fp, sp, #344	; 0x158
 8001ffe:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002002:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8002006:	9359      	str	r3, [sp, #356]	; 0x164
 8002008:	935a      	str	r3, [sp, #360]	; 0x168
 800200a:	935b      	str	r3, [sp, #364]	; 0x16c
 800200c:	935c      	str	r3, [sp, #368]	; 0x170
 800200e:	935d      	str	r3, [sp, #372]	; 0x174
 8002010:	935e      	str	r3, [sp, #376]	; 0x178
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002012:	935f      	str	r3, [sp, #380]	; 0x17c
 8002014:	9360      	str	r3, [sp, #384]	; 0x180
 8002016:	9361      	str	r3, [sp, #388]	; 0x184
 8002018:	9362      	str	r3, [sp, #392]	; 0x188
 800201a:	9363      	str	r3, [sp, #396]	; 0x18c
 800201c:	9364      	str	r3, [sp, #400]	; 0x190
 800201e:	9365      	str	r3, [sp, #404]	; 0x194
 8002020:	9366      	str	r3, [sp, #408]	; 0x198
 8002022:	9367      	str	r3, [sp, #412]	; 0x19c
 8002024:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002026:	9369      	str	r3, [sp, #420]	; 0x1a4
 8002028:	936a      	str	r3, [sp, #424]	; 0x1a8
 800202a:	936b      	str	r3, [sp, #428]	; 0x1ac
 800202c:	936c      	str	r3, [sp, #432]	; 0x1b0
 800202e:	936d      	str	r3, [sp, #436]	; 0x1b4
 8002030:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002034:	f50d 7b03 	add.w	fp, sp, #524	; 0x20c
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002038:	9371      	str	r3, [sp, #452]	; 0x1c4
 800203a:	9372      	str	r3, [sp, #456]	; 0x1c8
 800203c:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800203e:	9374      	str	r3, [sp, #464]	; 0x1d0
 8002040:	9375      	str	r3, [sp, #468]	; 0x1d4
 8002042:	9376      	str	r3, [sp, #472]	; 0x1d8
 8002044:	9377      	str	r3, [sp, #476]	; 0x1dc
 8002046:	9378      	str	r3, [sp, #480]	; 0x1e0
 8002048:	9379      	str	r3, [sp, #484]	; 0x1e4
 800204a:	937a      	str	r3, [sp, #488]	; 0x1e8
 800204c:	937b      	str	r3, [sp, #492]	; 0x1ec
 800204e:	937c      	str	r3, [sp, #496]	; 0x1f0
 8002050:	937d      	str	r3, [sp, #500]	; 0x1f4
 8002052:	937e      	str	r3, [sp, #504]	; 0x1f8
 8002054:	937f      	str	r3, [sp, #508]	; 0x1fc
 8002056:	9380      	str	r3, [sp, #512]	; 0x200
 8002058:	9381      	str	r3, [sp, #516]	; 0x204
 800205a:	9382      	str	r3, [sp, #520]	; 0x208
 800205c:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_7[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002060:	f50d 7b0c 	add.w	fp, sp, #560	; 0x230
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002064:	9386      	str	r3, [sp, #536]	; 0x218
 8002066:	9387      	str	r3, [sp, #540]	; 0x21c
 8002068:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 800206a:	9389      	str	r3, [sp, #548]	; 0x224
 800206c:	938a      	str	r3, [sp, #552]	; 0x228
 800206e:	938b      	str	r3, [sp, #556]	; 0x22c
 8002070:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002074:	e5d3      	b.n	8001c1e <compteur+0x2ae>
 8002076:	bf00      	nop
 8002078:	08003a00 	.word	0x08003a00
		if (compteur == 8) {
 800207c:	2c08      	cmp	r4, #8
 800207e:	f040 80db 	bne.w	8002238 <compteur+0x8c8>
			RGB number = Purple;
 8002082:	4bad      	ldr	r3, [pc, #692]	; (8002338 <compteur+0x9c8>)
 8002084:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8002088:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800208c:	2300      	movs	r3, #0
 800208e:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8002092:	f8cc 3000 	str.w	r3, [ip]
 8002096:	f8cc 3004 	str.w	r3, [ip, #4]
 800209a:	f8cc 3008 	str.w	r3, [ip, #8]
 800209e:	f8cc 300c 	str.w	r3, [ip, #12]
 80020a2:	f8cc 3010 	str.w	r3, [ip, #16]
 80020a6:	f8cc 3014 	str.w	r3, [ip, #20]
 80020aa:	f8cc 3018 	str.w	r3, [ip, #24]
 80020ae:	f8cc 301c 	str.w	r3, [ip, #28]
 80020b2:	f8cc 3020 	str.w	r3, [ip, #32]
 80020b6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
 80020ba:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
 80020be:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 80020c2:	f10d 0aec 	add.w	sl, sp, #236	; 0xec
			RGB tabline_1[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80020c6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
			RGB number = Purple;
 80020ca:	f10d 0e04 	add.w	lr, sp, #4
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 80020ce:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 80020d2:	f50d 7b9a 	add.w	fp, sp, #308	; 0x134
			RGB number = Purple;
 80020d6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80020da:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
 80020de:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
 80020e2:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 80020e6:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80020ea:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
 80020ee:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 80020f2:	9320      	str	r3, [sp, #128]	; 0x80
 80020f4:	9321      	str	r3, [sp, #132]	; 0x84
 80020f6:	9322      	str	r3, [sp, #136]	; 0x88
 80020f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80020fa:	9324      	str	r3, [sp, #144]	; 0x90
 80020fc:	9325      	str	r3, [sp, #148]	; 0x94
 80020fe:	9326      	str	r3, [sp, #152]	; 0x98
 8002100:	9327      	str	r3, [sp, #156]	; 0x9c
 8002102:	9328      	str	r3, [sp, #160]	; 0xa0
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 8002104:	9335      	str	r3, [sp, #212]	; 0xd4
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 8002106:	e888 0007 	stmia.w	r8, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 800210a:	9336      	str	r3, [sp, #216]	; 0xd8
 800210c:	9337      	str	r3, [sp, #220]	; 0xdc
 800210e:	9338      	str	r3, [sp, #224]	; 0xe0
 8002110:	9339      	str	r3, [sp, #228]	; 0xe4
 8002112:	933a      	str	r3, [sp, #232]	; 0xe8
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 8002114:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 8002118:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800211c:	f50d 7a82 	add.w	sl, sp, #260	; 0x104
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 8002120:	e888 0007 	stmia.w	r8, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 8002124:	933e      	str	r3, [sp, #248]	; 0xf8
 8002126:	933f      	str	r3, [sp, #252]	; 0xfc
 8002128:	9340      	str	r3, [sp, #256]	; 0x100
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 800212a:	932f      	str	r3, [sp, #188]	; 0xbc
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 800212c:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 8002130:	9330      	str	r3, [sp, #192]	; 0xc0
 8002132:	9331      	str	r3, [sp, #196]	; 0xc4
 8002134:	9332      	str	r3, [sp, #200]	; 0xc8
 8002136:	9333      	str	r3, [sp, #204]	; 0xcc
 8002138:	9334      	str	r3, [sp, #208]	; 0xd0
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 800213a:	9344      	str	r3, [sp, #272]	; 0x110
 800213c:	9345      	str	r3, [sp, #276]	; 0x114
 800213e:	9346      	str	r3, [sp, #280]	; 0x118
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002140:	934a      	str	r3, [sp, #296]	; 0x128
 8002142:	934b      	str	r3, [sp, #300]	; 0x12c
 8002144:	934c      	str	r3, [sp, #304]	; 0x130
 8002146:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800214a:	f50d 7ba0 	add.w	fp, sp, #320	; 0x140
 800214e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002152:	f50d 7ba6 	add.w	fp, sp, #332	; 0x14c
 8002156:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800215a:	f50d 7bac 	add.w	fp, sp, #344	; 0x158
 800215e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8002162:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 8002166:	9347      	str	r3, [sp, #284]	; 0x11c
 8002168:	9348      	str	r3, [sp, #288]	; 0x120
 800216a:	9349      	str	r3, [sp, #292]	; 0x124
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 800216c:	9359      	str	r3, [sp, #356]	; 0x164
 800216e:	935a      	str	r3, [sp, #360]	; 0x168
 8002170:	935b      	str	r3, [sp, #364]	; 0x16c
 8002172:	935c      	str	r3, [sp, #368]	; 0x170
 8002174:	935d      	str	r3, [sp, #372]	; 0x174
 8002176:	935e      	str	r3, [sp, #376]	; 0x178
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8002178:	935f      	str	r3, [sp, #380]	; 0x17c
 800217a:	9360      	str	r3, [sp, #384]	; 0x180
 800217c:	9361      	str	r3, [sp, #388]	; 0x184
 800217e:	9362      	str	r3, [sp, #392]	; 0x188
 8002180:	9363      	str	r3, [sp, #396]	; 0x18c
 8002182:	9364      	str	r3, [sp, #400]	; 0x190
 8002184:	9365      	str	r3, [sp, #404]	; 0x194
 8002186:	9366      	str	r3, [sp, #408]	; 0x198
 8002188:	9367      	str	r3, [sp, #412]	; 0x19c
 800218a:	9368      	str	r3, [sp, #416]	; 0x1a0
 800218c:	9369      	str	r3, [sp, #420]	; 0x1a4
 800218e:	936a      	str	r3, [sp, #424]	; 0x1a8
 8002190:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8002194:	f50d 7b00 	add.w	fp, sp, #512	; 0x200
 8002198:	9374      	str	r3, [sp, #464]	; 0x1d0
 800219a:	9375      	str	r3, [sp, #468]	; 0x1d4
 800219c:	9376      	str	r3, [sp, #472]	; 0x1d8
 800219e:	9377      	str	r3, [sp, #476]	; 0x1dc
 80021a0:	9378      	str	r3, [sp, #480]	; 0x1e0
 80021a2:	9379      	str	r3, [sp, #484]	; 0x1e4
 80021a4:	937a      	str	r3, [sp, #488]	; 0x1e8
 80021a6:	937b      	str	r3, [sp, #492]	; 0x1ec
 80021a8:	937c      	str	r3, [sp, #496]	; 0x1f0
 80021aa:	937d      	str	r3, [sp, #500]	; 0x1f4
 80021ac:	937e      	str	r3, [sp, #504]	; 0x1f8
 80021ae:	937f      	str	r3, [sp, #508]	; 0x1fc
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 80021b0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021b4:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 80021b8:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021bc:	f50d 7b15 	add.w	fp, sp, #596	; 0x254
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021c0:	936e      	str	r3, [sp, #440]	; 0x1b8
 80021c2:	936f      	str	r3, [sp, #444]	; 0x1bc
 80021c4:	9370      	str	r3, [sp, #448]	; 0x1c0
 80021c6:	9371      	str	r3, [sp, #452]	; 0x1c4
 80021c8:	9372      	str	r3, [sp, #456]	; 0x1c8
 80021ca:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021cc:	9383      	str	r3, [sp, #524]	; 0x20c
 80021ce:	9384      	str	r3, [sp, #528]	; 0x210
 80021d0:	9385      	str	r3, [sp, #532]	; 0x214
 80021d2:	9386      	str	r3, [sp, #536]	; 0x218
 80021d4:	9387      	str	r3, [sp, #540]	; 0x21c
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 80021d6:	af4a      	add	r7, sp, #296	; 0x128
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021d8:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021da:	9389      	str	r3, [sp, #548]	; 0x224
 80021dc:	938a      	str	r3, [sp, #552]	; 0x228
 80021de:	938b      	str	r3, [sp, #556]	; 0x22c
 80021e0:	938c      	str	r3, [sp, #560]	; 0x230
 80021e2:	938d      	str	r3, [sp, #564]	; 0x234
 80021e4:	938e      	str	r3, [sp, #568]	; 0x238
 80021e6:	938f      	str	r3, [sp, #572]	; 0x23c
 80021e8:	9390      	str	r3, [sp, #576]	; 0x240
 80021ea:	9391      	str	r3, [sp, #580]	; 0x244
 80021ec:	9392      	str	r3, [sp, #584]	; 0x248
 80021ee:	9393      	str	r3, [sp, #588]	; 0x24c
 80021f0:	9394      	str	r3, [sp, #592]	; 0x250
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 80021f2:	f8cd c010 	str.w	ip, [sp, #16]
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021f6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 80021fa:	f8cd 9014 	str.w	r9, [sp, #20]
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80021fe:	9398      	str	r3, [sp, #608]	; 0x260
 8002200:	9399      	str	r3, [sp, #612]	; 0x264
 8002202:	939a      	str	r3, [sp, #616]	; 0x268
 8002204:	939b      	str	r3, [sp, #620]	; 0x26c
 8002206:	939c      	str	r3, [sp, #624]	; 0x270
 8002208:	939d      	str	r3, [sp, #628]	; 0x274
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 800220a:	f8cd 8018 	str.w	r8, [sp, #24]
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 800220e:	9707      	str	r7, [sp, #28]
			RGB tabline_3[7] = { bckgrd, number, bckgrd, number, bckgrd, number,bckgrd };
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
			RGB tabline_7[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002210:	ab5f      	add	r3, sp, #380	; 0x17c
 8002212:	9308      	str	r3, [sp, #32]
 8002214:	ab74      	add	r3, sp, #464	; 0x1d0
 8002216:	9309      	str	r3, [sp, #36]	; 0x24
			SetLedLine(matrice, TabSize);
 8002218:	4631      	mov	r1, r6
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 800221a:	ab89      	add	r3, sp, #548	; 0x224
			SetLedLine(matrice, TabSize);
 800221c:	a804      	add	r0, sp, #16
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 800221e:	930a      	str	r3, [sp, #40]	; 0x28
			SetLedLine(matrice, TabSize);
 8002220:	f7ff fb3c 	bl	800189c <SetLedLine>
		}
		//HAL_Delay(1000);
		ResetAllBlack();
 8002224:	f7ff fb72 	bl	800190c <ResetAllBlack>
	for (int compteur = 13; compteur >= 0; compteur--) {
 8002228:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800222c:	f4bf aba7 	bcs.w	800197e <compteur+0xe>
		//HAL_Delay(500);
	}
}
 8002230:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8002234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (compteur == 7) {
 8002238:	2c07      	cmp	r4, #7
 800223a:	d17f      	bne.n	800233c <compteur+0x9cc>
			RGB number = White;
 800223c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002240:	2300      	movs	r3, #0
 8002242:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8002246:	930b      	str	r3, [sp, #44]	; 0x2c
 8002248:	930c      	str	r3, [sp, #48]	; 0x30
 800224a:	930d      	str	r3, [sp, #52]	; 0x34
 800224c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002250:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8002254:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002258:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800225c:	f10d 0880 	add.w	r8, sp, #128	; 0x80
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002260:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002264:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8002268:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB number = White;
 800226c:	f10d 0e04 	add.w	lr, sp, #4
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002270:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
			RGB number = White;
 8002274:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002278:	931a      	str	r3, [sp, #104]	; 0x68
 800227a:	931b      	str	r3, [sp, #108]	; 0x6c
 800227c:	931c      	str	r3, [sp, #112]	; 0x70
 800227e:	931d      	str	r3, [sp, #116]	; 0x74
 8002280:	931e      	str	r3, [sp, #120]	; 0x78
 8002282:	931f      	str	r3, [sp, #124]	; 0x7c
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002284:	f8c8 3000 	str.w	r3, [r8]
 8002288:	f8c8 3004 	str.w	r3, [r8, #4]
 800228c:	f8c8 3008 	str.w	r3, [r8, #8]
 8002290:	f8c8 300c 	str.w	r3, [r8, #12]
 8002294:	f8c8 3010 	str.w	r3, [r8, #16]
 8002298:	f8c8 3014 	str.w	r3, [r8, #20]
 800229c:	f8c8 3018 	str.w	r3, [r8, #24]
 80022a0:	f8c8 301c 	str.w	r3, [r8, #28]
 80022a4:	f8c8 3020 	str.w	r3, [r8, #32]
 80022a8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 80022ac:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 80022b0:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 80022b4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 80022b8:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 80022bc:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 80022c0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80022c4:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
 80022c8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80022cc:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 80022d0:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 80022d4:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80022d8:	f8cc 3000 	str.w	r3, [ip]
 80022dc:	f8cc 3004 	str.w	r3, [ip, #4]
 80022e0:	f8cc 3008 	str.w	r3, [ip, #8]
 80022e4:	f8cc 300c 	str.w	r3, [ip, #12]
 80022e8:	f8cc 3010 	str.w	r3, [ip, #16]
 80022ec:	f8cc 3014 	str.w	r3, [ip, #20]
 80022f0:	f8cc 3018 	str.w	r3, [ip, #24]
 80022f4:	f8cc 301c 	str.w	r3, [ip, #28]
 80022f8:	f8cc 3020 	str.w	r3, [ip, #32]
 80022fc:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
 8002300:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
 8002304:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
 8002308:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800230c:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
 8002310:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002314:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002318:	e889 0007 	stmia.w	r9, {r0, r1, r2}
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 800231c:	af4a      	add	r7, sp, #296	; 0x128
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800231e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8002322:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
 8002326:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 800232a:	934a      	str	r3, [sp, #296]	; 0x128
 800232c:	934b      	str	r3, [sp, #300]	; 0x12c
 800232e:	934c      	str	r3, [sp, #304]	; 0x130
 8002330:	934d      	str	r3, [sp, #308]	; 0x134
 8002332:	934e      	str	r3, [sp, #312]	; 0x138
 8002334:	934f      	str	r3, [sp, #316]	; 0x13c
 8002336:	e658      	b.n	8001fea <compteur+0x67a>
 8002338:	080039e8 	.word	0x080039e8
		if (compteur == 6) {
 800233c:	2c06      	cmp	r4, #6
 800233e:	f040 80af 	bne.w	80024a0 <compteur+0xb30>
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002342:	af0b      	add	r7, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002344:	a820      	add	r0, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002346:	a935      	add	r1, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8002348:	aa4a      	add	r2, sp, #296	; 0x128
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 800234a:	2300      	movs	r3, #0
 800234c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	f8c7 c010 	str.w	ip, [r7, #16]
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	f8c7 c01c 	str.w	ip, [r7, #28]
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
 8002370:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8002374:	63bb      	str	r3, [r7, #56]	; 0x38
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002378:	643b      	str	r3, [r7, #64]	; 0x40
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
 800237e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002380:	653b      	str	r3, [r7, #80]	; 0x50
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002382:	6003      	str	r3, [r0, #0]
 8002384:	6043      	str	r3, [r0, #4]
 8002386:	6083      	str	r3, [r0, #8]
 8002388:	60c3      	str	r3, [r0, #12]
 800238a:	6103      	str	r3, [r0, #16]
 800238c:	6143      	str	r3, [r0, #20]
 800238e:	6183      	str	r3, [r0, #24]
 8002390:	61c3      	str	r3, [r0, #28]
 8002392:	6203      	str	r3, [r0, #32]
 8002394:	6243      	str	r3, [r0, #36]	; 0x24
 8002396:	6283      	str	r3, [r0, #40]	; 0x28
 8002398:	62c3      	str	r3, [r0, #44]	; 0x2c
 800239a:	6303      	str	r3, [r0, #48]	; 0x30
 800239c:	6343      	str	r3, [r0, #52]	; 0x34
 800239e:	6383      	str	r3, [r0, #56]	; 0x38
 80023a0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80023a2:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
 80023a6:	6443      	str	r3, [r0, #68]	; 0x44
 80023a8:	6483      	str	r3, [r0, #72]	; 0x48
 80023aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80023ac:	6503      	str	r3, [r0, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, bckgrd, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	604b      	str	r3, [r1, #4]
 80023b2:	608b      	str	r3, [r1, #8]
 80023b4:	60cb      	str	r3, [r1, #12]
 80023b6:	610b      	str	r3, [r1, #16]
 80023b8:	614b      	str	r3, [r1, #20]
 80023ba:	618b      	str	r3, [r1, #24]
 80023bc:	61cb      	str	r3, [r1, #28]
 80023be:	620b      	str	r3, [r1, #32]
 80023c0:	624b      	str	r3, [r1, #36]	; 0x24
 80023c2:	628b      	str	r3, [r1, #40]	; 0x28
 80023c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023c6:	630b      	str	r3, [r1, #48]	; 0x30
 80023c8:	634b      	str	r3, [r1, #52]	; 0x34
 80023ca:	638b      	str	r3, [r1, #56]	; 0x38
 80023cc:	63cb      	str	r3, [r1, #60]	; 0x3c
 80023ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80023d2:	644b      	str	r3, [r1, #68]	; 0x44
 80023d4:	648b      	str	r3, [r1, #72]	; 0x48
 80023d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80023d8:	650b      	str	r3, [r1, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	6053      	str	r3, [r2, #4]
 80023de:	6093      	str	r3, [r2, #8]
 80023e0:	60d3      	str	r3, [r2, #12]
 80023e2:	6113      	str	r3, [r2, #16]
 80023e4:	6153      	str	r3, [r2, #20]
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	f8c2 c01c 	str.w	ip, [r2, #28]
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	6253      	str	r3, [r2, #36]	; 0x24
 80023f0:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
 80023f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023f6:	6313      	str	r3, [r2, #48]	; 0x30
 80023f8:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
 80023fc:	6393      	str	r3, [r2, #56]	; 0x38
 80023fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	6453      	str	r3, [r2, #68]	; 0x44
 8002404:	6493      	str	r3, [r2, #72]	; 0x48
 8002406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002408:	6513      	str	r3, [r2, #80]	; 0x50
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 800240a:	935f      	str	r3, [sp, #380]	; 0x17c
 800240c:	9360      	str	r3, [sp, #384]	; 0x180
 800240e:	9361      	str	r3, [sp, #388]	; 0x184
 8002410:	9362      	str	r3, [sp, #392]	; 0x188
 8002412:	f8cd c18c 	str.w	ip, [sp, #396]	; 0x18c
 8002416:	9364      	str	r3, [sp, #400]	; 0x190
 8002418:	9365      	str	r3, [sp, #404]	; 0x194
 800241a:	9366      	str	r3, [sp, #408]	; 0x198
 800241c:	9367      	str	r3, [sp, #412]	; 0x19c
 800241e:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002420:	9369      	str	r3, [sp, #420]	; 0x1a4
 8002422:	936a      	str	r3, [sp, #424]	; 0x1a8
 8002424:	936b      	str	r3, [sp, #428]	; 0x1ac
 8002426:	936c      	str	r3, [sp, #432]	; 0x1b0
 8002428:	936d      	str	r3, [sp, #436]	; 0x1b4
 800242a:	936e      	str	r3, [sp, #440]	; 0x1b8
 800242c:	936f      	str	r3, [sp, #444]	; 0x1bc
 800242e:	9370      	str	r3, [sp, #448]	; 0x1c0
 8002430:	9371      	str	r3, [sp, #452]	; 0x1c4
 8002432:	9372      	str	r3, [sp, #456]	; 0x1c8
 8002434:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, bckgrd,bckgrd };
 8002436:	9374      	str	r3, [sp, #464]	; 0x1d0
 8002438:	9375      	str	r3, [sp, #468]	; 0x1d4
 800243a:	9376      	str	r3, [sp, #472]	; 0x1d8
 800243c:	9377      	str	r3, [sp, #476]	; 0x1dc
 800243e:	f8cd c1e0 	str.w	ip, [sp, #480]	; 0x1e0
 8002442:	9379      	str	r3, [sp, #484]	; 0x1e4
 8002444:	937a      	str	r3, [sp, #488]	; 0x1e8
 8002446:	937b      	str	r3, [sp, #492]	; 0x1ec
 8002448:	937c      	str	r3, [sp, #496]	; 0x1f0
 800244a:	937d      	str	r3, [sp, #500]	; 0x1f4
 800244c:	937e      	str	r3, [sp, #504]	; 0x1f8
 800244e:	937f      	str	r3, [sp, #508]	; 0x1fc
 8002450:	9380      	str	r3, [sp, #512]	; 0x200
 8002452:	9381      	str	r3, [sp, #516]	; 0x204
 8002454:	9382      	str	r3, [sp, #520]	; 0x208
 8002456:	9383      	str	r3, [sp, #524]	; 0x20c
 8002458:	9384      	str	r3, [sp, #528]	; 0x210
 800245a:	9385      	str	r3, [sp, #532]	; 0x214
 800245c:	9386      	str	r3, [sp, #536]	; 0x218
 800245e:	9387      	str	r3, [sp, #540]	; 0x21c
 8002460:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, number, number, number, number, number,bckgrd };
 8002462:	9389      	str	r3, [sp, #548]	; 0x224
 8002464:	938a      	str	r3, [sp, #552]	; 0x228
 8002466:	938b      	str	r3, [sp, #556]	; 0x22c
 8002468:	938c      	str	r3, [sp, #560]	; 0x230
 800246a:	f8cd c234 	str.w	ip, [sp, #564]	; 0x234
 800246e:	938e      	str	r3, [sp, #568]	; 0x238
 8002470:	938f      	str	r3, [sp, #572]	; 0x23c
 8002472:	f8cd c240 	str.w	ip, [sp, #576]	; 0x240
 8002476:	9391      	str	r3, [sp, #580]	; 0x244
 8002478:	9392      	str	r3, [sp, #584]	; 0x248
 800247a:	f8cd c24c 	str.w	ip, [sp, #588]	; 0x24c
 800247e:	9394      	str	r3, [sp, #592]	; 0x250
 8002480:	9395      	str	r3, [sp, #596]	; 0x254
 8002482:	f8cd c258 	str.w	ip, [sp, #600]	; 0x258
 8002486:	9397      	str	r3, [sp, #604]	; 0x25c
 8002488:	9398      	str	r3, [sp, #608]	; 0x260
 800248a:	f8cd c264 	str.w	ip, [sp, #612]	; 0x264
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 800248e:	939a      	str	r3, [sp, #616]	; 0x268
 8002490:	939b      	str	r3, [sp, #620]	; 0x26c
 8002492:	939c      	str	r3, [sp, #624]	; 0x270
 8002494:	939d      	str	r3, [sp, #628]	; 0x274
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002496:	9704      	str	r7, [sp, #16]
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002498:	9005      	str	r0, [sp, #20]
 800249a:	9106      	str	r1, [sp, #24]
 800249c:	9207      	str	r2, [sp, #28]
 800249e:	e6b7      	b.n	8002210 <compteur+0x8a0>
		if (compteur == 5) {
 80024a0:	2c05      	cmp	r4, #5
 80024a2:	f040 809b 	bne.w	80025dc <compteur+0xc6c>
			RGB tabline_1[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80024a6:	af0b      	add	r7, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 80024a8:	a820      	add	r0, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 80024aa:	a935      	add	r1, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80024ac:	aa4a      	add	r2, sp, #296	; 0x128
			RGB tabline_1[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80024ae:	2300      	movs	r3, #0
 80024b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
 80024d0:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
 80024d8:	647b      	str	r3, [r7, #68]	; 0x44
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
 80024dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
			RGB tabline_2[7] = { bckgrd, bckgrd, bckgrd, number, number, bckgrd,bckgrd };
 80024e0:	6003      	str	r3, [r0, #0]
 80024e2:	6043      	str	r3, [r0, #4]
 80024e4:	6083      	str	r3, [r0, #8]
 80024e6:	60c3      	str	r3, [r0, #12]
 80024e8:	6103      	str	r3, [r0, #16]
 80024ea:	6143      	str	r3, [r0, #20]
 80024ec:	6183      	str	r3, [r0, #24]
 80024ee:	61c3      	str	r3, [r0, #28]
 80024f0:	6203      	str	r3, [r0, #32]
 80024f2:	6243      	str	r3, [r0, #36]	; 0x24
 80024f4:	6283      	str	r3, [r0, #40]	; 0x28
 80024f6:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
 80024fa:	6303      	str	r3, [r0, #48]	; 0x30
 80024fc:	6343      	str	r3, [r0, #52]	; 0x34
 80024fe:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 8002502:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002504:	6403      	str	r3, [r0, #64]	; 0x40
 8002506:	6443      	str	r3, [r0, #68]	; 0x44
 8002508:	6483      	str	r3, [r0, #72]	; 0x48
 800250a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800250c:	6503      	str	r3, [r0, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, bckgrd, number, bckgrd, number, bckgrd,bckgrd };
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	604b      	str	r3, [r1, #4]
 8002512:	608b      	str	r3, [r1, #8]
 8002514:	60cb      	str	r3, [r1, #12]
 8002516:	610b      	str	r3, [r1, #16]
 8002518:	614b      	str	r3, [r1, #20]
 800251a:	618b      	str	r3, [r1, #24]
 800251c:	61cb      	str	r3, [r1, #28]
 800251e:	f8c1 c020 	str.w	ip, [r1, #32]
 8002522:	624b      	str	r3, [r1, #36]	; 0x24
 8002524:	628b      	str	r3, [r1, #40]	; 0x28
 8002526:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002528:	630b      	str	r3, [r1, #48]	; 0x30
 800252a:	634b      	str	r3, [r1, #52]	; 0x34
 800252c:	f8c1 c038 	str.w	ip, [r1, #56]	; 0x38
 8002530:	63cb      	str	r3, [r1, #60]	; 0x3c
 8002532:	640b      	str	r3, [r1, #64]	; 0x40
 8002534:	644b      	str	r3, [r1, #68]	; 0x44
 8002536:	648b      	str	r3, [r1, #72]	; 0x48
 8002538:	64cb      	str	r3, [r1, #76]	; 0x4c
 800253a:	650b      	str	r3, [r1, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, number, bckgrd,bckgrd };
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	6053      	str	r3, [r2, #4]
 8002540:	6093      	str	r3, [r2, #8]
 8002542:	60d3      	str	r3, [r2, #12]
 8002544:	6113      	str	r3, [r2, #16]
 8002546:	f8c2 c014 	str.w	ip, [r2, #20]
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	61d3      	str	r3, [r2, #28]
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	6253      	str	r3, [r2, #36]	; 0x24
 8002552:	6293      	str	r3, [r2, #40]	; 0x28
 8002554:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002556:	6313      	str	r3, [r2, #48]	; 0x30
 8002558:	6353      	str	r3, [r2, #52]	; 0x34
 800255a:	f8c2 c038 	str.w	ip, [r2, #56]	; 0x38
 800255e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	6453      	str	r3, [r2, #68]	; 0x44
 8002564:	6493      	str	r3, [r2, #72]	; 0x48
 8002566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002568:	6513      	str	r3, [r2, #80]	; 0x50
			RGB tabline_5[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 800256a:	935f      	str	r3, [sp, #380]	; 0x17c
 800256c:	9360      	str	r3, [sp, #384]	; 0x180
 800256e:	9361      	str	r3, [sp, #388]	; 0x184
 8002570:	9362      	str	r3, [sp, #392]	; 0x188
 8002572:	9363      	str	r3, [sp, #396]	; 0x18c
 8002574:	9364      	str	r3, [sp, #400]	; 0x190
 8002576:	9365      	str	r3, [sp, #404]	; 0x194
 8002578:	9366      	str	r3, [sp, #408]	; 0x198
 800257a:	9367      	str	r3, [sp, #412]	; 0x19c
 800257c:	9368      	str	r3, [sp, #416]	; 0x1a0
 800257e:	9369      	str	r3, [sp, #420]	; 0x1a4
 8002580:	936a      	str	r3, [sp, #424]	; 0x1a8
 8002582:	936b      	str	r3, [sp, #428]	; 0x1ac
 8002584:	936c      	str	r3, [sp, #432]	; 0x1b0
 8002586:	f8cd c1b4 	str.w	ip, [sp, #436]	; 0x1b4
 800258a:	936e      	str	r3, [sp, #440]	; 0x1b8
 800258c:	936f      	str	r3, [sp, #444]	; 0x1bc
 800258e:	9370      	str	r3, [sp, #448]	; 0x1c0
 8002590:	9371      	str	r3, [sp, #452]	; 0x1c4
 8002592:	9372      	str	r3, [sp, #456]	; 0x1c8
 8002594:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 8002596:	9374      	str	r3, [sp, #464]	; 0x1d0
 8002598:	9375      	str	r3, [sp, #468]	; 0x1d4
 800259a:	9376      	str	r3, [sp, #472]	; 0x1d8
 800259c:	9377      	str	r3, [sp, #476]	; 0x1dc
 800259e:	9378      	str	r3, [sp, #480]	; 0x1e0
 80025a0:	9379      	str	r3, [sp, #484]	; 0x1e4
 80025a2:	937a      	str	r3, [sp, #488]	; 0x1e8
 80025a4:	937b      	str	r3, [sp, #492]	; 0x1ec
 80025a6:	937c      	str	r3, [sp, #496]	; 0x1f0
 80025a8:	937d      	str	r3, [sp, #500]	; 0x1f4
 80025aa:	937e      	str	r3, [sp, #504]	; 0x1f8
 80025ac:	937f      	str	r3, [sp, #508]	; 0x1fc
 80025ae:	9380      	str	r3, [sp, #512]	; 0x200
 80025b0:	9381      	str	r3, [sp, #516]	; 0x204
 80025b2:	f8cd c208 	str.w	ip, [sp, #520]	; 0x208
 80025b6:	9383      	str	r3, [sp, #524]	; 0x20c
 80025b8:	9384      	str	r3, [sp, #528]	; 0x210
 80025ba:	9385      	str	r3, [sp, #532]	; 0x214
 80025bc:	9386      	str	r3, [sp, #536]	; 0x218
 80025be:	9387      	str	r3, [sp, #540]	; 0x21c
 80025c0:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, bckgrd, bckgrd, bckgrd, number, bckgrd,bckgrd };
 80025c2:	9389      	str	r3, [sp, #548]	; 0x224
 80025c4:	938a      	str	r3, [sp, #552]	; 0x228
 80025c6:	938b      	str	r3, [sp, #556]	; 0x22c
 80025c8:	938c      	str	r3, [sp, #560]	; 0x230
 80025ca:	938d      	str	r3, [sp, #564]	; 0x234
 80025cc:	938e      	str	r3, [sp, #568]	; 0x238
 80025ce:	938f      	str	r3, [sp, #572]	; 0x23c
 80025d0:	9390      	str	r3, [sp, #576]	; 0x240
 80025d2:	9391      	str	r3, [sp, #580]	; 0x244
 80025d4:	9392      	str	r3, [sp, #584]	; 0x248
 80025d6:	9393      	str	r3, [sp, #588]	; 0x24c
 80025d8:	9394      	str	r3, [sp, #592]	; 0x250
 80025da:	e47e      	b.n	8001eda <compteur+0x56a>
		if (compteur == 4) {
 80025dc:	2c04      	cmp	r4, #4
 80025de:	f040 80b2 	bne.w	8002746 <compteur+0xdd6>
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 80025e2:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80025e6:	a820      	add	r0, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80025e8:	a935      	add	r1, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80025ea:	aa4a      	add	r2, sp, #296	; 0x128
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 80025ec:	2300      	movs	r3, #0
 80025ee:	27ff      	movs	r7, #255	; 0xff
 80025f0:	f8ce 3000 	str.w	r3, [lr]
 80025f4:	f8ce 3004 	str.w	r3, [lr, #4]
 80025f8:	f8ce 3008 	str.w	r3, [lr, #8]
 80025fc:	f8ce 300c 	str.w	r3, [lr, #12]
 8002600:	f8ce 3010 	str.w	r3, [lr, #16]
 8002604:	f8ce 3014 	str.w	r3, [lr, #20]
 8002608:	f8ce 7018 	str.w	r7, [lr, #24]
 800260c:	f8ce 301c 	str.w	r3, [lr, #28]
 8002610:	f8ce 3020 	str.w	r3, [lr, #32]
 8002614:	f8ce 7024 	str.w	r7, [lr, #36]	; 0x24
 8002618:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
 800261c:	f8ce 302c 	str.w	r3, [lr, #44]	; 0x2c
 8002620:	f8ce 7030 	str.w	r7, [lr, #48]	; 0x30
 8002624:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 8002628:	f8ce 3038 	str.w	r3, [lr, #56]	; 0x38
 800262c:	f8ce 303c 	str.w	r3, [lr, #60]	; 0x3c
 8002630:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
 8002634:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
 8002638:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
 800263c:	f8ce 304c 	str.w	r3, [lr, #76]	; 0x4c
 8002640:	f8ce 3050 	str.w	r3, [lr, #80]	; 0x50
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002644:	6003      	str	r3, [r0, #0]
 8002646:	6043      	str	r3, [r0, #4]
 8002648:	6083      	str	r3, [r0, #8]
 800264a:	60c7      	str	r7, [r0, #12]
 800264c:	6103      	str	r3, [r0, #16]
 800264e:	6143      	str	r3, [r0, #20]
 8002650:	6183      	str	r3, [r0, #24]
 8002652:	61c3      	str	r3, [r0, #28]
 8002654:	6203      	str	r3, [r0, #32]
 8002656:	6243      	str	r3, [r0, #36]	; 0x24
 8002658:	6283      	str	r3, [r0, #40]	; 0x28
 800265a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800265c:	6303      	str	r3, [r0, #48]	; 0x30
 800265e:	6343      	str	r3, [r0, #52]	; 0x34
 8002660:	6383      	str	r3, [r0, #56]	; 0x38
 8002662:	63c7      	str	r7, [r0, #60]	; 0x3c
 8002664:	6403      	str	r3, [r0, #64]	; 0x40
 8002666:	6443      	str	r3, [r0, #68]	; 0x44
 8002668:	6483      	str	r3, [r0, #72]	; 0x48
 800266a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800266c:	6503      	str	r3, [r0, #80]	; 0x50
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	604b      	str	r3, [r1, #4]
 8002672:	608b      	str	r3, [r1, #8]
 8002674:	60cf      	str	r7, [r1, #12]
 8002676:	610b      	str	r3, [r1, #16]
 8002678:	614b      	str	r3, [r1, #20]
 800267a:	618b      	str	r3, [r1, #24]
 800267c:	61cb      	str	r3, [r1, #28]
 800267e:	620b      	str	r3, [r1, #32]
 8002680:	624b      	str	r3, [r1, #36]	; 0x24
 8002682:	628b      	str	r3, [r1, #40]	; 0x28
 8002684:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002686:	630b      	str	r3, [r1, #48]	; 0x30
 8002688:	634b      	str	r3, [r1, #52]	; 0x34
 800268a:	638b      	str	r3, [r1, #56]	; 0x38
 800268c:	63cf      	str	r7, [r1, #60]	; 0x3c
 800268e:	640b      	str	r3, [r1, #64]	; 0x40
 8002690:	644b      	str	r3, [r1, #68]	; 0x44
 8002692:	648b      	str	r3, [r1, #72]	; 0x48
 8002694:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002696:	650b      	str	r3, [r1, #80]	; 0x50
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	6053      	str	r3, [r2, #4]
 800269c:	6093      	str	r3, [r2, #8]
 800269e:	60d7      	str	r7, [r2, #12]
 80026a0:	6113      	str	r3, [r2, #16]
 80026a2:	6153      	str	r3, [r2, #20]
 80026a4:	6193      	str	r3, [r2, #24]
 80026a6:	61d3      	str	r3, [r2, #28]
 80026a8:	6213      	str	r3, [r2, #32]
 80026aa:	6253      	str	r3, [r2, #36]	; 0x24
 80026ac:	6293      	str	r3, [r2, #40]	; 0x28
 80026ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	6353      	str	r3, [r2, #52]	; 0x34
 80026b4:	6393      	str	r3, [r2, #56]	; 0x38
 80026b6:	63d7      	str	r7, [r2, #60]	; 0x3c
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	6453      	str	r3, [r2, #68]	; 0x44
 80026bc:	6493      	str	r3, [r2, #72]	; 0x48
 80026be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c0:	6513      	str	r3, [r2, #80]	; 0x50
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80026c2:	935f      	str	r3, [sp, #380]	; 0x17c
 80026c4:	9360      	str	r3, [sp, #384]	; 0x180
 80026c6:	9361      	str	r3, [sp, #388]	; 0x184
 80026c8:	9762      	str	r7, [sp, #392]	; 0x188
 80026ca:	9363      	str	r3, [sp, #396]	; 0x18c
 80026cc:	9364      	str	r3, [sp, #400]	; 0x190
 80026ce:	9365      	str	r3, [sp, #404]	; 0x194
 80026d0:	9366      	str	r3, [sp, #408]	; 0x198
 80026d2:	9367      	str	r3, [sp, #412]	; 0x19c
 80026d4:	9368      	str	r3, [sp, #416]	; 0x1a0
 80026d6:	9369      	str	r3, [sp, #420]	; 0x1a4
 80026d8:	936a      	str	r3, [sp, #424]	; 0x1a8
 80026da:	936b      	str	r3, [sp, #428]	; 0x1ac
 80026dc:	936c      	str	r3, [sp, #432]	; 0x1b0
 80026de:	936d      	str	r3, [sp, #436]	; 0x1b4
 80026e0:	976e      	str	r7, [sp, #440]	; 0x1b8
 80026e2:	936f      	str	r3, [sp, #444]	; 0x1bc
 80026e4:	9370      	str	r3, [sp, #448]	; 0x1c0
 80026e6:	9371      	str	r3, [sp, #452]	; 0x1c4
 80026e8:	9372      	str	r3, [sp, #456]	; 0x1c8
 80026ea:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80026ec:	9374      	str	r3, [sp, #464]	; 0x1d0
 80026ee:	9375      	str	r3, [sp, #468]	; 0x1d4
 80026f0:	9376      	str	r3, [sp, #472]	; 0x1d8
 80026f2:	9777      	str	r7, [sp, #476]	; 0x1dc
 80026f4:	9378      	str	r3, [sp, #480]	; 0x1e0
 80026f6:	9379      	str	r3, [sp, #484]	; 0x1e4
 80026f8:	937a      	str	r3, [sp, #488]	; 0x1e8
 80026fa:	937b      	str	r3, [sp, #492]	; 0x1ec
 80026fc:	937c      	str	r3, [sp, #496]	; 0x1f0
 80026fe:	937d      	str	r3, [sp, #500]	; 0x1f4
 8002700:	937e      	str	r3, [sp, #504]	; 0x1f8
 8002702:	937f      	str	r3, [sp, #508]	; 0x1fc
 8002704:	9380      	str	r3, [sp, #512]	; 0x200
 8002706:	9381      	str	r3, [sp, #516]	; 0x204
 8002708:	9382      	str	r3, [sp, #520]	; 0x208
 800270a:	9783      	str	r7, [sp, #524]	; 0x20c
 800270c:	9384      	str	r3, [sp, #528]	; 0x210
 800270e:	9385      	str	r3, [sp, #532]	; 0x214
 8002710:	9386      	str	r3, [sp, #536]	; 0x218
 8002712:	9387      	str	r3, [sp, #540]	; 0x21c
 8002714:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8002716:	9389      	str	r3, [sp, #548]	; 0x224
 8002718:	938a      	str	r3, [sp, #552]	; 0x228
 800271a:	938b      	str	r3, [sp, #556]	; 0x22c
 800271c:	938c      	str	r3, [sp, #560]	; 0x230
 800271e:	938d      	str	r3, [sp, #564]	; 0x234
 8002720:	938e      	str	r3, [sp, #568]	; 0x238
 8002722:	978f      	str	r7, [sp, #572]	; 0x23c
 8002724:	9390      	str	r3, [sp, #576]	; 0x240
 8002726:	9391      	str	r3, [sp, #580]	; 0x244
 8002728:	9792      	str	r7, [sp, #584]	; 0x248
 800272a:	9393      	str	r3, [sp, #588]	; 0x24c
 800272c:	9394      	str	r3, [sp, #592]	; 0x250
 800272e:	9795      	str	r7, [sp, #596]	; 0x254
 8002730:	9396      	str	r3, [sp, #600]	; 0x258
 8002732:	9397      	str	r3, [sp, #604]	; 0x25c
 8002734:	9398      	str	r3, [sp, #608]	; 0x260
 8002736:	9399      	str	r3, [sp, #612]	; 0x264
 8002738:	939a      	str	r3, [sp, #616]	; 0x268
 800273a:	939b      	str	r3, [sp, #620]	; 0x26c
 800273c:	939c      	str	r3, [sp, #624]	; 0x270
 800273e:	939d      	str	r3, [sp, #628]	; 0x274
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002740:	f8cd e010 	str.w	lr, [sp, #16]
 8002744:	e6a8      	b.n	8002498 <compteur+0xb28>
		if (compteur == 3) {
 8002746:	2c03      	cmp	r4, #3
 8002748:	f040 80bf 	bne.w	80028ca <compteur+0xf5a>
			RGB number = White;
 800274c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002750:	2300      	movs	r3, #0
 8002752:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8002756:	930b      	str	r3, [sp, #44]	; 0x2c
 8002758:	930c      	str	r3, [sp, #48]	; 0x30
 800275a:	930d      	str	r3, [sp, #52]	; 0x34
 800275c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002760:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8002764:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002768:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 800276c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002770:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8002774:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002778:	f10d 09e0 	add.w	r9, sp, #224	; 0xe0
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800277c:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
			RGB number = White;
 8002780:	f10d 0e04 	add.w	lr, sp, #4
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002784:	f50d 7b9a 	add.w	fp, sp, #308	; 0x134
			RGB number = White;
 8002788:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 800278c:	931a      	str	r3, [sp, #104]	; 0x68
 800278e:	931b      	str	r3, [sp, #108]	; 0x6c
 8002790:	931c      	str	r3, [sp, #112]	; 0x70
 8002792:	931d      	str	r3, [sp, #116]	; 0x74
 8002794:	931e      	str	r3, [sp, #120]	; 0x78
 8002796:	931f      	str	r3, [sp, #124]	; 0x7c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002798:	9320      	str	r3, [sp, #128]	; 0x80
 800279a:	9321      	str	r3, [sp, #132]	; 0x84
 800279c:	9322      	str	r3, [sp, #136]	; 0x88
 800279e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80027a2:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80027a6:	9335      	str	r3, [sp, #212]	; 0xd4
 80027a8:	9336      	str	r3, [sp, #216]	; 0xd8
 80027aa:	9337      	str	r3, [sp, #220]	; 0xdc
 80027ac:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80027b0:	f50d 7988 	add.w	r9, sp, #272	; 0x110
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80027b4:	9326      	str	r3, [sp, #152]	; 0x98
 80027b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80027b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80027ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80027bc:	932a      	str	r3, [sp, #168]	; 0xa8
 80027be:	932b      	str	r3, [sp, #172]	; 0xac
 80027c0:	932c      	str	r3, [sp, #176]	; 0xb0
 80027c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80027c4:	932e      	str	r3, [sp, #184]	; 0xb8
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80027c6:	933b      	str	r3, [sp, #236]	; 0xec
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80027c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80027cc:	933c      	str	r3, [sp, #240]	; 0xf0
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80027ce:	9332      	str	r3, [sp, #200]	; 0xc8
 80027d0:	9333      	str	r3, [sp, #204]	; 0xcc
 80027d2:	9334      	str	r3, [sp, #208]	; 0xd0
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80027d4:	933d      	str	r3, [sp, #244]	; 0xf4
 80027d6:	933e      	str	r3, [sp, #248]	; 0xf8
 80027d8:	933f      	str	r3, [sp, #252]	; 0xfc
 80027da:	9340      	str	r3, [sp, #256]	; 0x100
 80027dc:	9341      	str	r3, [sp, #260]	; 0x104
 80027de:	9342      	str	r3, [sp, #264]	; 0x108
 80027e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80027e2:	e889 0007 	stmia.w	r9, {r0, r1, r2}
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 80027e6:	934a      	str	r3, [sp, #296]	; 0x128
 80027e8:	934b      	str	r3, [sp, #300]	; 0x12c
 80027ea:	934c      	str	r3, [sp, #304]	; 0x130
 80027ec:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 80027f0:	f50d 7ba0 	add.w	fp, sp, #320	; 0x140
 80027f4:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 80027f8:	f50d 7ba6 	add.w	fp, sp, #332	; 0x14c
 80027fc:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002800:	f50d 7bac 	add.w	fp, sp, #344	; 0x158
 8002804:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002808:	f50d 7bc4 	add.w	fp, sp, #392	; 0x188
 800280c:	935f      	str	r3, [sp, #380]	; 0x17c
 800280e:	9360      	str	r3, [sp, #384]	; 0x180
 8002810:	9361      	str	r3, [sp, #388]	; 0x184
 8002812:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002816:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800281a:	9347      	str	r3, [sp, #284]	; 0x11c
 800281c:	9348      	str	r3, [sp, #288]	; 0x120
 800281e:	9349      	str	r3, [sp, #292]	; 0x124
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002820:	9359      	str	r3, [sp, #356]	; 0x164
 8002822:	935a      	str	r3, [sp, #360]	; 0x168
 8002824:	935b      	str	r3, [sp, #364]	; 0x16c
 8002826:	935c      	str	r3, [sp, #368]	; 0x170
 8002828:	935d      	str	r3, [sp, #372]	; 0x174
 800282a:	935e      	str	r3, [sp, #376]	; 0x178
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800282c:	9365      	str	r3, [sp, #404]	; 0x194
 800282e:	9366      	str	r3, [sp, #408]	; 0x198
 8002830:	9367      	str	r3, [sp, #412]	; 0x19c
 8002832:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002834:	9369      	str	r3, [sp, #420]	; 0x1a4
 8002836:	936a      	str	r3, [sp, #424]	; 0x1a8
 8002838:	936b      	str	r3, [sp, #428]	; 0x1ac
 800283a:	936c      	str	r3, [sp, #432]	; 0x1b0
 800283c:	936d      	str	r3, [sp, #436]	; 0x1b4
 800283e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002842:	f50d 7bee 	add.w	fp, sp, #476	; 0x1dc
 8002846:	9374      	str	r3, [sp, #464]	; 0x1d0
 8002848:	9375      	str	r3, [sp, #468]	; 0x1d4
 800284a:	9376      	str	r3, [sp, #472]	; 0x1d8
 800284c:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002850:	f50d 7b03 	add.w	fp, sp, #524	; 0x20c
 8002854:	937a      	str	r3, [sp, #488]	; 0x1e8
 8002856:	937b      	str	r3, [sp, #492]	; 0x1ec
 8002858:	937c      	str	r3, [sp, #496]	; 0x1f0
 800285a:	937d      	str	r3, [sp, #500]	; 0x1f4
 800285c:	937e      	str	r3, [sp, #504]	; 0x1f8
 800285e:	937f      	str	r3, [sp, #508]	; 0x1fc
 8002860:	9380      	str	r3, [sp, #512]	; 0x200
 8002862:	9381      	str	r3, [sp, #516]	; 0x204
 8002864:	9382      	str	r3, [sp, #520]	; 0x208
 8002866:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_7[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 800286a:	f50d 7b0c 	add.w	fp, sp, #560	; 0x230
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800286e:	9371      	str	r3, [sp, #452]	; 0x1c4
 8002870:	9372      	str	r3, [sp, #456]	; 0x1c8
 8002872:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002874:	9386      	str	r3, [sp, #536]	; 0x218
 8002876:	9387      	str	r3, [sp, #540]	; 0x21c
 8002878:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 800287a:	9389      	str	r3, [sp, #548]	; 0x224
 800287c:	938a      	str	r3, [sp, #552]	; 0x228
 800287e:	938b      	str	r3, [sp, #556]	; 0x22c
 8002880:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002884:	f50d 7b0f 	add.w	fp, sp, #572	; 0x23c
 8002888:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800288c:	f50d 7b12 	add.w	fp, sp, #584	; 0x248
 8002890:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 8002894:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002898:	f10d 0880 	add.w	r8, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800289c:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 80028a0:	f50d 7994 	add.w	r9, sp, #296	; 0x128
			RGB tabline_7[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 80028a4:	f50d 7b15 	add.w	fp, sp, #596	; 0x254
 80028a8:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 80028ac:	f8cd a010 	str.w	sl, [sp, #16]
			RGB tabline_7[7] = { bckgrd, number, number, number, number, bckgrd,bckgrd };
 80028b0:	9398      	str	r3, [sp, #608]	; 0x260
 80028b2:	9399      	str	r3, [sp, #612]	; 0x264
 80028b4:	939a      	str	r3, [sp, #616]	; 0x268
 80028b6:	939b      	str	r3, [sp, #620]	; 0x26c
 80028b8:	939c      	str	r3, [sp, #624]	; 0x270
 80028ba:	939d      	str	r3, [sp, #628]	; 0x274
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 80028bc:	f8cd 8014 	str.w	r8, [sp, #20]
 80028c0:	f8cd c018 	str.w	ip, [sp, #24]
 80028c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80028c8:	e4a2      	b.n	8002210 <compteur+0x8a0>
		if (compteur == 2) {
 80028ca:	2c02      	cmp	r4, #2
 80028cc:	f040 80bc 	bne.w	8002a48 <compteur+0x10d8>
			RGB number = White;
 80028d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 80028d4:	2300      	movs	r3, #0
 80028d6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
			RGB number = White;
 80028da:	f10d 0e04 	add.w	lr, sp, #4
 80028de:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 80028e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80028e4:	930c      	str	r3, [sp, #48]	; 0x30
 80028e6:	930d      	str	r3, [sp, #52]	; 0x34
 80028e8:	930e      	str	r3, [sp, #56]	; 0x38
 80028ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80028ec:	9310      	str	r3, [sp, #64]	; 0x40
 80028ee:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80028f2:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 80028f6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80028fa:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 80028fe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002902:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8002906:	931a      	str	r3, [sp, #104]	; 0x68
 8002908:	931b      	str	r3, [sp, #108]	; 0x6c
 800290a:	931c      	str	r3, [sp, #112]	; 0x70
 800290c:	931d      	str	r3, [sp, #116]	; 0x74
 800290e:	931e      	str	r3, [sp, #120]	; 0x78
 8002910:	931f      	str	r3, [sp, #124]	; 0x7c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002912:	9320      	str	r3, [sp, #128]	; 0x80
 8002914:	9321      	str	r3, [sp, #132]	; 0x84
 8002916:	9322      	str	r3, [sp, #136]	; 0x88
 8002918:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800291c:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
 8002920:	9326      	str	r3, [sp, #152]	; 0x98
 8002922:	9327      	str	r3, [sp, #156]	; 0x9c
 8002924:	9328      	str	r3, [sp, #160]	; 0xa0
 8002926:	9329      	str	r3, [sp, #164]	; 0xa4
 8002928:	932a      	str	r3, [sp, #168]	; 0xa8
 800292a:	932b      	str	r3, [sp, #172]	; 0xac
 800292c:	932c      	str	r3, [sp, #176]	; 0xb0
 800292e:	932d      	str	r3, [sp, #180]	; 0xb4
 8002930:	932e      	str	r3, [sp, #184]	; 0xb8
 8002932:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002936:	f10d 0ce0 	add.w	ip, sp, #224	; 0xe0
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800293a:	9332      	str	r3, [sp, #200]	; 0xc8
 800293c:	9333      	str	r3, [sp, #204]	; 0xcc
 800293e:	9334      	str	r3, [sp, #208]	; 0xd0
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002940:	9335      	str	r3, [sp, #212]	; 0xd4
 8002942:	9336      	str	r3, [sp, #216]	; 0xd8
 8002944:	9337      	str	r3, [sp, #220]	; 0xdc
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002946:	f50d 7b9a 	add.w	fp, sp, #308	; 0x134
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800294a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800294e:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 8002952:	933b      	str	r3, [sp, #236]	; 0xec
 8002954:	933c      	str	r3, [sp, #240]	; 0xf0
 8002956:	933d      	str	r3, [sp, #244]	; 0xf4
 8002958:	933e      	str	r3, [sp, #248]	; 0xf8
 800295a:	933f      	str	r3, [sp, #252]	; 0xfc
 800295c:	9340      	str	r3, [sp, #256]	; 0x100
 800295e:	9341      	str	r3, [sp, #260]	; 0x104
 8002960:	9342      	str	r3, [sp, #264]	; 0x108
 8002962:	9343      	str	r3, [sp, #268]	; 0x10c
 8002964:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002968:	9347      	str	r3, [sp, #284]	; 0x11c
 800296a:	9348      	str	r3, [sp, #288]	; 0x120
 800296c:	9349      	str	r3, [sp, #292]	; 0x124
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800296e:	934a      	str	r3, [sp, #296]	; 0x128
 8002970:	934b      	str	r3, [sp, #300]	; 0x12c
 8002972:	934c      	str	r3, [sp, #304]	; 0x130
 8002974:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002978:	f50d 7bb2 	add.w	fp, sp, #356	; 0x164
 800297c:	9350      	str	r3, [sp, #320]	; 0x140
 800297e:	9351      	str	r3, [sp, #324]	; 0x144
 8002980:	9352      	str	r3, [sp, #328]	; 0x148
 8002982:	9353      	str	r3, [sp, #332]	; 0x14c
 8002984:	9354      	str	r3, [sp, #336]	; 0x150
 8002986:	9355      	str	r3, [sp, #340]	; 0x154
 8002988:	9356      	str	r3, [sp, #344]	; 0x158
 800298a:	9357      	str	r3, [sp, #348]	; 0x15c
 800298c:	9358      	str	r3, [sp, #352]	; 0x160
 800298e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002992:	f50d 7bc4 	add.w	fp, sp, #392	; 0x188
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002996:	935c      	str	r3, [sp, #368]	; 0x170
 8002998:	935d      	str	r3, [sp, #372]	; 0x174
 800299a:	935e      	str	r3, [sp, #376]	; 0x178
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 800299c:	935f      	str	r3, [sp, #380]	; 0x17c
 800299e:	9360      	str	r3, [sp, #384]	; 0x180
 80029a0:	9361      	str	r3, [sp, #388]	; 0x184
 80029a2:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 80029a6:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 80029aa:	9365      	str	r3, [sp, #404]	; 0x194
 80029ac:	9366      	str	r3, [sp, #408]	; 0x198
 80029ae:	9367      	str	r3, [sp, #412]	; 0x19c
 80029b0:	9368      	str	r3, [sp, #416]	; 0x1a0
 80029b2:	9369      	str	r3, [sp, #420]	; 0x1a4
 80029b4:	936a      	str	r3, [sp, #424]	; 0x1a8
 80029b6:	936b      	str	r3, [sp, #428]	; 0x1ac
 80029b8:	936c      	str	r3, [sp, #432]	; 0x1b0
 80029ba:	936d      	str	r3, [sp, #436]	; 0x1b4
 80029bc:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80029c0:	f50d 7bee 	add.w	fp, sp, #476	; 0x1dc
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80029c4:	9371      	str	r3, [sp, #452]	; 0x1c4
 80029c6:	9372      	str	r3, [sp, #456]	; 0x1c8
 80029c8:	9373      	str	r3, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80029ca:	9374      	str	r3, [sp, #464]	; 0x1d0
 80029cc:	9375      	str	r3, [sp, #468]	; 0x1d4
 80029ce:	9376      	str	r3, [sp, #472]	; 0x1d8
 80029d0:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 80029d4:	f50d 7b03 	add.w	fp, sp, #524	; 0x20c
 80029d8:	937a      	str	r3, [sp, #488]	; 0x1e8
 80029da:	937b      	str	r3, [sp, #492]	; 0x1ec
 80029dc:	937c      	str	r3, [sp, #496]	; 0x1f0
 80029de:	937d      	str	r3, [sp, #500]	; 0x1f4
 80029e0:	937e      	str	r3, [sp, #504]	; 0x1f8
 80029e2:	937f      	str	r3, [sp, #508]	; 0x1fc
 80029e4:	9380      	str	r3, [sp, #512]	; 0x200
 80029e6:	9381      	str	r3, [sp, #516]	; 0x204
 80029e8:	9382      	str	r3, [sp, #520]	; 0x208
 80029ea:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_7[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 80029ee:	f50d 7b0f 	add.w	fp, sp, #572	; 0x23c
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 80029f2:	9386      	str	r3, [sp, #536]	; 0x218
 80029f4:	9387      	str	r3, [sp, #540]	; 0x21c
 80029f6:	9388      	str	r3, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 80029f8:	9389      	str	r3, [sp, #548]	; 0x224
 80029fa:	938a      	str	r3, [sp, #552]	; 0x228
 80029fc:	938b      	str	r3, [sp, #556]	; 0x22c
 80029fe:	938c      	str	r3, [sp, #560]	; 0x230
 8002a00:	938d      	str	r3, [sp, #564]	; 0x234
 8002a02:	938e      	str	r3, [sp, #568]	; 0x238
 8002a04:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002a08:	f50d 7b12 	add.w	fp, sp, #584	; 0x248
 8002a0c:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8002a10:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002a14:	f10d 0980 	add.w	r9, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002a18:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002a1c:	f50d 7c94 	add.w	ip, sp, #296	; 0x128
			RGB tabline_7[7] = { bckgrd, bckgrd, number, number, number, bckgrd,bckgrd };
 8002a20:	f50d 7b15 	add.w	fp, sp, #596	; 0x254
 8002a24:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8002a28:	9398      	str	r3, [sp, #608]	; 0x260
 8002a2a:	9399      	str	r3, [sp, #612]	; 0x264
 8002a2c:	939a      	str	r3, [sp, #616]	; 0x268
 8002a2e:	939b      	str	r3, [sp, #620]	; 0x26c
 8002a30:	939c      	str	r3, [sp, #624]	; 0x270
 8002a32:	939d      	str	r3, [sp, #628]	; 0x274
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002a34:	f8cd a010 	str.w	sl, [sp, #16]
 8002a38:	f8cd 9014 	str.w	r9, [sp, #20]
 8002a3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002a40:	f8cd c01c 	str.w	ip, [sp, #28]
 8002a44:	f7ff bbe4 	b.w	8002210 <compteur+0x8a0>
		if (compteur == 1) {
 8002a48:	2c01      	cmp	r4, #1
 8002a4a:	f43f af41 	beq.w	80028d0 <compteur+0xf60>
		if (compteur == 0) {
 8002a4e:	2c00      	cmp	r4, #0
 8002a50:	f47f abe8 	bne.w	8002224 <compteur+0x8b4>
			RGB number = White;
 8002a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002a58:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8002a5c:	940b      	str	r4, [sp, #44]	; 0x2c
 8002a5e:	940c      	str	r4, [sp, #48]	; 0x30
 8002a60:	940d      	str	r4, [sp, #52]	; 0x34
 8002a62:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002a66:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8002a6a:	9411      	str	r4, [sp, #68]	; 0x44
 8002a6c:	9412      	str	r4, [sp, #72]	; 0x48
 8002a6e:	9413      	str	r4, [sp, #76]	; 0x4c
 8002a70:	9414      	str	r4, [sp, #80]	; 0x50
 8002a72:	9415      	str	r4, [sp, #84]	; 0x54
 8002a74:	9416      	str	r4, [sp, #88]	; 0x58
 8002a76:	9417      	str	r4, [sp, #92]	; 0x5c
 8002a78:	9418      	str	r4, [sp, #96]	; 0x60
 8002a7a:	9419      	str	r4, [sp, #100]	; 0x64
			RGB number = White;
 8002a7c:	ab01      	add	r3, sp, #4
			RGB tabline_1[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002a7e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_2[7] = { bckgrd, number, number, bckgrd, number, number,bckgrd };
 8002a82:	f10d 0e8c 	add.w	lr, sp, #140	; 0x8c
			RGB number = White;
 8002a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			RGB tabline_1[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002a8a:	941d      	str	r4, [sp, #116]	; 0x74
 8002a8c:	941e      	str	r4, [sp, #120]	; 0x78
 8002a8e:	941f      	str	r4, [sp, #124]	; 0x7c
			RGB tabline_2[7] = { bckgrd, number, number, bckgrd, number, number,bckgrd };
 8002a90:	9420      	str	r4, [sp, #128]	; 0x80
 8002a92:	9421      	str	r4, [sp, #132]	; 0x84
 8002a94:	9422      	str	r4, [sp, #136]	; 0x88
 8002a96:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002a9a:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
 8002a9e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002aa2:	f10d 0eb0 	add.w	lr, sp, #176	; 0xb0
 8002aa6:	9429      	str	r4, [sp, #164]	; 0xa4
 8002aa8:	942a      	str	r4, [sp, #168]	; 0xa8
 8002aaa:	942b      	str	r4, [sp, #172]	; 0xac
 8002aac:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002ab0:	f10d 0ebc 	add.w	lr, sp, #188	; 0xbc
 8002ab4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_3[7] = { bckgrd, number, bckgrd, number, bckgrd, number,bckgrd };
 8002ab8:	f10d 0ee0 	add.w	lr, sp, #224	; 0xe0
 8002abc:	9435      	str	r4, [sp, #212]	; 0xd4
 8002abe:	9436      	str	r4, [sp, #216]	; 0xd8
 8002ac0:	9437      	str	r4, [sp, #220]	; 0xdc
 8002ac2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002ac6:	f10d 0ef8 	add.w	lr, sp, #248	; 0xf8
 8002aca:	943b      	str	r4, [sp, #236]	; 0xec
 8002acc:	943c      	str	r4, [sp, #240]	; 0xf0
 8002ace:	943d      	str	r4, [sp, #244]	; 0xf4
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002ad0:	f50d 7a9a 	add.w	sl, sp, #308	; 0x134
			RGB tabline_3[7] = { bckgrd, number, bckgrd, number, bckgrd, number,bckgrd };
 8002ad4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002ad8:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
			RGB tabline_2[7] = { bckgrd, number, number, bckgrd, number, number,bckgrd };
 8002adc:	9432      	str	r4, [sp, #200]	; 0xc8
 8002ade:	9433      	str	r4, [sp, #204]	; 0xcc
 8002ae0:	9434      	str	r4, [sp, #208]	; 0xd0
			RGB tabline_3[7] = { bckgrd, number, bckgrd, number, bckgrd, number,bckgrd };
 8002ae2:	9441      	str	r4, [sp, #260]	; 0x104
 8002ae4:	9442      	str	r4, [sp, #264]	; 0x108
 8002ae6:	9443      	str	r4, [sp, #268]	; 0x10c
 8002ae8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002aec:	944a      	str	r4, [sp, #296]	; 0x128
 8002aee:	944b      	str	r4, [sp, #300]	; 0x12c
 8002af0:	944c      	str	r4, [sp, #304]	; 0x130
 8002af2:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8002af6:	f50d 7ab2 	add.w	sl, sp, #356	; 0x164
 8002afa:	9450      	str	r4, [sp, #320]	; 0x140
 8002afc:	9451      	str	r4, [sp, #324]	; 0x144
 8002afe:	9452      	str	r4, [sp, #328]	; 0x148
 8002b00:	9453      	str	r4, [sp, #332]	; 0x14c
 8002b02:	9454      	str	r4, [sp, #336]	; 0x150
 8002b04:	9455      	str	r4, [sp, #340]	; 0x154
 8002b06:	9456      	str	r4, [sp, #344]	; 0x158
 8002b08:	9457      	str	r4, [sp, #348]	; 0x15c
 8002b0a:	9458      	str	r4, [sp, #352]	; 0x160
 8002b0c:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b10:	f50d 7ac4 	add.w	sl, sp, #392	; 0x188
 8002b14:	945f      	str	r4, [sp, #380]	; 0x17c
 8002b16:	9460      	str	r4, [sp, #384]	; 0x180
 8002b18:	9461      	str	r4, [sp, #388]	; 0x184
 8002b1a:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8002b1e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
			RGB tabline_3[7] = { bckgrd, number, bckgrd, number, bckgrd, number,bckgrd };
 8002b22:	9447      	str	r4, [sp, #284]	; 0x11c
 8002b24:	9448      	str	r4, [sp, #288]	; 0x120
 8002b26:	9449      	str	r4, [sp, #292]	; 0x124
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b28:	945c      	str	r4, [sp, #368]	; 0x170
 8002b2a:	945d      	str	r4, [sp, #372]	; 0x174
 8002b2c:	945e      	str	r4, [sp, #376]	; 0x178
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b2e:	9465      	str	r4, [sp, #404]	; 0x194
 8002b30:	9466      	str	r4, [sp, #408]	; 0x198
 8002b32:	9467      	str	r4, [sp, #412]	; 0x19c
 8002b34:	9468      	str	r4, [sp, #416]	; 0x1a0
 8002b36:	9469      	str	r4, [sp, #420]	; 0x1a4
 8002b38:	946a      	str	r4, [sp, #424]	; 0x1a8
 8002b3a:	946b      	str	r4, [sp, #428]	; 0x1ac
 8002b3c:	946c      	str	r4, [sp, #432]	; 0x1b0
 8002b3e:	946d      	str	r4, [sp, #436]	; 0x1b4
 8002b40:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b44:	f50d 7aee 	add.w	sl, sp, #476	; 0x1dc
 8002b48:	9474      	str	r4, [sp, #464]	; 0x1d0
 8002b4a:	9475      	str	r4, [sp, #468]	; 0x1d4
 8002b4c:	9476      	str	r4, [sp, #472]	; 0x1d8
 8002b4e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8002b52:	f50d 7a03 	add.w	sl, sp, #524	; 0x20c
 8002b56:	947a      	str	r4, [sp, #488]	; 0x1e8
 8002b58:	947b      	str	r4, [sp, #492]	; 0x1ec
 8002b5a:	947c      	str	r4, [sp, #496]	; 0x1f0
 8002b5c:	947d      	str	r4, [sp, #500]	; 0x1f4
 8002b5e:	947e      	str	r4, [sp, #504]	; 0x1f8
 8002b60:	947f      	str	r4, [sp, #508]	; 0x1fc
 8002b62:	9480      	str	r4, [sp, #512]	; 0x200
 8002b64:	9481      	str	r4, [sp, #516]	; 0x204
 8002b66:	9482      	str	r4, [sp, #520]	; 0x208
 8002b68:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			RGB tabline_7[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b6c:	f50d 7a0c 	add.w	sl, sp, #560	; 0x230
			RGB tabline_1[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b70:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
			RGB tabline_2[7] = { bckgrd, number, number, bckgrd, number, number,bckgrd };
 8002b74:	f10d 0980 	add.w	r9, sp, #128	; 0x80
			RGB tabline_3[7] = { bckgrd, number, bckgrd, number, bckgrd, number,bckgrd };
 8002b78:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
			RGB tabline_4[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b7c:	f50d 7e94 	add.w	lr, sp, #296	; 0x128
			RGB tabline_5[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b80:	9471      	str	r4, [sp, #452]	; 0x1c4
 8002b82:	9472      	str	r4, [sp, #456]	; 0x1c8
 8002b84:	9473      	str	r4, [sp, #460]	; 0x1cc
			RGB tabline_6[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b86:	9486      	str	r4, [sp, #536]	; 0x218
 8002b88:	9487      	str	r4, [sp, #540]	; 0x21c
 8002b8a:	9488      	str	r4, [sp, #544]	; 0x220
			RGB tabline_7[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002b8c:	9489      	str	r4, [sp, #548]	; 0x224
 8002b8e:	948a      	str	r4, [sp, #552]	; 0x228
 8002b90:	948b      	str	r4, [sp, #556]	; 0x22c
 8002b92:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8002b96:	f50d 7a18 	add.w	sl, sp, #608	; 0x260
 8002b9a:	948f      	str	r4, [sp, #572]	; 0x23c
 8002b9c:	9490      	str	r4, [sp, #576]	; 0x240
 8002b9e:	9491      	str	r4, [sp, #580]	; 0x244
 8002ba0:	9492      	str	r4, [sp, #584]	; 0x248
 8002ba2:	9493      	str	r4, [sp, #588]	; 0x24c
 8002ba4:	9494      	str	r4, [sp, #592]	; 0x250
 8002ba6:	9495      	str	r4, [sp, #596]	; 0x254
 8002ba8:	9496      	str	r4, [sp, #600]	; 0x258
 8002baa:	9497      	str	r4, [sp, #604]	; 0x25c
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002bac:	f8cd c010 	str.w	ip, [sp, #16]
			RGB tabline_7[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002bb0:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002bb4:	f8cd 9014 	str.w	r9, [sp, #20]
			RGB tabline_7[7] = { bckgrd, number, bckgrd, bckgrd, bckgrd, number,bckgrd };
 8002bb8:	949b      	str	r4, [sp, #620]	; 0x26c
 8002bba:	949c      	str	r4, [sp, #624]	; 0x270
 8002bbc:	949d      	str	r4, [sp, #628]	; 0x274
			RGB *matrice[7] = { tabline_1, tabline_2, tabline_3, tabline_4,tabline_5, tabline_6, tabline_7 };
 8002bbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8002bc2:	f8cd e01c 	str.w	lr, [sp, #28]
 8002bc6:	f7ff bb23 	b.w	8002210 <compteur+0x8a0>
 8002bca:	bf00      	nop

08002bcc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bcc:	b530      	push	{r4, r5, lr}
 8002bce:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bd0:	2230      	movs	r2, #48	; 0x30
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	a808      	add	r0, sp, #32
 8002bd6:	f000 fac5 	bl	8003164 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2214      	movs	r2, #20
 8002bde:	a803      	add	r0, sp, #12
 8002be0:	f000 fac0 	bl	8003164 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8002be4:	2400      	movs	r4, #0
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <SystemClock_Config+0x90>)
 8002be8:	9401      	str	r4, [sp, #4]
 8002bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	9b01      	ldr	r3, [sp, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <SystemClock_Config+0x94>)
 8002bfe:	9402      	str	r4, [sp, #8]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c0e:	9302      	str	r3, [sp, #8]
 8002c10:	9b02      	ldr	r3, [sp, #8]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c16:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002c1a:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c20:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002c22:	2304      	movs	r3, #4
 8002c24:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002c26:	23a8      	movs	r3, #168	; 0xa8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c28:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002c2a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c2c:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c2e:	2307      	movs	r3, #7
 8002c30:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c32:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c34:	9512      	str	r5, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c36:	f7fe f8e3 	bl	8000e00 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c3a:	230f      	movs	r3, #15
 8002c3c:	9303      	str	r3, [sp, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c42:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002c44:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002c4a:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c4c:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4e:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c50:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002c52:	f7fe faa9 	bl	80011a8 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 8002c56:	b015      	add	sp, #84	; 0x54
 8002c58:	bd30      	pop	{r4, r5, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000

08002c64 <main>:
int main(void) {
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
	HAL_Init();
 8002c68:	f7fd fcc6 	bl	80005f8 <HAL_Init>
	SystemClock_Config();
 8002c6c:	f7ff ffae 	bl	8002bcc <SystemClock_Config>
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c70:	2214      	movs	r2, #20
 8002c72:	2100      	movs	r1, #0
 8002c74:	a807      	add	r0, sp, #28
 8002c76:	f000 fa75 	bl	8003164 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002c7a:	2400      	movs	r4, #0
 8002c7c:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <main+0x188>)
 8002c7e:	9401      	str	r4, [sp, #4]
 8002c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002c82:	485b      	ldr	r0, [pc, #364]	; (8002df0 <main+0x18c>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002c84:	f042 0204 	orr.w	r2, r2, #4
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8c:	f002 0204 	and.w	r2, r2, #4
 8002c90:	9201      	str	r2, [sp, #4]
 8002c92:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8002c94:	9402      	str	r4, [sp, #8]
 8002c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002ca4:	9202      	str	r2, [sp, #8]
 8002ca6:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002ca8:	9403      	str	r4, [sp, #12]
 8002caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb4:	f002 0201 	and.w	r2, r2, #1
 8002cb8:	9203      	str	r2, [sp, #12]
 8002cba:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002cbc:	9404      	str	r4, [sp, #16]
 8002cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc0:	f042 0202 	orr.w	r2, r2, #2
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc8:	f002 0202 	and.w	r2, r2, #2
 8002ccc:	9204      	str	r2, [sp, #16]
 8002cce:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8002cd0:	9405      	str	r4, [sp, #20]
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd4:	f042 0208 	orr.w	r2, r2, #8
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cdc:	f002 0208 	and.w	r2, r2, #8
 8002ce0:	9205      	str	r2, [sp, #20]
 8002ce2:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE()
 8002ce4:	9406      	str	r4, [sp, #24]
 8002ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002cf4:	4622      	mov	r2, r4
	__HAL_RCC_GPIOG_CLK_ENABLE()
 8002cf6:	9306      	str	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002cf8:	f244 0181 	movw	r1, #16513	; 0x4081
	__HAL_RCC_GPIOG_CLK_ENABLE()
 8002cfc:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002cfe:	f7fd fff3 	bl	8000ce8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8002d02:	4622      	mov	r2, r4
 8002d04:	2140      	movs	r1, #64	; 0x40
 8002d06:	483b      	ldr	r0, [pc, #236]	; (8002df4 <main+0x190>)
 8002d08:	f7fd ffee 	bl	8000ce8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d10:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002d12:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d14:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <main+0x194>)
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002d16:	4839      	ldr	r0, [pc, #228]	; (8002dfc <main+0x198>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d18:	9308      	str	r3, [sp, #32]

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1a:	2501      	movs	r5, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f7fd fef1 	bl	8000b04 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8002d22:	f244 0381 	movw	r3, #16513	; 0x4081
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	a907      	add	r1, sp, #28
 8002d28:	4831      	ldr	r0, [pc, #196]	; (8002df0 <main+0x18c>)
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8002d2a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d30:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d32:	f7fd fee7 	bl	8000b04 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d36:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d38:	a907      	add	r1, sp, #28
 8002d3a:	482e      	ldr	r0, [pc, #184]	; (8002df4 <main+0x190>)
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d3c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	940a      	str	r4, [sp, #40]	; 0x28

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d42:	2680      	movs	r6, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d44:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d46:	f7fd fedd 	bl	8000b04 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	a907      	add	r1, sp, #28
 8002d4c:	4829      	ldr	r0, [pc, #164]	; (8002df4 <main+0x190>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4e:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d52:	9607      	str	r6, [sp, #28]
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f7fd fed6 	bl	8000b04 <HAL_GPIO_Init>
	heth.Instance = ETH;
 8002d58:	4829      	ldr	r0, [pc, #164]	; (8002e00 <main+0x19c>)
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <main+0x1a0>)
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002d5c:	8204      	strh	r4, [r0, #16]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002d5e:	e880 0028 	stmia.w	r0, {r3, r5}
	heth.Init.MACAddr[0] = 0x00;
 8002d62:	6943      	ldr	r3, [r0, #20]
 8002d64:	701c      	strb	r4, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 8002d66:	6943      	ldr	r3, [r0, #20]
 8002d68:	705e      	strb	r6, [r3, #1]
	heth.Init.MACAddr[2] = 0xE1;
 8002d6a:	6943      	ldr	r3, [r0, #20]
 8002d6c:	22e1      	movs	r2, #225	; 0xe1
 8002d6e:	709a      	strb	r2, [r3, #2]
	heth.Init.MACAddr[3] = 0x00;
 8002d70:	6943      	ldr	r3, [r0, #20]
 8002d72:	70dc      	strb	r4, [r3, #3]
	heth.Init.MACAddr[4] = 0x00;
 8002d74:	6943      	ldr	r3, [r0, #20]
 8002d76:	711c      	strb	r4, [r3, #4]
	heth.Init.MACAddr[5] = 0x00;
 8002d78:	6943      	ldr	r3, [r0, #20]
 8002d7a:	715c      	strb	r4, [r3, #5]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002d7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002d80:	6184      	str	r4, [r0, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002d82:	61c4      	str	r4, [r0, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002d84:	6203      	str	r3, [r0, #32]
	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8002d86:	f7fd fdc1 	bl	800090c <HAL_ETH_Init>
	huart3.Instance = USART3;
 8002d8a:	481f      	ldr	r0, [pc, #124]	; (8002e08 <main+0x1a4>)
	huart3.Init.BaudRate = 115200;
 8002d8c:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <main+0x1a8>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	6084      	str	r4, [r0, #8]
	huart3.Init.BaudRate = 115200;
 8002d90:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d94:	e880 000c 	stmia.w	r0, {r2, r3}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002d98:	230c      	movs	r3, #12
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002d9a:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002d9c:	6104      	str	r4, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002d9e:	6143      	str	r3, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da0:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da2:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002da4:	f7fe fb58 	bl	8001458 <HAL_UART_Init>
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002da8:	4819      	ldr	r0, [pc, #100]	; (8002e10 <main+0x1ac>)
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002daa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002dae:	2304      	movs	r3, #4
 8002db0:	e880 000a 	stmia.w	r0, {r1, r3}
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002db4:	2302      	movs	r3, #2
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002db6:	6104      	str	r4, [r0, #16]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002db8:	6204      	str	r4, [r0, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002dba:	6244      	str	r4, [r0, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002dbc:	6304      	str	r4, [r0, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002dbe:	60c3      	str	r3, [r0, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002dc0:	6183      	str	r3, [r0, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002dc2:	61c5      	str	r5, [r0, #28]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002dc4:	62c5      	str	r5, [r0, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8002dc6:	f7fd ff94 	bl	8000cf2 <HAL_PCD_Init>
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){
 8002dca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002dce:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
 8002dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f7fd ff80 	bl	8000cdc <HAL_GPIO_ReadPin>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d0f8      	beq.n	8002dd2 <main+0x16e>
			ResetAllBlack();
 8002de0:	f7fe fd94 	bl	800190c <ResetAllBlack>
			compteur(TabSize);
 8002de4:	2007      	movs	r0, #7
 8002de6:	f7fe fdc3 	bl	8001970 <compteur>
 8002dea:	e7f2      	b.n	8002dd2 <main+0x16e>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020400 	.word	0x40020400
 8002df4:	40021800 	.word	0x40021800
 8002df8:	10110000 	.word	0x10110000
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	200004e4 	.word	0x200004e4
 8002e04:	40028000 	.word	0x40028000
 8002e08:	2000009c 	.word	0x2000009c
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	200000dc 	.word	0x200000dc

08002e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e14:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_MspInit+0x34>)
 8002e18:	2100      	movs	r1, #0
 8002e1a:	9100      	str	r1, [sp, #0]
 8002e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44
 8002e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e26:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	9101      	str	r1, [sp, #4]
 8002e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e42:	b002      	add	sp, #8
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	4604      	mov	r4, r0
 8002e50:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	2214      	movs	r2, #20
 8002e54:	2100      	movs	r1, #0
 8002e56:	a807      	add	r0, sp, #28
 8002e58:	f000 f984 	bl	8003164 <memset>
  if(heth->Instance==ETH)
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_ETH_MspInit+0x108>)
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d174      	bne.n	8002f4e <HAL_ETH_MspInit+0x102>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002e64:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8002e68:	2400      	movs	r4, #0
 8002e6a:	9400      	str	r4, [sp, #0]
 8002e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6e:	483a      	ldr	r0, [pc, #232]	; (8002f58 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8002e70:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
 8002e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e78:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002e7c:	9200      	str	r2, [sp, #0]
 8002e7e:	9a00      	ldr	r2, [sp, #0]
 8002e80:	9401      	str	r4, [sp, #4]
 8002e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e84:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002e90:	9201      	str	r2, [sp, #4]
 8002e92:	9a01      	ldr	r2, [sp, #4]
 8002e94:	9402      	str	r4, [sp, #8]
 8002e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e98:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ea4:	9202      	str	r2, [sp, #8]
 8002ea6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea8:	9403      	str	r4, [sp, #12]
 8002eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eac:	f042 0204 	orr.w	r2, r2, #4
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb4:	f002 0204 	and.w	r2, r2, #4
 8002eb8:	9203      	str	r2, [sp, #12]
 8002eba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	9404      	str	r4, [sp, #16]
 8002ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec8:	f002 0201 	and.w	r2, r2, #1
 8002ecc:	9204      	str	r2, [sp, #16]
 8002ece:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed0:	9405      	str	r4, [sp, #20]
 8002ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed4:	f042 0202 	orr.w	r2, r2, #2
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002edc:	f002 0202 	and.w	r2, r2, #2
 8002ee0:	9205      	str	r2, [sp, #20]
 8002ee2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ee4:	9406      	str	r4, [sp, #24]
 8002ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002efa:	250b      	movs	r5, #11
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002efc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002f00:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f02:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002f04:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f06:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f08:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0a:	f7fd fdfb 	bl	8000b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002f0e:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	a907      	add	r1, sp, #28
 8002f12:	4812      	ldr	r0, [pc, #72]	; (8002f5c <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002f14:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f1c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1e:	f7fd fdf1 	bl	8000b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002f26:	a907      	add	r1, sp, #28
 8002f28:	480d      	ldr	r0, [pc, #52]	; (8002f60 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002f2a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f30:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f32:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002f34:	f7fd fde6 	bl	8000b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002f38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f3c:	a907      	add	r1, sp, #28
 8002f3e:	4809      	ldr	r0, [pc, #36]	; (8002f64 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002f40:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f48:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f4a:	f7fd fddb 	bl	8000b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002f4e:	b00d      	add	sp, #52	; 0x34
 8002f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40028000 	.word	0x40028000
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40021800 	.word	0x40021800

08002f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6e:	2214      	movs	r2, #20
 8002f70:	2100      	movs	r1, #0
 8002f72:	a803      	add	r0, sp, #12
 8002f74:	f000 f8f6 	bl	8003164 <memset>
  if(huart->Instance==USART3)
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_UART_MspInit+0x64>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d123      	bne.n	8002fc8 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f80:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002f84:	2100      	movs	r1, #0
 8002f86:	9101      	str	r1, [sp, #4]
 8002f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f8a:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
 8002f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f94:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002f98:	9201      	str	r2, [sp, #4]
 8002f9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f9c:	9102      	str	r1, [sp, #8]
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa0:	f042 0208 	orr.w	r2, r2, #8
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002fb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fbe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc4:	f7fd fd9e 	bl	8000b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fc8:	b008      	add	sp, #32
 8002fca:	bd10      	pop	{r4, pc}
 8002fcc:	40004800 	.word	0x40004800
 8002fd0:	40020c00 	.word	0x40020c00

08002fd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002fd4:	b530      	push	{r4, r5, lr}
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fda:	2214      	movs	r2, #20
 8002fdc:	2100      	movs	r1, #0
 8002fde:	a803      	add	r0, sp, #12
 8002fe0:	f000 f8c0 	bl	8003164 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fea:	d12f      	bne.n	800304c <HAL_PCD_MspInit+0x78>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	4c18      	ldr	r4, [pc, #96]	; (8003050 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fee:	4819      	ldr	r0, [pc, #100]	; (8003054 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff0:	2500      	movs	r5, #0
 8002ff2:	9501      	str	r5, [sp, #4]
 8002ff4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8002ffc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003006:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800300a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003016:	230a      	movs	r3, #10
 8003018:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301a:	f7fd fd73 	bl	8000b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800301e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003022:	a903      	add	r1, sp, #12
 8003024:	480b      	ldr	r0, [pc, #44]	; (8003054 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003026:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003028:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800302c:	f7fd fd6a 	bl	8000b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	6363      	str	r3, [r4, #52]	; 0x34
 8003038:	9502      	str	r5, [sp, #8]
 800303a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800303c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003040:	6463      	str	r3, [r4, #68]	; 0x44
 8003042:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	9302      	str	r3, [sp, #8]
 800304a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800304c:	b009      	add	sp, #36	; 0x24
 800304e:	bd30      	pop	{r4, r5, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	40020000 	.word	0x40020000

08003058 <NMI_Handler>:
 8003058:	4770      	bx	lr

0800305a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305a:	e7fe      	b.n	800305a <HardFault_Handler>

0800305c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800305c:	e7fe      	b.n	800305c <MemManage_Handler>

0800305e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305e:	e7fe      	b.n	800305e <BusFault_Handler>

08003060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003060:	e7fe      	b.n	8003060 <UsageFault_Handler>

08003062 <SVC_Handler>:
 8003062:	4770      	bx	lr

08003064 <DebugMon_Handler>:
 8003064:	4770      	bx	lr

08003066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003066:	4770      	bx	lr

08003068 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003068:	f7fd bae0 	b.w	800062c <HAL_IncTick>

0800306c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800306c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <_sbrk+0x2c>)
 8003070:	6819      	ldr	r1, [r3, #0]
{
 8003072:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003074:	b909      	cbnz	r1, 800307a <_sbrk+0xe>
		heap_end = &end;
 8003076:	4909      	ldr	r1, [pc, #36]	; (800309c <_sbrk+0x30>)
 8003078:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800307a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800307c:	4669      	mov	r1, sp
 800307e:	4402      	add	r2, r0
 8003080:	428a      	cmp	r2, r1
 8003082:	d906      	bls.n	8003092 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003084:	f000 f844 	bl	8003110 <__errno>
 8003088:	230c      	movs	r3, #12
 800308a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800308c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003090:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003092:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003094:	bd08      	pop	{r3, pc}
 8003096:	bf00      	nop
 8003098:	2000008c 	.word	0x2000008c
 800309c:	20000530 	.word	0x20000530

080030a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <SystemInit+0x18>)
 80030a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030a6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80030aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80030bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030c2:	e003      	b.n	80030cc <LoopCopyDataInit>

080030c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030ca:	3104      	adds	r1, #4

080030cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030cc:	480b      	ldr	r0, [pc, #44]	; (80030fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030d4:	d3f6      	bcc.n	80030c4 <CopyDataInit>
  ldr  r2, =_sbss
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030d8:	e002      	b.n	80030e0 <LoopFillZerobss>

080030da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030dc:	f842 3b04 	str.w	r3, [r2], #4

080030e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030e4:	d3f9      	bcc.n	80030da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030e6:	f7ff ffdb 	bl	80030a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ea:	f000 f817 	bl	800311c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ee:	f7ff fdb9 	bl	8002c64 <main>
  bx  lr    
 80030f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80030f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80030f8:	08003a68 	.word	0x08003a68
  ldr  r0, =_sdata
 80030fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003100:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003104:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003108:	20000530 	.word	0x20000530

0800310c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800310c:	e7fe      	b.n	800310c <ADC_IRQHandler>
	...

08003110 <__errno>:
 8003110:	4b01      	ldr	r3, [pc, #4]	; (8003118 <__errno+0x8>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000000c 	.word	0x2000000c

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	4e0d      	ldr	r6, [pc, #52]	; (8003154 <__libc_init_array+0x38>)
 8003120:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003122:	1ba4      	subs	r4, r4, r6
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	2500      	movs	r5, #0
 8003128:	42a5      	cmp	r5, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	4e0b      	ldr	r6, [pc, #44]	; (800315c <__libc_init_array+0x40>)
 800312e:	4c0c      	ldr	r4, [pc, #48]	; (8003160 <__libc_init_array+0x44>)
 8003130:	f000 fc3e 	bl	80039b0 <_init>
 8003134:	1ba4      	subs	r4, r4, r6
 8003136:	10a4      	asrs	r4, r4, #2
 8003138:	2500      	movs	r5, #0
 800313a:	42a5      	cmp	r5, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003144:	4798      	blx	r3
 8003146:	3501      	adds	r5, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800314e:	4798      	blx	r3
 8003150:	3501      	adds	r5, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	08003a60 	.word	0x08003a60
 8003158:	08003a60 	.word	0x08003a60
 800315c:	08003a60 	.word	0x08003a60
 8003160:	08003a64 	.word	0x08003a64

08003164 <memset>:
 8003164:	4402      	add	r2, r0
 8003166:	4603      	mov	r3, r0
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <memset+0xa>
 800316c:	4770      	bx	lr
 800316e:	f803 1b01 	strb.w	r1, [r3], #1
 8003172:	e7f9      	b.n	8003168 <memset+0x4>

08003174 <siprintf>:
 8003174:	b40e      	push	{r1, r2, r3}
 8003176:	b500      	push	{lr}
 8003178:	b09c      	sub	sp, #112	; 0x70
 800317a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800317e:	ab1d      	add	r3, sp, #116	; 0x74
 8003180:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003184:	9002      	str	r0, [sp, #8]
 8003186:	9006      	str	r0, [sp, #24]
 8003188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800318c:	480a      	ldr	r0, [pc, #40]	; (80031b8 <siprintf+0x44>)
 800318e:	9104      	str	r1, [sp, #16]
 8003190:	9107      	str	r1, [sp, #28]
 8003192:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003196:	f853 2b04 	ldr.w	r2, [r3], #4
 800319a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	a902      	add	r1, sp, #8
 80031a4:	f000 f866 	bl	8003274 <_svfiprintf_r>
 80031a8:	9b02      	ldr	r3, [sp, #8]
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	b01c      	add	sp, #112	; 0x70
 80031b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b4:	b003      	add	sp, #12
 80031b6:	4770      	bx	lr
 80031b8:	2000000c 	.word	0x2000000c

080031bc <__ssputs_r>:
 80031bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	688e      	ldr	r6, [r1, #8]
 80031c2:	429e      	cmp	r6, r3
 80031c4:	4682      	mov	sl, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	4691      	mov	r9, r2
 80031ca:	4698      	mov	r8, r3
 80031cc:	d835      	bhi.n	800323a <__ssputs_r+0x7e>
 80031ce:	898a      	ldrh	r2, [r1, #12]
 80031d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d4:	d031      	beq.n	800323a <__ssputs_r+0x7e>
 80031d6:	6825      	ldr	r5, [r4, #0]
 80031d8:	6909      	ldr	r1, [r1, #16]
 80031da:	1a6f      	subs	r7, r5, r1
 80031dc:	6965      	ldr	r5, [r4, #20]
 80031de:	2302      	movs	r3, #2
 80031e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80031e8:	f108 0301 	add.w	r3, r8, #1
 80031ec:	443b      	add	r3, r7
 80031ee:	429d      	cmp	r5, r3
 80031f0:	bf38      	it	cc
 80031f2:	461d      	movcc	r5, r3
 80031f4:	0553      	lsls	r3, r2, #21
 80031f6:	d531      	bpl.n	800325c <__ssputs_r+0xa0>
 80031f8:	4629      	mov	r1, r5
 80031fa:	f000 fb39 	bl	8003870 <_malloc_r>
 80031fe:	4606      	mov	r6, r0
 8003200:	b950      	cbnz	r0, 8003218 <__ssputs_r+0x5c>
 8003202:	230c      	movs	r3, #12
 8003204:	f8ca 3000 	str.w	r3, [sl]
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	463a      	mov	r2, r7
 800321a:	6921      	ldr	r1, [r4, #16]
 800321c:	f000 fab4 	bl	8003788 <memcpy>
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	6126      	str	r6, [r4, #16]
 800322e:	6165      	str	r5, [r4, #20]
 8003230:	443e      	add	r6, r7
 8003232:	1bed      	subs	r5, r5, r7
 8003234:	6026      	str	r6, [r4, #0]
 8003236:	60a5      	str	r5, [r4, #8]
 8003238:	4646      	mov	r6, r8
 800323a:	4546      	cmp	r6, r8
 800323c:	bf28      	it	cs
 800323e:	4646      	movcs	r6, r8
 8003240:	4632      	mov	r2, r6
 8003242:	4649      	mov	r1, r9
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	f000 faaa 	bl	800379e <memmove>
 800324a:	68a3      	ldr	r3, [r4, #8]
 800324c:	1b9b      	subs	r3, r3, r6
 800324e:	60a3      	str	r3, [r4, #8]
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	441e      	add	r6, r3
 8003254:	6026      	str	r6, [r4, #0]
 8003256:	2000      	movs	r0, #0
 8003258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325c:	462a      	mov	r2, r5
 800325e:	f000 fb65 	bl	800392c <_realloc_r>
 8003262:	4606      	mov	r6, r0
 8003264:	2800      	cmp	r0, #0
 8003266:	d1e1      	bne.n	800322c <__ssputs_r+0x70>
 8003268:	6921      	ldr	r1, [r4, #16]
 800326a:	4650      	mov	r0, sl
 800326c:	f000 fab2 	bl	80037d4 <_free_r>
 8003270:	e7c7      	b.n	8003202 <__ssputs_r+0x46>
	...

08003274 <_svfiprintf_r>:
 8003274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003278:	b09d      	sub	sp, #116	; 0x74
 800327a:	4680      	mov	r8, r0
 800327c:	9303      	str	r3, [sp, #12]
 800327e:	898b      	ldrh	r3, [r1, #12]
 8003280:	061c      	lsls	r4, r3, #24
 8003282:	460d      	mov	r5, r1
 8003284:	4616      	mov	r6, r2
 8003286:	d50f      	bpl.n	80032a8 <_svfiprintf_r+0x34>
 8003288:	690b      	ldr	r3, [r1, #16]
 800328a:	b96b      	cbnz	r3, 80032a8 <_svfiprintf_r+0x34>
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	f000 faef 	bl	8003870 <_malloc_r>
 8003292:	6028      	str	r0, [r5, #0]
 8003294:	6128      	str	r0, [r5, #16]
 8003296:	b928      	cbnz	r0, 80032a4 <_svfiprintf_r+0x30>
 8003298:	230c      	movs	r3, #12
 800329a:	f8c8 3000 	str.w	r3, [r8]
 800329e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a2:	e0c5      	b.n	8003430 <_svfiprintf_r+0x1bc>
 80032a4:	2340      	movs	r3, #64	; 0x40
 80032a6:	616b      	str	r3, [r5, #20]
 80032a8:	2300      	movs	r3, #0
 80032aa:	9309      	str	r3, [sp, #36]	; 0x24
 80032ac:	2320      	movs	r3, #32
 80032ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b2:	2330      	movs	r3, #48	; 0x30
 80032b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032b8:	f04f 0b01 	mov.w	fp, #1
 80032bc:	4637      	mov	r7, r6
 80032be:	463c      	mov	r4, r7
 80032c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13c      	bne.n	8003342 <_svfiprintf_r+0xce>
 80032c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80032cc:	d00b      	beq.n	80032e6 <_svfiprintf_r+0x72>
 80032ce:	4653      	mov	r3, sl
 80032d0:	4632      	mov	r2, r6
 80032d2:	4629      	mov	r1, r5
 80032d4:	4640      	mov	r0, r8
 80032d6:	f7ff ff71 	bl	80031bc <__ssputs_r>
 80032da:	3001      	adds	r0, #1
 80032dc:	f000 80a3 	beq.w	8003426 <_svfiprintf_r+0x1b2>
 80032e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e2:	4453      	add	r3, sl
 80032e4:	9309      	str	r3, [sp, #36]	; 0x24
 80032e6:	783b      	ldrb	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 809c 	beq.w	8003426 <_svfiprintf_r+0x1b2>
 80032ee:	2300      	movs	r3, #0
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	9307      	str	r3, [sp, #28]
 80032f8:	9205      	str	r2, [sp, #20]
 80032fa:	9306      	str	r3, [sp, #24]
 80032fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003300:	931a      	str	r3, [sp, #104]	; 0x68
 8003302:	2205      	movs	r2, #5
 8003304:	7821      	ldrb	r1, [r4, #0]
 8003306:	4850      	ldr	r0, [pc, #320]	; (8003448 <_svfiprintf_r+0x1d4>)
 8003308:	f7fc ff7a 	bl	8000200 <memchr>
 800330c:	1c67      	adds	r7, r4, #1
 800330e:	9b04      	ldr	r3, [sp, #16]
 8003310:	b9d8      	cbnz	r0, 800334a <_svfiprintf_r+0xd6>
 8003312:	06d9      	lsls	r1, r3, #27
 8003314:	bf44      	itt	mi
 8003316:	2220      	movmi	r2, #32
 8003318:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800331c:	071a      	lsls	r2, r3, #28
 800331e:	bf44      	itt	mi
 8003320:	222b      	movmi	r2, #43	; 0x2b
 8003322:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003326:	7822      	ldrb	r2, [r4, #0]
 8003328:	2a2a      	cmp	r2, #42	; 0x2a
 800332a:	d016      	beq.n	800335a <_svfiprintf_r+0xe6>
 800332c:	9a07      	ldr	r2, [sp, #28]
 800332e:	2100      	movs	r1, #0
 8003330:	200a      	movs	r0, #10
 8003332:	4627      	mov	r7, r4
 8003334:	3401      	adds	r4, #1
 8003336:	783b      	ldrb	r3, [r7, #0]
 8003338:	3b30      	subs	r3, #48	; 0x30
 800333a:	2b09      	cmp	r3, #9
 800333c:	d951      	bls.n	80033e2 <_svfiprintf_r+0x16e>
 800333e:	b1c9      	cbz	r1, 8003374 <_svfiprintf_r+0x100>
 8003340:	e011      	b.n	8003366 <_svfiprintf_r+0xf2>
 8003342:	2b25      	cmp	r3, #37	; 0x25
 8003344:	d0c0      	beq.n	80032c8 <_svfiprintf_r+0x54>
 8003346:	4627      	mov	r7, r4
 8003348:	e7b9      	b.n	80032be <_svfiprintf_r+0x4a>
 800334a:	4a3f      	ldr	r2, [pc, #252]	; (8003448 <_svfiprintf_r+0x1d4>)
 800334c:	1a80      	subs	r0, r0, r2
 800334e:	fa0b f000 	lsl.w	r0, fp, r0
 8003352:	4318      	orrs	r0, r3
 8003354:	9004      	str	r0, [sp, #16]
 8003356:	463c      	mov	r4, r7
 8003358:	e7d3      	b.n	8003302 <_svfiprintf_r+0x8e>
 800335a:	9a03      	ldr	r2, [sp, #12]
 800335c:	1d11      	adds	r1, r2, #4
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	9103      	str	r1, [sp, #12]
 8003362:	2a00      	cmp	r2, #0
 8003364:	db01      	blt.n	800336a <_svfiprintf_r+0xf6>
 8003366:	9207      	str	r2, [sp, #28]
 8003368:	e004      	b.n	8003374 <_svfiprintf_r+0x100>
 800336a:	4252      	negs	r2, r2
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	9207      	str	r2, [sp, #28]
 8003372:	9304      	str	r3, [sp, #16]
 8003374:	783b      	ldrb	r3, [r7, #0]
 8003376:	2b2e      	cmp	r3, #46	; 0x2e
 8003378:	d10e      	bne.n	8003398 <_svfiprintf_r+0x124>
 800337a:	787b      	ldrb	r3, [r7, #1]
 800337c:	2b2a      	cmp	r3, #42	; 0x2a
 800337e:	f107 0101 	add.w	r1, r7, #1
 8003382:	d132      	bne.n	80033ea <_svfiprintf_r+0x176>
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	1d1a      	adds	r2, r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	9203      	str	r2, [sp, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	bfb8      	it	lt
 8003390:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003394:	3702      	adds	r7, #2
 8003396:	9305      	str	r3, [sp, #20]
 8003398:	4c2c      	ldr	r4, [pc, #176]	; (800344c <_svfiprintf_r+0x1d8>)
 800339a:	7839      	ldrb	r1, [r7, #0]
 800339c:	2203      	movs	r2, #3
 800339e:	4620      	mov	r0, r4
 80033a0:	f7fc ff2e 	bl	8000200 <memchr>
 80033a4:	b138      	cbz	r0, 80033b6 <_svfiprintf_r+0x142>
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	1b00      	subs	r0, r0, r4
 80033aa:	fa03 f000 	lsl.w	r0, r3, r0
 80033ae:	9b04      	ldr	r3, [sp, #16]
 80033b0:	4303      	orrs	r3, r0
 80033b2:	9304      	str	r3, [sp, #16]
 80033b4:	3701      	adds	r7, #1
 80033b6:	7839      	ldrb	r1, [r7, #0]
 80033b8:	4825      	ldr	r0, [pc, #148]	; (8003450 <_svfiprintf_r+0x1dc>)
 80033ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033be:	2206      	movs	r2, #6
 80033c0:	1c7e      	adds	r6, r7, #1
 80033c2:	f7fc ff1d 	bl	8000200 <memchr>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d035      	beq.n	8003436 <_svfiprintf_r+0x1c2>
 80033ca:	4b22      	ldr	r3, [pc, #136]	; (8003454 <_svfiprintf_r+0x1e0>)
 80033cc:	b9fb      	cbnz	r3, 800340e <_svfiprintf_r+0x19a>
 80033ce:	9b03      	ldr	r3, [sp, #12]
 80033d0:	3307      	adds	r3, #7
 80033d2:	f023 0307 	bic.w	r3, r3, #7
 80033d6:	3308      	adds	r3, #8
 80033d8:	9303      	str	r3, [sp, #12]
 80033da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033dc:	444b      	add	r3, r9
 80033de:	9309      	str	r3, [sp, #36]	; 0x24
 80033e0:	e76c      	b.n	80032bc <_svfiprintf_r+0x48>
 80033e2:	fb00 3202 	mla	r2, r0, r2, r3
 80033e6:	2101      	movs	r1, #1
 80033e8:	e7a3      	b.n	8003332 <_svfiprintf_r+0xbe>
 80033ea:	2300      	movs	r3, #0
 80033ec:	9305      	str	r3, [sp, #20]
 80033ee:	4618      	mov	r0, r3
 80033f0:	240a      	movs	r4, #10
 80033f2:	460f      	mov	r7, r1
 80033f4:	3101      	adds	r1, #1
 80033f6:	783a      	ldrb	r2, [r7, #0]
 80033f8:	3a30      	subs	r2, #48	; 0x30
 80033fa:	2a09      	cmp	r2, #9
 80033fc:	d903      	bls.n	8003406 <_svfiprintf_r+0x192>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ca      	beq.n	8003398 <_svfiprintf_r+0x124>
 8003402:	9005      	str	r0, [sp, #20]
 8003404:	e7c8      	b.n	8003398 <_svfiprintf_r+0x124>
 8003406:	fb04 2000 	mla	r0, r4, r0, r2
 800340a:	2301      	movs	r3, #1
 800340c:	e7f1      	b.n	80033f2 <_svfiprintf_r+0x17e>
 800340e:	ab03      	add	r3, sp, #12
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	462a      	mov	r2, r5
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <_svfiprintf_r+0x1e4>)
 8003416:	a904      	add	r1, sp, #16
 8003418:	4640      	mov	r0, r8
 800341a:	f3af 8000 	nop.w
 800341e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003422:	4681      	mov	r9, r0
 8003424:	d1d9      	bne.n	80033da <_svfiprintf_r+0x166>
 8003426:	89ab      	ldrh	r3, [r5, #12]
 8003428:	065b      	lsls	r3, r3, #25
 800342a:	f53f af38 	bmi.w	800329e <_svfiprintf_r+0x2a>
 800342e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003430:	b01d      	add	sp, #116	; 0x74
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003436:	ab03      	add	r3, sp, #12
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	462a      	mov	r2, r5
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <_svfiprintf_r+0x1e4>)
 800343e:	a904      	add	r1, sp, #16
 8003440:	4640      	mov	r0, r8
 8003442:	f000 f881 	bl	8003548 <_printf_i>
 8003446:	e7ea      	b.n	800341e <_svfiprintf_r+0x1aa>
 8003448:	08003a24 	.word	0x08003a24
 800344c:	08003a2a 	.word	0x08003a2a
 8003450:	08003a2e 	.word	0x08003a2e
 8003454:	00000000 	.word	0x00000000
 8003458:	080031bd 	.word	0x080031bd

0800345c <_printf_common>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	4691      	mov	r9, r2
 8003462:	461f      	mov	r7, r3
 8003464:	688a      	ldr	r2, [r1, #8]
 8003466:	690b      	ldr	r3, [r1, #16]
 8003468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800346c:	4293      	cmp	r3, r2
 800346e:	bfb8      	it	lt
 8003470:	4613      	movlt	r3, r2
 8003472:	f8c9 3000 	str.w	r3, [r9]
 8003476:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800347a:	4606      	mov	r6, r0
 800347c:	460c      	mov	r4, r1
 800347e:	b112      	cbz	r2, 8003486 <_printf_common+0x2a>
 8003480:	3301      	adds	r3, #1
 8003482:	f8c9 3000 	str.w	r3, [r9]
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	0699      	lsls	r1, r3, #26
 800348a:	bf42      	ittt	mi
 800348c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003490:	3302      	addmi	r3, #2
 8003492:	f8c9 3000 	strmi.w	r3, [r9]
 8003496:	6825      	ldr	r5, [r4, #0]
 8003498:	f015 0506 	ands.w	r5, r5, #6
 800349c:	d107      	bne.n	80034ae <_printf_common+0x52>
 800349e:	f104 0a19 	add.w	sl, r4, #25
 80034a2:	68e3      	ldr	r3, [r4, #12]
 80034a4:	f8d9 2000 	ldr.w	r2, [r9]
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	429d      	cmp	r5, r3
 80034ac:	db29      	blt.n	8003502 <_printf_common+0xa6>
 80034ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	3300      	adds	r3, #0
 80034b6:	bf18      	it	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	0692      	lsls	r2, r2, #26
 80034bc:	d42e      	bmi.n	800351c <_printf_common+0xc0>
 80034be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034c2:	4639      	mov	r1, r7
 80034c4:	4630      	mov	r0, r6
 80034c6:	47c0      	blx	r8
 80034c8:	3001      	adds	r0, #1
 80034ca:	d021      	beq.n	8003510 <_printf_common+0xb4>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	68e5      	ldr	r5, [r4, #12]
 80034d0:	f8d9 2000 	ldr.w	r2, [r9]
 80034d4:	f003 0306 	and.w	r3, r3, #6
 80034d8:	2b04      	cmp	r3, #4
 80034da:	bf08      	it	eq
 80034dc:	1aad      	subeq	r5, r5, r2
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	6922      	ldr	r2, [r4, #16]
 80034e2:	bf0c      	ite	eq
 80034e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e8:	2500      	movne	r5, #0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfc4      	itt	gt
 80034ee:	1a9b      	subgt	r3, r3, r2
 80034f0:	18ed      	addgt	r5, r5, r3
 80034f2:	f04f 0900 	mov.w	r9, #0
 80034f6:	341a      	adds	r4, #26
 80034f8:	454d      	cmp	r5, r9
 80034fa:	d11b      	bne.n	8003534 <_printf_common+0xd8>
 80034fc:	2000      	movs	r0, #0
 80034fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003502:	2301      	movs	r3, #1
 8003504:	4652      	mov	r2, sl
 8003506:	4639      	mov	r1, r7
 8003508:	4630      	mov	r0, r6
 800350a:	47c0      	blx	r8
 800350c:	3001      	adds	r0, #1
 800350e:	d103      	bne.n	8003518 <_printf_common+0xbc>
 8003510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003518:	3501      	adds	r5, #1
 800351a:	e7c2      	b.n	80034a2 <_printf_common+0x46>
 800351c:	18e1      	adds	r1, r4, r3
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	2030      	movs	r0, #48	; 0x30
 8003522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003526:	4422      	add	r2, r4
 8003528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800352c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003530:	3302      	adds	r3, #2
 8003532:	e7c4      	b.n	80034be <_printf_common+0x62>
 8003534:	2301      	movs	r3, #1
 8003536:	4622      	mov	r2, r4
 8003538:	4639      	mov	r1, r7
 800353a:	4630      	mov	r0, r6
 800353c:	47c0      	blx	r8
 800353e:	3001      	adds	r0, #1
 8003540:	d0e6      	beq.n	8003510 <_printf_common+0xb4>
 8003542:	f109 0901 	add.w	r9, r9, #1
 8003546:	e7d7      	b.n	80034f8 <_printf_common+0x9c>

08003548 <_printf_i>:
 8003548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800354c:	4617      	mov	r7, r2
 800354e:	7e0a      	ldrb	r2, [r1, #24]
 8003550:	b085      	sub	sp, #20
 8003552:	2a6e      	cmp	r2, #110	; 0x6e
 8003554:	4698      	mov	r8, r3
 8003556:	4606      	mov	r6, r0
 8003558:	460c      	mov	r4, r1
 800355a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800355c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003560:	f000 80bc 	beq.w	80036dc <_printf_i+0x194>
 8003564:	d81a      	bhi.n	800359c <_printf_i+0x54>
 8003566:	2a63      	cmp	r2, #99	; 0x63
 8003568:	d02e      	beq.n	80035c8 <_printf_i+0x80>
 800356a:	d80a      	bhi.n	8003582 <_printf_i+0x3a>
 800356c:	2a00      	cmp	r2, #0
 800356e:	f000 80c8 	beq.w	8003702 <_printf_i+0x1ba>
 8003572:	2a58      	cmp	r2, #88	; 0x58
 8003574:	f000 808a 	beq.w	800368c <_printf_i+0x144>
 8003578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800357c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003580:	e02a      	b.n	80035d8 <_printf_i+0x90>
 8003582:	2a64      	cmp	r2, #100	; 0x64
 8003584:	d001      	beq.n	800358a <_printf_i+0x42>
 8003586:	2a69      	cmp	r2, #105	; 0x69
 8003588:	d1f6      	bne.n	8003578 <_printf_i+0x30>
 800358a:	6821      	ldr	r1, [r4, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003592:	d023      	beq.n	80035dc <_printf_i+0x94>
 8003594:	1d11      	adds	r1, r2, #4
 8003596:	6019      	str	r1, [r3, #0]
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	e027      	b.n	80035ec <_printf_i+0xa4>
 800359c:	2a73      	cmp	r2, #115	; 0x73
 800359e:	f000 80b4 	beq.w	800370a <_printf_i+0x1c2>
 80035a2:	d808      	bhi.n	80035b6 <_printf_i+0x6e>
 80035a4:	2a6f      	cmp	r2, #111	; 0x6f
 80035a6:	d02a      	beq.n	80035fe <_printf_i+0xb6>
 80035a8:	2a70      	cmp	r2, #112	; 0x70
 80035aa:	d1e5      	bne.n	8003578 <_printf_i+0x30>
 80035ac:	680a      	ldr	r2, [r1, #0]
 80035ae:	f042 0220 	orr.w	r2, r2, #32
 80035b2:	600a      	str	r2, [r1, #0]
 80035b4:	e003      	b.n	80035be <_printf_i+0x76>
 80035b6:	2a75      	cmp	r2, #117	; 0x75
 80035b8:	d021      	beq.n	80035fe <_printf_i+0xb6>
 80035ba:	2a78      	cmp	r2, #120	; 0x78
 80035bc:	d1dc      	bne.n	8003578 <_printf_i+0x30>
 80035be:	2278      	movs	r2, #120	; 0x78
 80035c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80035c4:	496e      	ldr	r1, [pc, #440]	; (8003780 <_printf_i+0x238>)
 80035c6:	e064      	b.n	8003692 <_printf_i+0x14a>
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80035ce:	1d11      	adds	r1, r2, #4
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035d8:	2301      	movs	r3, #1
 80035da:	e0a3      	b.n	8003724 <_printf_i+0x1dc>
 80035dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80035e0:	f102 0104 	add.w	r1, r2, #4
 80035e4:	6019      	str	r1, [r3, #0]
 80035e6:	d0d7      	beq.n	8003598 <_printf_i+0x50>
 80035e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da03      	bge.n	80035f8 <_printf_i+0xb0>
 80035f0:	222d      	movs	r2, #45	; 0x2d
 80035f2:	425b      	negs	r3, r3
 80035f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035f8:	4962      	ldr	r1, [pc, #392]	; (8003784 <_printf_i+0x23c>)
 80035fa:	220a      	movs	r2, #10
 80035fc:	e017      	b.n	800362e <_printf_i+0xe6>
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003606:	d003      	beq.n	8003610 <_printf_i+0xc8>
 8003608:	1d08      	adds	r0, r1, #4
 800360a:	6018      	str	r0, [r3, #0]
 800360c:	680b      	ldr	r3, [r1, #0]
 800360e:	e006      	b.n	800361e <_printf_i+0xd6>
 8003610:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003614:	f101 0004 	add.w	r0, r1, #4
 8003618:	6018      	str	r0, [r3, #0]
 800361a:	d0f7      	beq.n	800360c <_printf_i+0xc4>
 800361c:	880b      	ldrh	r3, [r1, #0]
 800361e:	4959      	ldr	r1, [pc, #356]	; (8003784 <_printf_i+0x23c>)
 8003620:	2a6f      	cmp	r2, #111	; 0x6f
 8003622:	bf14      	ite	ne
 8003624:	220a      	movne	r2, #10
 8003626:	2208      	moveq	r2, #8
 8003628:	2000      	movs	r0, #0
 800362a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800362e:	6865      	ldr	r5, [r4, #4]
 8003630:	60a5      	str	r5, [r4, #8]
 8003632:	2d00      	cmp	r5, #0
 8003634:	f2c0 809c 	blt.w	8003770 <_printf_i+0x228>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	f020 0004 	bic.w	r0, r0, #4
 800363e:	6020      	str	r0, [r4, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d13f      	bne.n	80036c4 <_printf_i+0x17c>
 8003644:	2d00      	cmp	r5, #0
 8003646:	f040 8095 	bne.w	8003774 <_printf_i+0x22c>
 800364a:	4675      	mov	r5, lr
 800364c:	2a08      	cmp	r2, #8
 800364e:	d10b      	bne.n	8003668 <_printf_i+0x120>
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	07da      	lsls	r2, r3, #31
 8003654:	d508      	bpl.n	8003668 <_printf_i+0x120>
 8003656:	6923      	ldr	r3, [r4, #16]
 8003658:	6862      	ldr	r2, [r4, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	bfde      	ittt	le
 800365e:	2330      	movle	r3, #48	; 0x30
 8003660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003668:	ebae 0305 	sub.w	r3, lr, r5
 800366c:	6123      	str	r3, [r4, #16]
 800366e:	f8cd 8000 	str.w	r8, [sp]
 8003672:	463b      	mov	r3, r7
 8003674:	aa03      	add	r2, sp, #12
 8003676:	4621      	mov	r1, r4
 8003678:	4630      	mov	r0, r6
 800367a:	f7ff feef 	bl	800345c <_printf_common>
 800367e:	3001      	adds	r0, #1
 8003680:	d155      	bne.n	800372e <_printf_i+0x1e6>
 8003682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003686:	b005      	add	sp, #20
 8003688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800368c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003690:	493c      	ldr	r1, [pc, #240]	; (8003784 <_printf_i+0x23c>)
 8003692:	6822      	ldr	r2, [r4, #0]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	f012 0f80 	tst.w	r2, #128	; 0x80
 800369a:	f100 0504 	add.w	r5, r0, #4
 800369e:	601d      	str	r5, [r3, #0]
 80036a0:	d001      	beq.n	80036a6 <_printf_i+0x15e>
 80036a2:	6803      	ldr	r3, [r0, #0]
 80036a4:	e002      	b.n	80036ac <_printf_i+0x164>
 80036a6:	0655      	lsls	r5, r2, #25
 80036a8:	d5fb      	bpl.n	80036a2 <_printf_i+0x15a>
 80036aa:	8803      	ldrh	r3, [r0, #0]
 80036ac:	07d0      	lsls	r0, r2, #31
 80036ae:	bf44      	itt	mi
 80036b0:	f042 0220 	orrmi.w	r2, r2, #32
 80036b4:	6022      	strmi	r2, [r4, #0]
 80036b6:	b91b      	cbnz	r3, 80036c0 <_printf_i+0x178>
 80036b8:	6822      	ldr	r2, [r4, #0]
 80036ba:	f022 0220 	bic.w	r2, r2, #32
 80036be:	6022      	str	r2, [r4, #0]
 80036c0:	2210      	movs	r2, #16
 80036c2:	e7b1      	b.n	8003628 <_printf_i+0xe0>
 80036c4:	4675      	mov	r5, lr
 80036c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80036ca:	fb02 3310 	mls	r3, r2, r0, r3
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036d4:	4603      	mov	r3, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d1f5      	bne.n	80036c6 <_printf_i+0x17e>
 80036da:	e7b7      	b.n	800364c <_printf_i+0x104>
 80036dc:	6808      	ldr	r0, [r1, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6949      	ldr	r1, [r1, #20]
 80036e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036e6:	d004      	beq.n	80036f2 <_printf_i+0x1aa>
 80036e8:	1d10      	adds	r0, r2, #4
 80036ea:	6018      	str	r0, [r3, #0]
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	6019      	str	r1, [r3, #0]
 80036f0:	e007      	b.n	8003702 <_printf_i+0x1ba>
 80036f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036f6:	f102 0004 	add.w	r0, r2, #4
 80036fa:	6018      	str	r0, [r3, #0]
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	d0f6      	beq.n	80036ee <_printf_i+0x1a6>
 8003700:	8019      	strh	r1, [r3, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	6123      	str	r3, [r4, #16]
 8003706:	4675      	mov	r5, lr
 8003708:	e7b1      	b.n	800366e <_printf_i+0x126>
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	1d11      	adds	r1, r2, #4
 800370e:	6019      	str	r1, [r3, #0]
 8003710:	6815      	ldr	r5, [r2, #0]
 8003712:	6862      	ldr	r2, [r4, #4]
 8003714:	2100      	movs	r1, #0
 8003716:	4628      	mov	r0, r5
 8003718:	f7fc fd72 	bl	8000200 <memchr>
 800371c:	b108      	cbz	r0, 8003722 <_printf_i+0x1da>
 800371e:	1b40      	subs	r0, r0, r5
 8003720:	6060      	str	r0, [r4, #4]
 8003722:	6863      	ldr	r3, [r4, #4]
 8003724:	6123      	str	r3, [r4, #16]
 8003726:	2300      	movs	r3, #0
 8003728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372c:	e79f      	b.n	800366e <_printf_i+0x126>
 800372e:	6923      	ldr	r3, [r4, #16]
 8003730:	462a      	mov	r2, r5
 8003732:	4639      	mov	r1, r7
 8003734:	4630      	mov	r0, r6
 8003736:	47c0      	blx	r8
 8003738:	3001      	adds	r0, #1
 800373a:	d0a2      	beq.n	8003682 <_printf_i+0x13a>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	079b      	lsls	r3, r3, #30
 8003740:	d507      	bpl.n	8003752 <_printf_i+0x20a>
 8003742:	2500      	movs	r5, #0
 8003744:	f104 0919 	add.w	r9, r4, #25
 8003748:	68e3      	ldr	r3, [r4, #12]
 800374a:	9a03      	ldr	r2, [sp, #12]
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	429d      	cmp	r5, r3
 8003750:	db05      	blt.n	800375e <_printf_i+0x216>
 8003752:	68e0      	ldr	r0, [r4, #12]
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	4298      	cmp	r0, r3
 8003758:	bfb8      	it	lt
 800375a:	4618      	movlt	r0, r3
 800375c:	e793      	b.n	8003686 <_printf_i+0x13e>
 800375e:	2301      	movs	r3, #1
 8003760:	464a      	mov	r2, r9
 8003762:	4639      	mov	r1, r7
 8003764:	4630      	mov	r0, r6
 8003766:	47c0      	blx	r8
 8003768:	3001      	adds	r0, #1
 800376a:	d08a      	beq.n	8003682 <_printf_i+0x13a>
 800376c:	3501      	adds	r5, #1
 800376e:	e7eb      	b.n	8003748 <_printf_i+0x200>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1a7      	bne.n	80036c4 <_printf_i+0x17c>
 8003774:	780b      	ldrb	r3, [r1, #0]
 8003776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800377a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800377e:	e765      	b.n	800364c <_printf_i+0x104>
 8003780:	08003a46 	.word	0x08003a46
 8003784:	08003a35 	.word	0x08003a35

08003788 <memcpy>:
 8003788:	b510      	push	{r4, lr}
 800378a:	1e43      	subs	r3, r0, #1
 800378c:	440a      	add	r2, r1
 800378e:	4291      	cmp	r1, r2
 8003790:	d100      	bne.n	8003794 <memcpy+0xc>
 8003792:	bd10      	pop	{r4, pc}
 8003794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800379c:	e7f7      	b.n	800378e <memcpy+0x6>

0800379e <memmove>:
 800379e:	4288      	cmp	r0, r1
 80037a0:	b510      	push	{r4, lr}
 80037a2:	eb01 0302 	add.w	r3, r1, r2
 80037a6:	d803      	bhi.n	80037b0 <memmove+0x12>
 80037a8:	1e42      	subs	r2, r0, #1
 80037aa:	4299      	cmp	r1, r3
 80037ac:	d10c      	bne.n	80037c8 <memmove+0x2a>
 80037ae:	bd10      	pop	{r4, pc}
 80037b0:	4298      	cmp	r0, r3
 80037b2:	d2f9      	bcs.n	80037a8 <memmove+0xa>
 80037b4:	1881      	adds	r1, r0, r2
 80037b6:	1ad2      	subs	r2, r2, r3
 80037b8:	42d3      	cmn	r3, r2
 80037ba:	d100      	bne.n	80037be <memmove+0x20>
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037c6:	e7f7      	b.n	80037b8 <memmove+0x1a>
 80037c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037d0:	e7eb      	b.n	80037aa <memmove+0xc>
	...

080037d4 <_free_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4605      	mov	r5, r0
 80037d8:	2900      	cmp	r1, #0
 80037da:	d045      	beq.n	8003868 <_free_r+0x94>
 80037dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e0:	1f0c      	subs	r4, r1, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfb8      	it	lt
 80037e6:	18e4      	addlt	r4, r4, r3
 80037e8:	f000 f8d6 	bl	8003998 <__malloc_lock>
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <_free_r+0x98>)
 80037ee:	6813      	ldr	r3, [r2, #0]
 80037f0:	4610      	mov	r0, r2
 80037f2:	b933      	cbnz	r3, 8003802 <_free_r+0x2e>
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	6014      	str	r4, [r2, #0]
 80037f8:	4628      	mov	r0, r5
 80037fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037fe:	f000 b8cc 	b.w	800399a <__malloc_unlock>
 8003802:	42a3      	cmp	r3, r4
 8003804:	d90c      	bls.n	8003820 <_free_r+0x4c>
 8003806:	6821      	ldr	r1, [r4, #0]
 8003808:	1862      	adds	r2, r4, r1
 800380a:	4293      	cmp	r3, r2
 800380c:	bf04      	itt	eq
 800380e:	681a      	ldreq	r2, [r3, #0]
 8003810:	685b      	ldreq	r3, [r3, #4]
 8003812:	6063      	str	r3, [r4, #4]
 8003814:	bf04      	itt	eq
 8003816:	1852      	addeq	r2, r2, r1
 8003818:	6022      	streq	r2, [r4, #0]
 800381a:	6004      	str	r4, [r0, #0]
 800381c:	e7ec      	b.n	80037f8 <_free_r+0x24>
 800381e:	4613      	mov	r3, r2
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	b10a      	cbz	r2, 8003828 <_free_r+0x54>
 8003824:	42a2      	cmp	r2, r4
 8003826:	d9fa      	bls.n	800381e <_free_r+0x4a>
 8003828:	6819      	ldr	r1, [r3, #0]
 800382a:	1858      	adds	r0, r3, r1
 800382c:	42a0      	cmp	r0, r4
 800382e:	d10b      	bne.n	8003848 <_free_r+0x74>
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	4401      	add	r1, r0
 8003834:	1858      	adds	r0, r3, r1
 8003836:	4282      	cmp	r2, r0
 8003838:	6019      	str	r1, [r3, #0]
 800383a:	d1dd      	bne.n	80037f8 <_free_r+0x24>
 800383c:	6810      	ldr	r0, [r2, #0]
 800383e:	6852      	ldr	r2, [r2, #4]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	4401      	add	r1, r0
 8003844:	6019      	str	r1, [r3, #0]
 8003846:	e7d7      	b.n	80037f8 <_free_r+0x24>
 8003848:	d902      	bls.n	8003850 <_free_r+0x7c>
 800384a:	230c      	movs	r3, #12
 800384c:	602b      	str	r3, [r5, #0]
 800384e:	e7d3      	b.n	80037f8 <_free_r+0x24>
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	1821      	adds	r1, r4, r0
 8003854:	428a      	cmp	r2, r1
 8003856:	bf04      	itt	eq
 8003858:	6811      	ldreq	r1, [r2, #0]
 800385a:	6852      	ldreq	r2, [r2, #4]
 800385c:	6062      	str	r2, [r4, #4]
 800385e:	bf04      	itt	eq
 8003860:	1809      	addeq	r1, r1, r0
 8003862:	6021      	streq	r1, [r4, #0]
 8003864:	605c      	str	r4, [r3, #4]
 8003866:	e7c7      	b.n	80037f8 <_free_r+0x24>
 8003868:	bd38      	pop	{r3, r4, r5, pc}
 800386a:	bf00      	nop
 800386c:	20000090 	.word	0x20000090

08003870 <_malloc_r>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	1ccd      	adds	r5, r1, #3
 8003874:	f025 0503 	bic.w	r5, r5, #3
 8003878:	3508      	adds	r5, #8
 800387a:	2d0c      	cmp	r5, #12
 800387c:	bf38      	it	cc
 800387e:	250c      	movcc	r5, #12
 8003880:	2d00      	cmp	r5, #0
 8003882:	4606      	mov	r6, r0
 8003884:	db01      	blt.n	800388a <_malloc_r+0x1a>
 8003886:	42a9      	cmp	r1, r5
 8003888:	d903      	bls.n	8003892 <_malloc_r+0x22>
 800388a:	230c      	movs	r3, #12
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	2000      	movs	r0, #0
 8003890:	bd70      	pop	{r4, r5, r6, pc}
 8003892:	f000 f881 	bl	8003998 <__malloc_lock>
 8003896:	4a23      	ldr	r2, [pc, #140]	; (8003924 <_malloc_r+0xb4>)
 8003898:	6814      	ldr	r4, [r2, #0]
 800389a:	4621      	mov	r1, r4
 800389c:	b991      	cbnz	r1, 80038c4 <_malloc_r+0x54>
 800389e:	4c22      	ldr	r4, [pc, #136]	; (8003928 <_malloc_r+0xb8>)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	b91b      	cbnz	r3, 80038ac <_malloc_r+0x3c>
 80038a4:	4630      	mov	r0, r6
 80038a6:	f000 f867 	bl	8003978 <_sbrk_r>
 80038aa:	6020      	str	r0, [r4, #0]
 80038ac:	4629      	mov	r1, r5
 80038ae:	4630      	mov	r0, r6
 80038b0:	f000 f862 	bl	8003978 <_sbrk_r>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d126      	bne.n	8003906 <_malloc_r+0x96>
 80038b8:	230c      	movs	r3, #12
 80038ba:	6033      	str	r3, [r6, #0]
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 f86c 	bl	800399a <__malloc_unlock>
 80038c2:	e7e4      	b.n	800388e <_malloc_r+0x1e>
 80038c4:	680b      	ldr	r3, [r1, #0]
 80038c6:	1b5b      	subs	r3, r3, r5
 80038c8:	d41a      	bmi.n	8003900 <_malloc_r+0x90>
 80038ca:	2b0b      	cmp	r3, #11
 80038cc:	d90f      	bls.n	80038ee <_malloc_r+0x7e>
 80038ce:	600b      	str	r3, [r1, #0]
 80038d0:	50cd      	str	r5, [r1, r3]
 80038d2:	18cc      	adds	r4, r1, r3
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 f860 	bl	800399a <__malloc_unlock>
 80038da:	f104 000b 	add.w	r0, r4, #11
 80038de:	1d23      	adds	r3, r4, #4
 80038e0:	f020 0007 	bic.w	r0, r0, #7
 80038e4:	1ac3      	subs	r3, r0, r3
 80038e6:	d01b      	beq.n	8003920 <_malloc_r+0xb0>
 80038e8:	425a      	negs	r2, r3
 80038ea:	50e2      	str	r2, [r4, r3]
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
 80038ee:	428c      	cmp	r4, r1
 80038f0:	bf0d      	iteet	eq
 80038f2:	6863      	ldreq	r3, [r4, #4]
 80038f4:	684b      	ldrne	r3, [r1, #4]
 80038f6:	6063      	strne	r3, [r4, #4]
 80038f8:	6013      	streq	r3, [r2, #0]
 80038fa:	bf18      	it	ne
 80038fc:	460c      	movne	r4, r1
 80038fe:	e7e9      	b.n	80038d4 <_malloc_r+0x64>
 8003900:	460c      	mov	r4, r1
 8003902:	6849      	ldr	r1, [r1, #4]
 8003904:	e7ca      	b.n	800389c <_malloc_r+0x2c>
 8003906:	1cc4      	adds	r4, r0, #3
 8003908:	f024 0403 	bic.w	r4, r4, #3
 800390c:	42a0      	cmp	r0, r4
 800390e:	d005      	beq.n	800391c <_malloc_r+0xac>
 8003910:	1a21      	subs	r1, r4, r0
 8003912:	4630      	mov	r0, r6
 8003914:	f000 f830 	bl	8003978 <_sbrk_r>
 8003918:	3001      	adds	r0, #1
 800391a:	d0cd      	beq.n	80038b8 <_malloc_r+0x48>
 800391c:	6025      	str	r5, [r4, #0]
 800391e:	e7d9      	b.n	80038d4 <_malloc_r+0x64>
 8003920:	bd70      	pop	{r4, r5, r6, pc}
 8003922:	bf00      	nop
 8003924:	20000090 	.word	0x20000090
 8003928:	20000094 	.word	0x20000094

0800392c <_realloc_r>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	4607      	mov	r7, r0
 8003930:	4614      	mov	r4, r2
 8003932:	460e      	mov	r6, r1
 8003934:	b921      	cbnz	r1, 8003940 <_realloc_r+0x14>
 8003936:	4611      	mov	r1, r2
 8003938:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800393c:	f7ff bf98 	b.w	8003870 <_malloc_r>
 8003940:	b922      	cbnz	r2, 800394c <_realloc_r+0x20>
 8003942:	f7ff ff47 	bl	80037d4 <_free_r>
 8003946:	4625      	mov	r5, r4
 8003948:	4628      	mov	r0, r5
 800394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800394c:	f000 f826 	bl	800399c <_malloc_usable_size_r>
 8003950:	4284      	cmp	r4, r0
 8003952:	d90f      	bls.n	8003974 <_realloc_r+0x48>
 8003954:	4621      	mov	r1, r4
 8003956:	4638      	mov	r0, r7
 8003958:	f7ff ff8a 	bl	8003870 <_malloc_r>
 800395c:	4605      	mov	r5, r0
 800395e:	2800      	cmp	r0, #0
 8003960:	d0f2      	beq.n	8003948 <_realloc_r+0x1c>
 8003962:	4631      	mov	r1, r6
 8003964:	4622      	mov	r2, r4
 8003966:	f7ff ff0f 	bl	8003788 <memcpy>
 800396a:	4631      	mov	r1, r6
 800396c:	4638      	mov	r0, r7
 800396e:	f7ff ff31 	bl	80037d4 <_free_r>
 8003972:	e7e9      	b.n	8003948 <_realloc_r+0x1c>
 8003974:	4635      	mov	r5, r6
 8003976:	e7e7      	b.n	8003948 <_realloc_r+0x1c>

08003978 <_sbrk_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4c06      	ldr	r4, [pc, #24]	; (8003994 <_sbrk_r+0x1c>)
 800397c:	2300      	movs	r3, #0
 800397e:	4605      	mov	r5, r0
 8003980:	4608      	mov	r0, r1
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	f7ff fb72 	bl	800306c <_sbrk>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_sbrk_r+0x1a>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	b103      	cbz	r3, 8003992 <_sbrk_r+0x1a>
 8003990:	602b      	str	r3, [r5, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	2000052c 	.word	0x2000052c

08003998 <__malloc_lock>:
 8003998:	4770      	bx	lr

0800399a <__malloc_unlock>:
 800399a:	4770      	bx	lr

0800399c <_malloc_usable_size_r>:
 800399c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80039a0:	2800      	cmp	r0, #0
 80039a2:	f1a0 0004 	sub.w	r0, r0, #4
 80039a6:	bfbc      	itt	lt
 80039a8:	580b      	ldrlt	r3, [r1, r0]
 80039aa:	18c0      	addlt	r0, r0, r3
 80039ac:	4770      	bx	lr
	...

080039b0 <_init>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	bf00      	nop
 80039b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b6:	bc08      	pop	{r3}
 80039b8:	469e      	mov	lr, r3
 80039ba:	4770      	bx	lr

080039bc <_fini>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr
