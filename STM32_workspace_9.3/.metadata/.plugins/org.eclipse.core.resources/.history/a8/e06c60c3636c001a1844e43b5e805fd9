/*
 * server.c
 *
 *  Created on: 22 mars 2020
 *      Author: cedric
 */

#include<stdio.h>
#include<string.h>	//strlen
#include<sys/socket.h>
#include<arpa/inet.h>	//inet_addr
#include"debug.h"
#include<errno.h> //errno
#include<unistd.h>
#include "server.h"

int create_socket(void) {
	int socket_desc;
	int error_socket;
	socket_desc = socket(AF_INET, SOCK_STREAM, 0);
	error_socket = errno;
	if (socket_desc == -1) {
		error_printf(
				"Could not create socket // Num error : [%i] // Message_error : [%s]\n",
				error_socket, strerror(error_socket));
	}
	return socket_desc;
}

int create_server(void) {
	struct sockaddr_in server;
	int error_create;
	int is_create = -1;
	int socket_desc = -1;
	int new_socket;
	int c;
	while (socket_desc == -1) {
		socket_desc = create_socket();
		if (socket_desc == -1) {
			sleep(2);
		} else {
			server.sin_family = AF_INET;
			server.sin_addr.s_addr = INADDR_ANY;
			server.sin_port = htons(5001);
			while (is_create == -1) {
				is_create = bind(socket_desc, (struct sockaddr *) &server, sizeof(server));
				if (is_create == -1) {
					error_create = errno;
					error_printf(
							"bind failed // Num error : [%i] // Message_error : [%s]\n\n",
							error_create, strerror(error_create));
					sleep(2);
				} else {
					debug_printf(3, "bind done (fd=%d) \n", socket_desc);
					return socket_desc;
				}
			}
		}
	}
	//listen
	listen(socket_desc, 3);

	//accept and incoming connection
	debug_printf(3, "Waiting for incoming connections", socket_desc);
	c = sizeof(struc sockaddr_in);
	return socket_desc;
}

int listen_client(int socket_desc){
	int is_listen;
	//Listen
	is_listen = listen(socket_desc , 3);
	return is_listen;
}

int accept_connection(int socket_desc){
	debug_printf(3, "Waiting for incoming connections", socket_desc);

}

