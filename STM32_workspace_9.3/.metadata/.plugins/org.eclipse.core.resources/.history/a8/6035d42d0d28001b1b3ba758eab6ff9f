/*
 * game.c
 *
 *  Created on: 15 Apr 2020
 *      Author: cedric
 */
#include<stdio.h>
#include"game.h"
#include"leds_control.h"
#include "cmsis_os.h"
#include<pthread.h>
#include<unistd.h>
//#include<semaphore.h>
#include <stdbool.h>

/*
 * -----------------------------------------------------------------------------------------------------------------------------------
 *
 *
 * 														GLOBAL VARIABILE
 *
 *
 * -----------------------------------------------------------------------------------------------------------------------------------
 */

//static pthread_mutex_t mutex_timer;

static RGB actual_matrice[7][7];
static RGB matrice[7][7];
char init_matrice_is_ok = 0;
static int TabSize = 7;
int actual_player;
Timer timer_blink;
Timer timer_to_play;
Timer timer_idle;
int blink_type = 0;
Timer tab_timer[NB_TIMERS];

const RGB Red={255,0,0};
const RGB Green={0,255,0};
const RGB Blue={0,0,255};
const RGB White={255,255,255};
const RGB Purple={255,0,255};
const RGB Yellow={255,255,0};
const RGB Black={0,0,0};

const RGB bckgrd = {255, 255, 255};
const RGB token_player_1 = {0, 0, 255};
const RGB token_player_2 = {0, 255, 0};

extern osMessageQueueId_t queue_readHandle;
extern osMessageQueueId_t queue_sendHandle;

/*
 * -----------------------------------------------------------------------------------------------------------------------------------
 *
 *
 * 														FUNCTION
 *
 *
 * -----------------------------------------------------------------------------------------------------------------------------------
 */

void init_matrice(void){
	for (int line = 0; line < 7; line ++){
		for(int col = 0; col < 7; col ++){
			matrice[col][line] = bckgrd;
		}
	}
	matrice[3][0] = token_player_1;
	SetLedMatrice();
}

void SetLedMatrice(){
	for (int line=0; line<TabSize; line++){
		for(int col = 0; col < TabSize; col++){
			if (init_matrice_is_ok == 0){
				actual_matrice[col][line].RValue =  matrice[col][line].RValue;
				actual_matrice[col][line].GValue =  matrice[col][line].GValue;
				actual_matrice[col][line].BValue =  matrice[col][line].BValue;
				setLedColor(line+1, col+1, matrice[col][line].RValue, matrice[col][line].GValue, matrice[col][line].BValue);
			}
			else{
				if ((matrice[col][line].RValue != actual_matrice[col][line].RValue) ||
						(matrice[col][line].GValue != actual_matrice[col][line].GValue) ||
						(matrice[col][line].BValue != actual_matrice[col][line].BValue)){
					setLedColor(line+1, col+1, matrice[col][line].RValue, matrice[col][line].GValue, matrice[col][line].BValue);
					actual_matrice[col][line].RValue =  matrice[col][line].RValue;
					actual_matrice[col][line].GValue =  matrice[col][line].GValue;
					actual_matrice[col][line].BValue =  matrice[col][line].BValue;
				}
			}
		}
	}
	init_matrice_is_ok = 1;
}

void start_game(void){
	init_matrice();
	gp4_init();
	actual_player = PLAYER_1;
}



void blink_led(winner_t winner, char *message){
	if (blink_type == 0){
		matrice[winner.win_position[0].col][winner.win_position[0].line+1] = bckgrd;
		matrice[winner.win_position[1].col][winner.win_position[1].line+1] = bckgrd;
		matrice[winner.win_position[2].col][winner.win_position[2].line+1] = bckgrd;
		matrice[winner.win_position[3].col][winner.win_position[3].line+1] = bckgrd;
		SetLedMatrice();
		blink_type = 1;
	}
	else if (blink_type == 1){
		RGB token;
		if (message[1] == PLAYER_1){
			token = token_player_1;
		}
		else if (message[1] == PLAYER_2){
			token = token_player_2;
		}
		matrice[winner.win_position[0].col][winner.win_position[0].line+1] = token;
		matrice[winner.win_position[1].col][winner.win_position[1].line+1] = token;
		matrice[winner.win_position[2].col][winner.win_position[2].line+1] = token;
		matrice[winner.win_position[3].col][winner.win_position[3].line+1] = token;
		SetLedMatrice();
		blink_type = 0;
	}
}





void StartTimer(int num_timer, int delay){
	int countdown = (delay / DELAY_SLEEP_TIMER);
	if (num_timer > NB_TIMERS){
	}
	else{
		//pthread_mutex_lock(&mutex_timer);
		tab_timer[num_timer].status = START;
		tab_timer[num_timer].countdown = countdown;
		//pthread_mutex_unlock(&mutex_timer);
	}
}

void StopTimer(int num_timer){
	if (num_timer > NB_TIMERS){
	}
	else {
		//pthread_mutex_lock(&mutex_timer);
		tab_timer[num_timer].status = STOP;
		//pthread_mutex_unlock(&mutex_timer);
	}
}

void init_timer(void){
	// timer blink
	timer_blink.number = 0;
	StopTimer(timer_blink.number);
	timer_blink.owner = APP;
	//timer to play
	timer_to_play.number = 1;
	StartTimer(timer_to_play.number, DELAY_TO_PLAY);
	timer_to_play.owner = APP;
	//timer inactivity
	timer_idle.number = 2;
	StartTimer(timer_idle.number, DELAY_IDLE);
	timer_idle.owner = APP;
}



void compute_message(char message_send[10], pos_token_t move_token) {
	message_send[4] = move_token.beg_position.col;
	message_send[5] = move_token.beg_position.line;
	message_send[6] = move_token.end_position.col;
	message_send[7] = move_token.end_position.line;
}




void function_play_token(pos_token_t move_token, char message_send[10],
		pos_token_t move_token_next_player, char message_receive[10],
		const Timer* timer_blink, winner_t* winner) {
	//	message_send[0] = message_receive[0];
	move_token = gp4_top_play_token();
	compute_message(message_send, move_token);
	send_message(QUEUE_SEND, message_send, 1);
	*winner = gp4_check_winner();
	if (winner->status == live) {
		move_token_next_player = gp4_next_player();
		if (message_send[1] == PLAYER_1) {
			actual_player = PLAYER_2;
			message_send[1] = actual_player;
			compute_message(message_send, move_token_next_player);
			send_message(QUEUE_SEND, message_send, 1);
		}
		else if (message_send[1] == PLAYER_2) {
			actual_player = PLAYER_1;
			message_send[1] = actual_player;
			compute_message(message_send, move_token_next_player);
			send_message(QUEUE_SEND, message_send, 1);
		}
		StartTimer(timer_to_play.number, DELAY_TO_PLAY);
	}
	else if (winner->status == stop_winner) {
		StartTimer(timer_blink->number, DELAY_BLINK);
	}
}








void send_message(osMessageQueueId_t queue, char *message, int message_lenght) {
	if (queue == queue_readHandle) {
		osMessageQueuePut(&queue_readHandle, message, 10, osWaitForever);
	}
	if (queue == queue_sendHandle) {
		osMessageQueuePut(&queue_sendHandle, message, 10, osWaitForever);
	}
}

int receive_message(osMessageQueueId_t queue, char *message, int message_lenght) {
	int return_value = 0;
	if (queue == queue_readHandle) {
		return_value = osMessageQueueGet(&queue_readHandle, message, NULL, osWaitForever);
	}
	if (queue == queue_sendHandle) {
		return_value = osMessageQueueGet(&queue_sendHandle, message, NULL, osWaitForever);
	}
	return return_value;
}


