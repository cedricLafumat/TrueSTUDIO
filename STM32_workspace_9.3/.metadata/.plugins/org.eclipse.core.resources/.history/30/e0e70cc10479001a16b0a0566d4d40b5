#include <stdio.h>
#include <stdlib.h>
#include "file.h"


void init_queue(struct Queue *queue){
	queue-> head = NULL;
	queue-> tail = NULL;
}

void add_element(struct Queue *queue, int val_number){
	//creation d'une structure 'new_element' de type Element et allocation d'un espace mémoire de la taille de la structure
	struct Element *new_element = malloc(sizeof(*new_element));

/*	if(queue == NULL || new_element == NULL){
		exit(EXIT_FAILURE);
	}*/

	// affectation des champs de new_element
	// on ne connait pas le prochain element, alors new_element->next = NULL
	new_element->number = val_number;
	new_element->next = NULL;

	if(queue->head != NULL){ // La pile a au moins 1 élément
		// creation d'une structure 'actual_element' pour avec les donnees du tail (dernier element)
		struct Element *actual_tail = queue->tail;
		// je mets le pointeur de l'element actuel vers le nouvel element
		actual_tail->next = new_element;
		// le nouvel element devient le tail de la pile
		queue->tail = new_element;
	}
	else{ // Le pointeur vers le 1er élément n'existe pas, ma pile est vide
		queue->head = new_element;
		queue->tail = new_element;
	}

}

int pop_element(struct Queue *queue){

    int content_element = 0;

  //  verification qu'il y ai un element à enlever
    if (queue->head != NULL)
    {
    	// creation d'une struct element_to_remove de type Element de l'element qui va etre enlever
    	// mettre la tete de la pile dans element_to_remove
        struct Element *element_to_remove = queue->head;
        // je recupère le contenu de l'element
        content_element = element_to_remove->number;
        // l'element suivant devient la tete
        queue->head = element_to_remove->next;
        // libere l'espace alloue pour cet element
        free(element_to_remove);
    }

    return content_element;
}


void print_queue(struct Queue *queue){

}

/*
void afficherFile(File *file)
{
    if (file == NULL)
    {
        exit(EXIT_FAILURE);
    }

    Element *element = file->premier;

    while (element != NULL)
    {
        printf("%d ", element->nombre);
        element = element->suivant;
    }

    printf("\n");
}*/



